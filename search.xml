<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>selenium/standalone-chrome调试</title>
      <link href="/2020/07/20/seleniumstandalone-chrome%E8%B0%83%E8%AF%95/"/>
      <url>/2020/07/20/seleniumstandalone-chrome%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p><a href="https://hub.docker.com/search?q=selenium&type=image" target="_blank" rel="noopener">selenium镜像</a> 地址</p><ul><li><strong>selenium/base</strong>: 包含 Java 运行组件及 Selenium jar 文件的基础镜像</li><li><strong>selenium/hub</strong>: 运行 Selenium Grid Hub 的镜像</li><li><strong>selenium/node-base</strong>: 包含虚拟桌面环境及 VNC 支持的 Selenium Grid Node 基础镜像</li><li><strong>selenium/node-chrome</strong>: 包含 Chrome 的 Selenium node 镜像。需要连接 Selenium Grid Hub 使用。</li><li><strong>selenium/node-firefox</strong>: 包含 firefox 的 Selenium node 镜像。需要连接 Selenium Grid Hub 使用。</li><li><strong>selenium/standalone-chrome</strong>: 包含 Chrome 的 Selenium standalone 镜像（不需要连接 Selenium Grid Hub）</li><li><strong>selenium/standalone-firefox</strong>: 包含 Firefox 的 Selenium standalone 镜像（不需要连接 Selenium Grid Hub）</li><li><strong>selenium/standalone-chrome-debug</strong>: 包含 Chrome 和 VNC Server 的 Selenium standalone 镜像</li><li><strong>selenium/standalone-firefox-debug</strong>: 包含 Firefox 和 VNC Server 的 Selenium standalone 镜像</li><li><strong>selenium/node-chrome-debug</strong>: 包含 Chrome 和 VNC Server 的 Selenium Grid Node 镜像，需要连接 Selenium Grid Hub 使用</li><li><strong>selenium/node-firefox-debug</strong>: 包含 Firefox 和 VNC Server 的 Selenium Grid Node 镜像，需要连接 Selenium Grid Hub 使用</li></ul></li><li><p><a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">VNC Viewer</a> 地址</p></li></ul><h2 id="获取selenium-standalone-chrome-debug镜像"><a href="#获取selenium-standalone-chrome-debug镜像" class="headerlink" title="获取selenium/standalone-chrome-debug镜像"></a>获取selenium/standalone-chrome-debug镜像</h2><p><code>这里我是用的是包含 Chrome 和 VNC Server的 Selenium standalone 镜像</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 获取镜像</span><br><span class="line"><span class="meta">$</span> docker pull selenium/standalone-chrome-debug</span><br><span class="line"><span class="meta">#</span> 启动镜像</span><br><span class="line"><span class="meta">$</span> docker run -d -p 4444:4444 -p 5900:5900 selenium/standalone-chrome-debug</span><br></pre></td></tr></table></figure><p>启动成功后访问<a href="http://localhost:4444/" target="_blank" rel="noopener">localhost:4444</a>可以看到<code>selenium standalone</code>页面</p><p><img src="https://s1.ax1x.com/2020/07/20/U4UqOK.png" alt></p><h2 id="安装VNC-Viewer"><a href="#安装VNC-Viewer" class="headerlink" title="安装VNC Viewer"></a>安装VNC Viewer</h2><p>根据自己的操作系统下载相应的客户端</p><p><img src="https://s1.ax1x.com/2020/07/20/U4Vqqf.png" alt></p><h2 id="使用VNC-Viewer访问docker"><a href="#使用VNC-Viewer访问docker" class="headerlink" title="使用VNC Viewer访问docker"></a>使用VNC Viewer访问docker</h2><ul><li><p>打开vnc viewer软件</p></li><li><p><strong>file -&gt; new connection</strong> 按下图填入数据，点击<strong>OK</strong></p><p><img src="https://s1.ax1x.com/2020/07/20/U4duUe.png" alt></p></li><li><p>双击刚刚创建的连接，默认密码为<code>secret</code></p><p><img src="https://s1.ax1x.com/2020/07/20/U4dR54.png" alt></p></li><li><p>接下来就可以连接到镜像了，我们可以在空白处右击打开菜单，选择需要使用的应用或设置</p><p><img src="https://s1.ax1x.com/2020/07/20/U4dTr6.png" alt></p></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>当我们的脚本运行在另一个docker容器中，需要和standalone-chrome进行交互时，我们在启动命令加入 <code>--link</code>解决此问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动chrome镜像</span><br><span class="line"><span class="meta">$</span> docker run -d -p 4444:4444 -e TZ="Asia/Shanghai" -v/dev/shm:/dev/shm --shm-size=2g --name chrome selenium/standalone-chrome</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动脚本所在的镜像(test_images为需要交互的镜像)</span><br><span class="line"><span class="meta">$</span> docker run -d -p 5001:5001 -e TZ="Asia/Shanghai" --link chrome:chrome  test_images</span><br></pre></td></tr></table></figure><p>然后我们更改脚本中需要启动Chome的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始代码</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment">#-------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 修改后的</span></span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">    command_executor=<span class="string">"http://chrome:4444/wd/hub"</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell笔记</title>
      <link href="/2020/02/07/shell/"/>
      <url>/2020/02/07/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="SHELL基础"><a href="#SHELL基础" class="headerlink" title="SHELL基础"></a>SHELL基础</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLAlchemy</title>
      <link href="/2019/12/18/ORM/"/>
      <url>/2019/12/18/ORM/</url>
      
        <content type="html"><![CDATA[<h2 id="ORM介绍"><a href="#ORM介绍" class="headerlink" title="ORM介绍"></a>ORM介绍</h2><p> <strong>Object Relationship Mapping  - 对象关系映射</strong></p><ul><li><p>orm优点：</p><ol><li>易用性：使用ORM做数据库开发可以有效减少SQL语句重复的概率</li><li>性能损耗小</li><li>设计灵活：可以轻松写出复杂查询</li><li>可移植性：<code>SQLAlchmy</code>封装了底层的数据库实现，支持多个关系型数据库引擎。</li></ol></li><li><p>使用<code>SQLAlchemy</code>去连接数据库，需要使用一些配置信息，然后将它们组合成满足条件的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">HOSTNAME = <span class="string">'localhost'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'sqlalchemy_learn'</span></span><br><span class="line">USERNAME = <span class="string">'root'</span></span><br><span class="line">PASSWORD =<span class="string">''</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">"mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;db&#125;?charset=utf8"</span>.format(</span><br><span class="line">    username=USERNAME,password=PASSWORD,host=HOSTNAME,port=PORT,db=DATABASE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个引擎去操作SQL</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否来连接成功</span></span><br><span class="line">conn = engine.connect()</span><br><span class="line">result = conn.execute(<span class="string">'select 1'</span>)</span><br><span class="line">print(result.fetchone())</span><br></pre></td></tr></table></figure></li><li><p>ORM模型映射数据库</p><ol><li>用<code>declarative_base</code>根据<code>engine</code>创建一个ORM基类。</li><li>用<code>Base</code>类作为基类来写自己的ORM类。要定义<code>__tablename__</code>类属性，来指定这个模型映射到数据库中的表名。</li><li>创建属性来映射到表的字段，所有需要映射到表中的属性都应该为Column类型。</li><li>使用<code>Base.metadata.create_all()</code>来将模型映射到数据库中。</li><li>一旦使用<code>Base.metadata.create_all()</code>将模型映射到数据库中后，即使改变了模型字段，也不会重新映射了。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">HOSTNAME = <span class="string">'localhost'</span></span><br><span class="line">PORT = <span class="string">'3306'</span></span><br><span class="line">DATABASE = <span class="string">'sqlalchemy_learn'</span></span><br><span class="line">USERNAME = <span class="string">'root'</span></span><br><span class="line">PASSWORD =<span class="string">''</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">"mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;db&#125;?charset=utf8"</span>.format(</span><br><span class="line">    username=USERNAME,password=PASSWORD,host=HOSTNAME,port=PORT,db=DATABASE)</span><br><span class="line"></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Person'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">50</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line">Base.metadata.create_all()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Column常用参数"><a href="#Column常用参数" class="headerlink" title="Column常用参数"></a>Column常用参数</h3><ul><li><code>default</code> : 默认值</li><li><code>nullable</code>：是否为空。</li><li><code>primary_key</code>：是否为主键</li><li><code>unique</code>：是否唯一</li><li><code>autoincrement</code>：是否自动增长</li><li><code>name</code>：该属性在数据库中的字段映射</li></ul><h3 id="SQLAlchemy常用数据类型"><a href="#SQLAlchemy常用数据类型" class="headerlink" title="SQLAlchemy常用数据类型"></a>SQLAlchemy常用数据类型</h3><ul><li><code>Integer</code>：整数</li><li><code>Float</code>：浮点类型</li><li><code>Boolean</code>：传递<code>True/Flase</code>进去</li><li><code>DECIMAL</code>：定点类型</li><li><code>enum</code>：枚举类型</li><li><code>Date</code>：传递<code>datetime.data()</code>进去</li><li><code>DateTime</code>：传递<code>datetime.datetime()</code>进去</li><li><code>Time</code>：传递<code>datetime.time()</code>进去</li><li><code>String</code>：字符类型，使用时需要指定长度，区别于<code>Text</code>类型</li><li><code>Text</code>：文本类型</li><li><code>LONGTEXT</code>：长文本类型</li></ul><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><p>模板代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    HOSTNAME = <span class="string">'localhost'</span></span><br><span class="line">    PORT = <span class="string">'3306'</span></span><br><span class="line">    DATABASE = <span class="string">'watchlist'</span></span><br><span class="line">    USERNAME = <span class="string">'root'</span></span><br><span class="line">    PASSWORD =<span class="string">''</span></span><br><span class="line"></span><br><span class="line">    DB_URI = <span class="string">"mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;db&#125;?charset=utf8"</span>.format(</span><br><span class="line">        username=USERNAME,password=PASSWORD,host=HOSTNAME,port=PORT,db=DATABASE)</span><br><span class="line">    engine = create_engine(DB_URI)</span><br><span class="line">    session = sessionmaker(bind=engine)()</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'Person'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">50</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"><span class="comment"># Base.metadata.create_all()</span></span><br></pre></td></tr></table></figure><ul><li><p>创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session = get_session()</span><br><span class="line">new_person = Person(name=<span class="string">'tim'</span>, age=<span class="number">15</span>)</span><br><span class="line">session.add(new_person)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li><li><p>查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">session = get_session()</span><br><span class="line">users = session.query(Person).filter(Person.id&gt;<span class="number">0</span>).all()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> users:</span><br><span class="line">print(_.id, _.name, _.age)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><p><strong>也可以直接使用原生SQL语句查询</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session = get_session()</span><br><span class="line">cursor = session.execute(<span class="string">'select * from Person'</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul><p>  通过对模型类的 <code>query</code> 属性调用可选的过滤方法和查询方法，我们就可以获取到对应的单个或多个记录（记录以模型类实例的形式表示）。查询语句的格式如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;模型类&gt;.query.&lt;过滤方法（可选）&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure><p>  下面是一些常用的过滤方法：</p><table><thead><tr><th>过滤方法</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>使用指定的规则过滤记录，返回新产生的查询对象</td></tr><tr><td>filter_by()</td><td>使用指定规则过滤记录（以关键字表达式的形式），返回新产生的查询对象</td></tr><tr><td>order_by()</td><td>根据指定条件对记录进行排序，返回新产生的查询对象</td></tr><tr><td>group_by()</td><td>根据指定条件对记录进行分组，返回新产生的查询对象</td></tr></tbody></table><p>  下面是一些常用的查询方法：</p><table><thead><tr><th>查询方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>返回包含所有查询记录的列表</td></tr><tr><td>first()</td><td>返回查询的第一条记录，如果未找到，则返回None</td></tr><tr><td>get(id)</td><td>传入主键值作为参数，返回指定主键值的记录，如果未找到，则返回None</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>first_or_404()</td><td>返回查询的第一条记录，如果未找到，则返回404错误响应</td></tr><tr><td>get_or_404(id)</td><td>传入主键值作为参数，返回指定主键值的记录，如果未找到，则返回404错误响应</td></tr><tr><td>paginate()</td><td>返回一个Pagination对象，可以对记录进行分页处理</td></tr></tbody></table><ul><li><p>更改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">session = get_session()</span><br><span class="line">Person = session.query(Person).get(<span class="number">3</span>) <span class="comment"># 使用ID查询</span></span><br><span class="line">Person.name = <span class="string">'tom'</span></span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line"><span class="comment"># 筛选条件更改</span></span><br><span class="line">session = get_session()</span><br><span class="line">Person = session.query(Person).filter(Person.name==<span class="string">'tim'</span>).first()</span><br><span class="line">Person.name = <span class="string">'ttm'</span></span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jinja2模板</title>
      <link href="/2019/12/09/jinja2%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/12/09/jinja2%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="Jinja2模板"><a href="#Jinja2模板" class="headerlink" title="Jinja2模板"></a>Jinja2模板</h2><h3 id="模板介绍"><a href="#模板介绍" class="headerlink" title="模板介绍"></a>模板介绍</h3><ul><li>在渲染模板的时候，默认会从项目的根目录下<code>templates</code>目录下查找模板</li><li>如果不想把模板文件放在<code>templatest</code>目录下，那么就在<code>Flask初始化的时候使用</code>templates_folder`来指定模板路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__, template_folder=<span class="string">r'D:\workspaces\Pythonspace\flask_learn\templates'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/posts/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posts</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'posts/post_demo.html'</span>)</span><br></pre></td></tr></table></figure><p><strong>post_demo.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>帖子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是帖子页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板传参"><a href="#模板传参" class="headerlink" title="模板传参"></a>模板传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">param</span><span class="params">()</span>:</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'username'</span> :<span class="string">'tim'</span>,</span><br><span class="line">        <span class="string">'age'</span>:<span class="string">'18'</span>,</span><br><span class="line">        <span class="string">'sex'</span>:<span class="string">'female'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'template/template_param.html'</span>, **context)</span><br></pre></td></tr></table></figure><p><strong>template_param.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板传参<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    模板传参：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>  <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板URL-FOR"><a href="#模板URL-FOR" class="headerlink" title="模板URL_FOR"></a>模板URL_FOR</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'template/template_url_for.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'login succes!'</span></span><br></pre></td></tr></table></figure><p><strong>template_url_for.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>url_for跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">" &#123;&#123;url_for('login')&#125;&#125; "</span>&gt;</span> 登陆 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><a href="http://docs.jinkan.org/docs/jinja2/templates.html#builtin-filters" target="_blank" rel="noopener">http://docs.jinkan.org/docs/jinja2/templates.html#builtin-filters</a></p><p>过滤器是通过管道符号（ | ）进行使用的，例如：0，将返回name的长度。过滤器相当于一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后将结果渲染到页面中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。</p><ul><li><p><code>abs(value)</code>：返回一个数的绝对值。 例如：<code>-1|abs</code></p></li><li><p><code>default(value, default_value, boolean=false)</code>：如果当前的变量没有值，则使用参数中的值来代替。 <code>name|default(&#39;ivy&#39;)</code> – 如果<code>name</code>不存在，则使用<code>ivy</code>来代替。<code>boolean=false</code>默认是在这个变量为<code>undefined</code>的时候才会使用的<code>default</code>的值。当这个变量又被定义，但是这个变量为<code>Flase(None , False</code>, 及其各种数据类型的空类型)时，会返回相应的值，这时候只要将<code>boolean=True</code>,就会渲染默认的值。</p></li><li><p><code>or</code>：<strong></strong>  和python自带的or一样。</p></li><li><p><code>escape(value)</code>或<code>e</code>：转义字符，会将 &lt; 、&gt; 等符号转义成html中的符号 <code>content|escape</code>  或者 <code>content|e</code></p></li><li><p><code>safe(value)</code>：关闭自动转义  <code>content|safe</code></p></li><li><p><code>first(value)</code>：返回一个序列的第一个元素。 <code>name|first</code></p></li><li><p><code>format(value, *args, **kwargs)</code> : 格式化字符串：</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">"%s"</span>_<span class="string">"%s"</span>|format(<span class="string">'hello'</span>, <span class="string">'world'</span>) &#125;&#125; 输出 ： hello_world</span><br></pre></td></tr></table></figure></li><li><p><code>last(value)</code>: 返回一个序列的最后一个元素 <code>name|last</code></p></li><li><p><code>length(value)</code>：返回一个序列或者字典的长度<code>name|length</code></p></li><li><p><code>join(value, format_key)</code>：跟python的join一样</p></li><li><p><code>int（value）</code>： 转换为int整型</p></li><li><p><code>float（value）</code>：转换为float类型</p></li><li><p><code>lower(value)</code>：转换为小写</p></li><li><p><code>upper(upper)</code>: 转换为大写</p></li><li><p><code>replace(value, old, new)</code>：字符串替换</p></li><li><p><code>truncate(value, length=255, killwords=False)</code>： 截取length长度的字符串</p></li><li><p><code>striptags（value）</code>：删除字符串中的所有html标签，如果出现空格，将替换成一个空格</p></li><li><p><code>trim</code>： 截取字符串前面和后面的空白字符串</p></li></ul><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>过滤器本质上就是一个函数，如果在模板中调用这个过滤器，那么就会将这个变量的值作为第一个参数传给过滤器函数，然后函数的返回值会作为这个过滤器的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter('cut')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(value)</span>:</span></span><br><span class="line">    value = value.replace(<span class="string">'hello'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h3 id="if-for-语句"><a href="#if-for-语句" class="headerlink" title="if / for 语句"></a>if / for 语句</h3><p>在渲染过程中使用实际值替换占位符，只是Jinja2在模板文件中支持的诸多强大操作之一。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">-</span>模板也支持在`&#123;%<span class="attr">...</span>%&#125;`块内使用控制语句 <span class="attr">-</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125; - Microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to Microblog!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;&#123; user.username &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    user = &#123;<span class="string">'username'</span>: <span class="string">'Miguel'</span>&#125;</span><br><span class="line">    posts = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'username'</span>: <span class="string">'John'</span>&#125;,</span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'Beautiful day in Portland!'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'author'</span>: &#123;<span class="string">'username'</span>: <span class="string">'Susan'</span>&#125;,</span><br><span class="line">            <span class="string">'body'</span>: <span class="string">'The Avengers movie was so cool!'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, title=<span class="string">'Home'</span>, user=user, posts=posts)</span><br></pre></td></tr></table></figure><p>我使用了一个列表来表示用户动态，其中每个元素是一个具有<code>author</code>和<code>body</code>字段的字典。 未来设计用户和其动态时，我将尽可能地保留这些字段名称，以便在使用真实用户和其动态的时候不会出现问题。</p><p>在模板方面，我必须解决一个新问题。 用户动态列表拥有的元素数量由视图函数决定。 那么模板不能对有多少个用户动态进行任何假设，因此需要准备好以通用方式渲染任意数量的用户动态。</p><p>Jinja2提供了<code>for</code>控制结构来应对这类问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125; - Microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to Microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, &#123;&#123; user.username &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% for post in posts %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.author.username &#125;&#125; says: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="宏和import语句"><a href="#宏和import语句" class="headerlink" title="宏和import语句"></a>宏和import语句</h3><p>模板中的宏跟python中的函数类似，可以传递参数，但是不能有返回值，可以将一些经常用到的代码片段放到宏中，然后把一些不固定的值抽取出来当成一个变量，以下将用一个例子来进行解释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro input(name, value='', type='text') %&#125;        </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"&#123;&#123; type &#125;&#125;"</span> <span class="attr">name</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; value|e &#125;&#125;"</span>&gt;</span>    </span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>以上例子可以抽取出了一个input标签，指定了一些默认参数。那么我们以后创建<code>input</code>标签的时候，可以通过他快速的创建：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('username') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; input('password', type='password') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>在真实的开发中，会将一些常用的宏单独放在一个文件中，在需要使用的时候，再从这个文件中进行导入。<code>import</code>语句的用法跟<code>python</code>中的<code>import</code>类似，可以直接<code>import...as...</code>，也可以<code>from...import...</code>或者<code>from...import...as...</code>，假设现在有一个文件，叫做<code>forms.html</code>，里面有两个宏分别为<code>input</code>和<code>textarea</code>，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forms.html：    </span><br><span class="line">&#123;% macro input(name, value='', type='text') %&#125;        </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"&#123;&#123; type &#125;&#125;"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; value|e &#125;&#125;"</span> <span class="attr">name</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span>&gt;</span>    </span><br><span class="line">&#123;% endmacro %&#125;     </span><br><span class="line">&#123;% macro textarea(name, value='', rows=10, cols=40) %&#125;        </span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"&#123;&#123; name &#125;&#125;"</span> <span class="attr">rows</span>=<span class="string">"&#123;&#123; rows &#125;&#125;"</span> <span class="attr">cols</span>=<span class="string">"&#123;&#123; cols &#125;&#125;"</span>&gt;</span>&#123;&#123; value|e &#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>    </span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><hr><ol><li><p><code>import...as...</code>形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import 'forms.html' as forms %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; forms.input('username') &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; forms.input('password', type='password') &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;forms.textarea('comment') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>from...import...as.../from...import...</code>形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from 'forms.html' import input as input_field, textarea %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; input_field('username') &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&#123;&#123; input_field('password', type='password') &#125;&#125;<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; textarea('comment') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>另外需要注意的是，导入模板并不会把当前上下文中的变量添加到被导入的模板中，如果你想要导入一个需要访问当前上下文变量的宏，有两种可能的方法:</p><ul><li>显式地传入请求或请求对象的属性作为宏的参数。</li><li>与上下文一起（with context）导入宏。</li></ul><p>与上下文中一起（with context）导入的方式如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% from '_helpers.html' import my_macro with context %&#125;</span><br></pre></td></tr></table></figure><h3 id="set-with语句"><a href="#set-with语句" class="headerlink" title="set/with语句"></a>set/with语句</h3><ul><li><p><strong>set语句</strong></p><p>在模板中可以使用<code>set</code>语句来定义变量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set username='tim'%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> name:&#123;&#123; username &#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>with语句</strong></p><p><code>with</code>语句定义的变量，只能在<code>with</code>代码块中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with uasername='tim' %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> name:&#123;&#123; username &#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endwith%&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h3><p> 静态文件主要包括<code>css</code>，<code>JavaScript</code>等脚本文件、图片等，在加载文件的时候主要是用<code>url_for</code>方法。</p><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(<span class="string">'文件夹'</span>, filename=<span class="string">'调用文件路径及扩展名'</span>) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>绝大多数Web应用程序在页面的顶部都有一个导航栏，其中带有一些常用的链接，例如编辑配置文件，登录，注销等。我可以轻松地用HTML标记语言将导航栏添加到<code>index.html</code>模板上，但随着应用程序的增长，我将需要在其他页面重复同样的工作。尽量不要编写重复的代码，这是一个良好的编程习惯，毕竟我真的不想在诸多HTML模板上保留同样的代码。</p><p>Jinja2有一个模板继承特性，专门解决这个问题。从本质上来讲，就是将所有模板中相同的部分转移到一个基础模板中，然后再从它继承过来。</p><p>所以我现在要做的是定义一个名为<code>base.html</code>的基本模板，其中包含一个简单的导航栏，以及我之前实现的标题逻辑。 您需要在模板文件<em>app/templates/base.html</em>中编写代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      &#123;% if title %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123; title &#125;&#125; - Microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to Microblog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>Microblog: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个模板中，我使用<code>block</code>控制语句来定义派生模板可以插入代码的位置。 <em>block</em>被赋予一个唯一的名称，派生的模板可以在提供其内容时进行引用。</p><p>通过从基础模板<em>base.html</em>继承HTML元素，我现在可以简化模板<em>index.html</em>了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends "base.html" %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi, &#123;&#123; user.username &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% for post in posts %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.author.username &#125;&#125; says: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>自从基础模板<em>base.html</em>接手页面的布局之后，我就可以从<em>index.html</em>中删除所有这方面的元素，只留下内容部分。 <code>extends</code>语句用来建立了两个模板之间的继承关系，这样Jinja2才知道当要求呈现<code>index.html</code>时，需要将其嵌入到<code>base.html</code>中。 而两个模板中匹配的<code>block</code>语句和其名称<code>content</code>，让Jinja2知道如何将这两个模板合并成在一起。 现在，扩展应用程序的页面就变得极其方便了，我可以创建从同一个基础模板<em>base.html</em>继承的派生模板，这就是我让应用程序的所有页面拥有统一外观布局而不用重复编写代码的秘诀。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flask基础</title>
      <link href="/2019/12/06/flask%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/12/06/flask%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="flask框架"><a href="#flask框架" class="headerlink" title="flask框架"></a>flask框架</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="开启DEBUG"><a href="#开启DEBUG" class="headerlink" title="开启DEBUG"></a>开启DEBUG</h3><p>开启debug模式一共有四种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式：使用app.debug=True开启DEBUG模式</span></span><br><span class="line">app.debug=<span class="literal">True</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># 第二种方式：加载配置文件开启DEBUG模式</span></span><br><span class="line"><span class="comment"># config文件为项目根目录下的`config.py`文件</span></span><br><span class="line"><span class="comment"># config中的配置为 `DEBUG=True`</span></span><br><span class="line">app.config.from_object(config)</span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># 第三种方式：通过配置参数的形式开启DEBUG模式</span></span><br><span class="line"><span class="comment"># 注意DEBUG为大写</span></span><br><span class="line">app.config.update(DEBUG=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># 第四种方式：传递一个参数debug=True来开启DEBUG模式</span></span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用from_object加载项目根目录下的`config.py`文件</span></span><br><span class="line">app.config.from_object(config)</span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># 使用from_pyfile加载项目根目录下的`config.py`文件</span></span><br><span class="line">app.config.from_pyfile(<span class="string">"config.py"</span>)</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><h3 id="两种传参方式"><a href="#两种传参方式" class="headerlink" title="两种传参方式"></a>两种传参方式</h3><p>接受用户传递的字符串</p><ul><li><p>第一种：使用path形式（将字符串嵌入到路径中）</p><ul><li><p>@app.route(‘/article/&lt;int: article&gt;’) 必须传递整型</p></li><li><p>@app.route(‘/article/&lt;float: article&gt;’) 必须传递浮点数</p></li><li><p>@app.route(‘/article/&lt;path: article&gt;’) 可以接收路径包含’/‘</p></li><li><p>默认为string 可以接受任何没有‘/‘的 类型</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/article/&lt;int:article&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">artical_detail</span><span class="params">(article)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"请求的是&#123;&#125;"</span>.format(article)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/&lt;any(blog,user):url_path&gt;/&lt;id&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(url_path,id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url_path == <span class="string">'blog'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'博客：&#123;&#125;'</span>.format(id)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'用户：&#123;&#125;'</span>.format(id)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第二种： 通过’?key=value‘的形式传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/d/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">()</span>:</span></span><br><span class="line">    wd = request.args.get(<span class="string">'wd'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'通过wd获取的字符是&#123;&#125;'</span>.format(wd)</span><br></pre></td></tr></table></figure></li></ul><h3 id="URL-FOR"><a href="#URL-FOR" class="headerlink" title="URL_FOR"></a>URL_FOR</h3><p>本质是根据函数名反向生成url，使用函数 url_for() 来针对一个特定的函数构建一个 URL。它能够接受函数名作为第一参数，以及一些关键字参数， 每一个关键字参数对应于 URL 规则的变量部分。未知变量部分被插入到 URL 中作为查询参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 视图函数</span></span><br><span class="line">    <span class="keyword">return</span> url_for(<span class="string">'my_list'</span>, page=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/liat/&lt;page&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_list</span><span class="params">(page)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'my list page: &#123;&#125;'</span>.format(page)</span><br></pre></td></tr></table></figure><h3 id="URL转换器"><a href="#URL转换器" class="headerlink" title="URL转换器"></a>URL转换器</h3><p>   我们知道，flask的url规则是可以添加变量部分的，这个参数变量是写在尖括号里的，比如：<code>/item/&lt;id&gt;/</code>，如果需要指出参数的类型要符合<code>&lt;converter:vaiable_name&gt;</code>格式的，其中，converter有几种类型：</p><ul><li>string：接受不含有‘/’的文本</li><li>int：接受整数</li><li>float：接受浮点型</li><li>path：接受含有‘/’的文本串</li><li>uuid：只接受uuid串</li></ul><p>而当没有符合的转换器时，就需要自己定义一个转换器供我们使用，完成它只需要三步：</p><ol><li><p>自定义转换器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建TelephoneConverter转换器 继承 BaseConverter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TelephoneConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    regex = <span class="string">r'1[3456789]\d&#123;9&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ListConverter转换器 继承 BaseConverter类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="comment"># 这个方法的返回值将会传递到视图函数中做返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 返回一个按+号分割的列表</span></span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">'+'</span>)</span><br><span class="line">    <span class="comment"># 这个方法的返回值，将会在调用url_for函数时生成符合要求的URL形式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"+"</span>.join(value)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>将自定义的转换器添加到flask的应用中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新的转换器到`DEFAULT_CONVERTERS`中</span></span><br><span class="line">app.url_map.converters[<span class="string">'tel'</span>] = TelephoneConverter</span><br><span class="line">app.url_map.converters[<span class="string">'list'</span>] = ListConverter</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>使用转换器</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> url_for(<span class="string">'my_list'</span>, ab=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义传参类型不能有空格</span></span><br><span class="line"><span class="meta">@app.route('/telephone/&lt;tel:my_tel&gt;/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_tel</span><span class="params">(my_tel)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'my telephone number is : &#123;&#125;'</span>.format(my_tel)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/list/&lt;list:ab&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_list</span><span class="params">(ab)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'my list is: &#123;&#125;'</span>.format(ab)</span><br></pre></td></tr></table></figure></li></ol><h3 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h3><p>页面跳转和重定向</p><ul><li>永久性重定向：状态码为301，多用于一个网址废弃需要定向到新的网址</li><li>暂时性重定向：状态码为302，表示页面的暂时跳转，比如访问一个需要登陆权限的页面，而用户没有登陆，就跳转到登陆页面</li></ul><p>在<code>flask</code>中，重定向通过<code>flask.redirect(loaction, code=302)</code>这个函数实现的，<code>localtion</code>表示需要定向到的URL，<br>应该配合前面的url_for一起使用，<code>code</code>表示采用那种定向方式，默认302，可以求改为301实现永久定向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/login/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/profile/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Personal Center'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>), code=<span class="number">301</span>)</span><br></pre></td></tr></table></figure><h3 id="Respones返回值"><a href="#Respones返回值" class="headerlink" title="Respones返回值"></a>Respones返回值</h3><p>关于响应（Respones）:<br>视图函数的返回值会被自动转换为一个响应对象。<code>Flask</code>的转换逻辑如下：</p><ul><li>如果返回的是一个合法的响应对象，则直接返回</li><li>如果返回的是一个字符串，那么<code>Flask</code>会重新创建一个<code>werkzeug.wrappers.Respones</code>对象，<code>Respones</code>将该字符串作为主体，状态码为200，<code>MIME</code>类型为<code>text/html</code>，然后返回该<code>Respones</code>对象。</li><li>如果返回的是一个字典，那么页面返回<code>Content-Type</code>类型为<code>application/json</code>的json文件</li><li>如果返回的是一个元组，元组中的数据类型是<code>（Respones, status, headers）</code>,<code>status</code>值会覆盖默认的200状态码，<code>headers</code>可以是一个列表或者字典作为消息头。</li><li>如果以上条件都不满足，<code>Flask</code>会假设返回值是一个合法的<code>WSGI</code>应用程序，并通过<code>Respones.force_type(rv, request, environ)</code>转换为一个请求</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    hello = Response(response=<span class="string">'hello world'</span>, status=<span class="number">200</span>, mimetype=<span class="string">'text/html'</span>)</span><br><span class="line">    <span class="keyword">return</span> hello</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">u'login'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flask版本在1.1.1之前必须使用jsonify返回字典型数据</span></span><br><span class="line"><span class="meta">@app.route("/index1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">"name"</span>: <span class="string">"annie"</span>, <span class="string">"age"</span>: <span class="number">12</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在1.1.1之后可以直接返回字典型数据，版本向下兼容，也可以使用jsonify</span></span><br><span class="line"><span class="meta">@app.route("/index2")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"name"</span>: <span class="string">"annie"</span>, <span class="string">"age"</span>: <span class="number">12</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/list/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(&#123;<span class="string">'username'</span>:<span class="string">'test'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="add-url-rule方法"><a href="#add-url-rule方法" class="headerlink" title="add_url_rule方法"></a>add_url_rule方法</h3><p>使用<code>add_url_rule(rule, endpoint=None, view_func=None)</code>方法来添加<code>url</code>和视图函数的映射，如果没有填写<code>endpoint</code>参数，那么会默认使用<code>view_func</code>的名字作为<code>endpoint</code>，日后使用<code>url_for</code>的时候需要使用<code>endpoint</code>指定的参数，如果没有指定<code>endpoint</code>那么默认使用<code>view_func</code>的参数</p><p><strong><code>@app.route()</code>装饰器的底层也是使用<code>add_url_rule</code>方法实现url和视图函数映射</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'classes/index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'list test'</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/list/'</span>, endpoint=<span class="string">'list'</span>, view_func=list)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>list跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('list')&#125;&#125;"</span>&gt;</span>list<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h3><ul><li>标准类视图<ul><li>标准类视图，必须继承自<code>flask.views.View</code></li><li>必须实现<code>dipatch_request</code>方法，以后请求过来后，都会执行这个方法。这个方法的返回值就相当于是之前的函数视图一样，也必须返回<code>Response</code>或者子类的对象，或者是字符串，或者是元组</li><li>必须通过<code>app.add_url_rule(rule, endpoint, view_func)</code>来做url与视图的映射<code>view_func</code>这个参数，需要使用类视图下的<code>as_view</code>类方法转换<code>ListView.as_view(&#39;list&#39;)</code>.</li><li>如果指定了<code>endpoint</code>，那么再使用<code>url_for</code>反转的时候就必须使用<code>endpoint</code>指定的那个值。如果没有指定<code>endpoint</code>，那么就可以使用<code>as_view(视图名字)</code>中指定的名字来作为反转</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask , views</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListView</span><span class="params">(views.View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'list test!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加映射</span></span><br><span class="line">app.add_url_rule(<span class="string">'/list/'</span>, endpoint=<span class="string">'list'</span>, view_func=ListView.as_view(<span class="string">'list'</span>))</span><br></pre></td></tr></table></figure><ul><li>基于请求方法的类视图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, views</span><br><span class="line"><span class="keyword">from</span> flask.templating <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.route('/', methods=['GET','POST'])</span></span><br><span class="line"><span class="comment"># def login():</span></span><br><span class="line"><span class="comment">#     if request.method == 'GET':</span></span><br><span class="line"><span class="comment">#         return render_template('classes/login.html')</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         username = request.form.get('username')</span></span><br><span class="line"><span class="comment">#         password = request.form.get('password')</span></span><br><span class="line"><span class="comment">#         print(username, password)</span></span><br><span class="line"><span class="comment">#         if username == 'admin' and password == 'admin':</span></span><br><span class="line"><span class="comment">#             return 'success'</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             return 'fail'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, error = None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'classes/login.jinja'</span>, error=error)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        username = request.form.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.form.get(<span class="string">'password'</span>)</span><br><span class="line">        print(username, password)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'admin'</span> <span class="keyword">and</span> password == <span class="string">'admin'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'success'</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> self.get(<span class="string">'username or password error!'</span>)</span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/login/'</span>, endpoint=<span class="string">'login'</span>, view_func=LoginView.as_view(<span class="string">'login'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"90px"</span>&gt;</span>用户名: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">'90px'</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% if error %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">'color : red'</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="类视图中的装饰器"><a href="#类视图中的装饰器" class="headerlink" title="类视图中的装饰器"></a>类视图中的装饰器</h3><ul><li>如果使用的是函数视图，那么自己定义的装饰器必须放在<code>app.route</code>下，否则这个装饰器起不到任何作用</li><li>类视图的装饰器，需要重写类视图的一个属性<code>decorators</code>，这个类属性是一个列表或者元组，里面装的就是所有的装饰器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, views</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_test</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">and</span> username == <span class="string">'admin'</span>:</span><br><span class="line">            <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'请登录'</span></span><br><span class="line">    <span class="keyword">return</span> login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数使用装饰器</span></span><br><span class="line"><span class="meta">@app.route('/setting/')</span></span><br><span class="line"><span class="meta">@login_test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setting</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'设置中心'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_centor</span><span class="params">(views.View)</span>:</span></span><br><span class="line">    decorators = [login_test]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'个人中心'</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/centor/'</span>, view_func=user_centor.as_view(<span class="string">'centor'</span>))</span><br></pre></td></tr></table></figure><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><ul><li><p>蓝图的作用就是让flask项目更加模块化，结构更加清晰</p></li><li><p>基本语法：</p><ul><li><p>在蓝图文件中导入<code>Blueprint</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路径blueprint/user.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用user_prefix指定参数来定义user_bp下所有url路径的前缀</span></span><br><span class="line">user_bp = Blueprint(<span class="string">'user'</span>, __name__, url_prefix=<span class="string">'/user'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route('/setting/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setting</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'user setting'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>在主app中注册蓝图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Blueprint, url_for</span><br><span class="line"><span class="keyword">from</span> flask_learn.buleprint_file.user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> flask.templating <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(user_bp)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>蓝图模板文件的查找</p><ul><li><p>如果项目中的templates文件夹有相应的模板文件，就直接使用了</p></li><li><p>如果项目中的templates文件夹没有相应的模板文件，那就到定义蓝图的时候指定的路径寻找。并且蓝图指定的路径可以为相对路径，相对的是当前这个蓝图文件所在的目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">'user'</span>, __name__, static_folder=<span class="string">'static'</span>,template_folder=<span class="string">'templates'</span> ,url_prefix=<span class="string">'/user'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>蓝图中静态文件的查找规则</p><ul><li><p>在模板中，加载静态文件，如果使用url_for(‘static’)，那么就会只在app指定的文件夹目录下查找静态文件。</p></li><li><p>如果只加载静态文件的时候指定蓝图的名字，如<code>user.static</code>，那么就会到这个蓝图指定的<code>static_folder</code>下查找静态文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>setting<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('user.static', filename='index.css')&#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">" &#123;&#123; url_for('hello') &#125;&#125; "</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="flask-WTF"><a href="#flask-WTF" class="headerlink" title="flask-WTF"></a>flask-WTF</h2><ul><li><p>常用的WTForms字段 - 引用自《flask web开发实战》</p><p><img src="https://s2.ax1x.com/2020/01/12/lT0qiV.png" alt></p></li><li><p>常用的WTForms验证器 - 引用自《flask web开发实战》</p><p><img src="https://s2.ax1x.com/2020/01/12/lTDMnJ.png" alt></p><p><img src="https://s2.ax1x.com/2020/01/12/lTDm1U.png" alt></p></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cypress基础</title>
      <link href="/2019/11/13/cypress%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/11/13/cypress%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Cypress-简介-–-摘录自Cypress文档"><a href="#Cypress-简介-–-摘录自Cypress文档" class="headerlink" title="Cypress 简介               – 摘录自Cypress文档"></a>Cypress 简介               – 摘录自Cypress文档</h2><p>*<em>Cypress是为现代网络打造的下一代前端测试工具。解决了开发人员和QA工程师在测试现代应用程序时面临的关键难点问题。 *</em></p><p>Cypress允许你编写所有类型的测试：</p><ul><li>端到端测试</li><li>集成测试</li><li>单元测试</li></ul><p>Cypress可以测试任何在浏览器中运行的内容。</p><h2 id="展示Demo"><a href="#展示Demo" class="headerlink" title="展示Demo"></a>展示Demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Post Resource'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'Creating a New Post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cy.visit(<span class="string">'/posts/new'</span>)     <span class="comment">// 查找/posts/new地址</span></span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'input.post-title'</span>) <span class="comment">// 找到类为'input.post-title'的输入框</span></span><br><span class="line">      .type(<span class="string">'My First Post'</span>)   <span class="comment">// 为这个元素输入参数'My First Post'</span></span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'input.post-body'</span>)  <span class="comment">// 找到类为'input.post-body'的元输入框</span></span><br><span class="line">      .type(<span class="string">'Hello, world!'</span>)   <span class="comment">// 为这个元素输入参数'Hello, world!'</span></span><br><span class="line"></span><br><span class="line">    cy.contains(<span class="string">'Submit'</span>)      <span class="comment">// 找到含有'Submit'的文本</span></span><br><span class="line">      .click()                 <span class="comment">// 点击这个文本</span></span><br><span class="line"></span><br><span class="line">    cy.url()                   <span class="comment">// 获取url地址，断言地址中是否含有'/posts/my-first-post'字段</span></span><br><span class="line">      .should(<span class="string">'include'</span>, <span class="string">'/posts/my-first-post'</span>) </span><br><span class="line"></span><br><span class="line">    cy.get(<span class="string">'h1'</span>)               <span class="comment">// 找到H1标签，断言内容中是否包含有'My First Post'字段</span></span><br><span class="line">      .should(<span class="string">'contain'</span>, <span class="string">'My First Post'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><ul><li><p><strong>Cypress捆绑了jQuery并公开许多Dom遍历方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个方法都等同于它的jQuery对应方法。用你所知道的！</span></span><br><span class="line">cy.get(<span class="string">'#main-content'</span>)</span><br><span class="line">  .find(<span class="string">'.article'</span>)</span><br><span class="line">  .children(<span class="string">'img[src^="/static"]'</span>)</span><br><span class="line">  .first()</span><br></pre></td></tr></table></figure><p> <strong>当Cypress无法从其选择器中找到任何匹配的DOM元素时，Cypress将启用重复机制</strong></p><ul><li><p><strong>元素被找到</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  <span class="comment">// cy.get() 查找'#element'元素,重复查询,直到...</span></span><br><span class="line">  .get(<span class="string">'#element'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...它找到元素!</span></span><br><span class="line">  <span class="comment">// 您现在也可以通过使用.then方式使用它</span></span><br><span class="line">  .then(<span class="function">(<span class="params">$myElement</span>) =&gt;</span> &#123;</span><br><span class="line">    doSomething($myElement)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>超时</strong></p><p>默认情况下，每个重试的命令最多持续4秒 - 通过 <a href="https://docs.cypress.io/guides/references/configuration.html#Timeouts" target="_blank" rel="noopener"><code>defaultCommandTimeout</code></a> 来配置。 你可以通过 <em>所有的</em> 方式来修改这个配置选项，例如配置文件，命令行参数，环境变量或者通过代码来修改。</p><p>例如，要通过命令行将默认命令超时设置为10秒：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cypress run --config defaultCommandTimeout=10000</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  <span class="comment">// cy.get() 查找'#my-nonexistent-selector'元素,重复查询直到...</span></span><br><span class="line">  <span class="comment">// ...达到超时它还没有找到元素.</span></span><br><span class="line">  <span class="comment">// Cypress 停止并且标记测试失败.</span></span><br><span class="line">  .get(<span class="string">'#element-does-not-exist'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...这段代码不会运行...</span></span><br><span class="line">  .then(<span class="function">(<span class="params">$myElement</span>) =&gt;</span> &#123;</span><br><span class="line">    doSomething($myElement)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>通过文本内容查询</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在文档里查找文本为'New Post'的元素</span></span><br><span class="line">cy.contains(<span class="string">'New Post'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找'.main'的元素且文本内容为'New Post'</span></span><br><span class="line">cy.get(<span class="string">'.main'</span>).contains(<span class="string">'New Post'</span>)</span><br></pre></td></tr></table></figure><p><strong>我们也可以通过设置超时时间来确保在规定时间内找到查找数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给这个元素10秒的超时时间</span></span><br><span class="line">cy.get(<span class="string">'.my-slow-selector'</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>defaultCommandTimeout</code></td><td align="left"><code>4000</code></td><td align="left">等待时间(以毫秒为单位)，直到大多数基于DOM的命令被认为超时</td></tr><tr><td align="left"><code>execTimeout</code></td><td align="left"><code>60000</code></td><td align="left"><a href="https://docs.cypress.io/api/commands/exec.html" target="_blank" rel="noopener"><code>cy.exec()</code></a>命令期间等待系统命令执行结束的时间(以毫秒为单位)</td></tr><tr><td align="left"><code>taskTimeout</code></td><td align="left"><code>60000</code></td><td align="left"><a href="https://docs.cypress.io/api/commands/task.html" target="_blank" rel="noopener"><code>cy.task()</code></a>命令期间等待任务执行结束的时间(以毫秒为单位)</td></tr><tr><td align="left"><code>pageLoadTimeout</code></td><td align="left"><code>60000</code></td><td align="left">等待<code>页面转换事件</code>或<a href="https://docs.cypress.io/api/commands/visit.html" target="_blank" rel="noopener"><code>cy.visit()</code></a>、<a href="https://docs.cypress.io/api/commands/go.html" target="_blank" rel="noopener"><code>cy.go()</code></a>、<a href="https://docs.cypress.io/api/commands/reload.html" target="_blank" rel="noopener"><code>cy.reload()</code></a>命令来触发它们的页面<code>加载</code>事件的时间(以毫秒为单位)。网络请求受底层操作系统的限制，即使这个值增加，仍然可能超时。</td></tr><tr><td align="left"><code>requestTimeout</code></td><td align="left"><code>5000</code></td><td align="left">等待<a href="https://docs.cypress.io/api/commands/wait.html" target="_blank" rel="noopener"><code>cy.wait()</code></a>命令发出XHR请求的时间(以毫秒为单位)</td></tr><tr><td align="left"><code>responseTimeout</code></td><td align="left"><code>30000</code></td><td align="left">等待响应的时间(以毫秒为单位)，直到<a href="https://docs.cypress.io/api/commands/request.html" target="_blank" rel="noopener"><code>cy.request()</code></a>、<a href="https://docs.cypress.io/api/commands/wait.html" target="_blank" rel="noopener"><code>cy.wait()</code></a>、<a href="https://docs.cypress.io/api/commands/fixture.html" target="_blank" rel="noopener"><code>cy.fixture()</code></a>、<a href="https://docs.cypress.io/api/commands/getcookie.html" target="_blank" rel="noopener"><code>cy.getCookie()</code></a>、<a href="https://docs.cypress.io/api/commands/getcookies.html" target="_blank" rel="noopener"><code>cy.getCookies()</code></a>、<a href="https://docs.cypress.io/api/commands/setcookie.html" target="_blank" rel="noopener"><code>cy.setCookie()</code></a>、<a href="https://docs.cypress.io/api/commands/clearcookie.html" target="_blank" rel="noopener"><code>cy.clearCookie()</code></a>、<a href="https://docs.cypress.io/api/commands/clearcookies.html" target="_blank" rel="noopener"><code>cy.clearCookies()</code></a>和<a href="https://docs.cypress.io/api/commands/screenshot.html" target="_blank" rel="noopener"><code>cy.screenshot()</code></a>中的一个返回响应。</td></tr></tbody></table><h2 id="命令链接机制"><a href="#命令链接机制" class="headerlink" title="命令链接机制"></a>命令链接机制</h2><p><strong>了解Cypress用于将命令链接在一起的机制非常重要。它代表您管理Promise链，每个命令都会产生下一个命令的”主题”，直到链结束或遇到错误</strong></p><h3 id="元素交互"><a href="#元素交互" class="headerlink" title="元素交互"></a>元素交互</h3><p> Cypress通过<a href="https://docs.cypress.io/api/commands/click.html" target="_blank" rel="noopener"><code>.click()</code></a>和<a href="https://docs.cypress.io/api/commands/type.html" target="_blank" rel="noopener"><code>.type()</code></a>命令配合使用<a href="https://docs.cypress.io/api/commands/get.html" target="_blank" rel="noopener"><code>cy.get()</code></a>或 <a href="https://docs.cypress.io/api/commands/contains.html" target="_blank" rel="noopener"><code>cy.contains()</code></a>命令，可以轻松对页面上的元素进行点击并输入。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'textarea.post-body'</span>)</span><br><span class="line">  .type(<span class="string">'This is an excellent post.'</span>)</span><br></pre></td></tr></table></figure><p>以下是Cypress提供的与您的应用进行交互的更多动作命令：</p><ul><li><a href="https://docs.cypress.io/api/commands/blur.html" target="_blank" rel="noopener"><code>.blur()</code></a> - 使焦点DOM元素模糊.</li><li><a href="https://docs.cypress.io/api/commands/focus.html" target="_blank" rel="noopener"><code>.focus()</code></a> - 聚焦DOM元素.</li><li><a href="https://docs.cypress.io/api/commands/clear.html" target="_blank" rel="noopener"><code>.clear()</code></a> - 清除输入或文本区域的值.</li><li><a href="https://docs.cypress.io/api/commands/check.html" target="_blank" rel="noopener"><code>.check()</code></a> - 选中复选框或者单选框.</li><li><a href="https://docs.cypress.io/api/commands/uncheck.html" target="_blank" rel="noopener"><code>.uncheck()</code></a> - 取消选中复选框.</li><li><a href="https://docs.cypress.io/api/commands/select.html" target="_blank" rel="noopener"><code>.select()</code></a> - 选择一个含有 <code>属性的</code>元素.</li><li><a href="https://docs.cypress.io/api/commands/dblclick.html" target="_blank" rel="noopener"><code>.dblclick()</code></a> - 双击DOM元素.</li></ul><h3 id="元素相关的断言"><a href="#元素相关的断言" class="headerlink" title="元素相关的断言"></a>元素相关的断言</h3><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">':checkbox'</span>).should(<span class="string">'be.disabled'</span>)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">'form'</span>).should(<span class="string">'have.class'</span>, <span class="string">'form-horizontal'</span>)</span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">'input'</span>).should(<span class="string">'not.have.value'</span>, <span class="string">'US'</span>)</span><br></pre></td></tr></table></figure><h3 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h3><p> **<a href="https://docs.cypress.io/api/commands/then.html" target="_blank" rel="noopener"><code>cy.then()</code></a> **</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  <span class="comment">// 找到一个id为 'some-link'元素</span></span><br><span class="line">  .get(<span class="string">'#some-link'</span>)</span><br><span class="line"></span><br><span class="line">  .then(<span class="function">(<span class="params">$myElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...模拟任意主题的一段代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取它的 href 属性</span></span><br><span class="line">    <span class="keyword">const</span> href = $myElement.prop(<span class="string">'href'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换'hash'字符和它之后的一切</span></span><br><span class="line">    <span class="keyword">return</span> href.replace(<span class="regexp">/(#.*)/</span>, <span class="string">''</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">href</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// href 是现在的新主题</span></span><br><span class="line">    <span class="comment">// 现在我们可以干我们想干的</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>使用别名来引用以前的主题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  .get(<span class="string">'.my-selector'</span>)</span><br><span class="line">  .as(<span class="string">'myElement'</span>) <span class="comment">// 设置别名</span></span><br><span class="line">  .click()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更多操作 */</span></span><br><span class="line"></span><br><span class="line">cy</span><br><span class="line">  .get(<span class="string">'@myElement'</span>) <span class="comment">// 像以前那样重新查询DOM(仅在必要时)</span></span><br><span class="line">  .click()</span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="用英语进行断言"><a href="#用英语进行断言" class="headerlink" title="用英语进行断言"></a>用英语进行断言</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果我们点击一个 &lt;botton&gt; 后，我们期望它的类属性最终为 active</span></span><br><span class="line">cy.get(<span class="string">'button'</span>).click().should(<span class="string">'have.class'</span>, <span class="string">'active'</span>)</span><br><span class="line"><span class="comment">// 向我的服务器发送一个 HTTP 请求后，我期望的返回内容等于 &#123;name: 'Jane'&#125;</span></span><br><span class="line">cy.request(<span class="string">'/users/1'</span>).its(<span class="string">'body'</span>).should(<span class="string">'deep.eq'</span>, &#123; <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="默认断言"><a href="#默认断言" class="headerlink" title="默认断言"></a>默认断言</h3><ul><li><a href="https://docs.cypress.io/api/commands/visit.html" target="_blank" rel="noopener"><code>cy.visit()</code></a> 预期这个页面是状态为<code>200</code>的 <code>text/html</code>内容页。</li><li><a href="https://docs.cypress.io/api/commands/request.html" target="_blank" rel="noopener"><code>cy.request()</code></a> 预期远程服务器存在并提供响应。</li><li><a href="https://docs.cypress.io/api/commands/contains.html" target="_blank" rel="noopener"><code>cy.contains()</code></a> 预期包含内容的元素最终存在于DOM中。</li><li><a href="https://docs.cypress.io/api/commands/get.html" target="_blank" rel="noopener"><code>cy.get()</code></a> 预期元素最终存在于DOM中。</li><li><a href="https://docs.cypress.io/api/commands/find.html" target="_blank" rel="noopener"><code>.find()</code></a> 预期元素最终存在于DOM 中。</li><li><a href="https://docs.cypress.io/api/commands/type.html" target="_blank" rel="noopener"><code>.type()</code></a> 预期元素最终为 <em>可输入</em> 状态。</li><li><a href="https://docs.cypress.io/api/commands/click.html" target="_blank" rel="noopener"><code>.click()</code></a> 预期元素最终为 <em>可操作</em> 状态。</li><li><a href="https://docs.cypress.io/api/commands/its.html" target="_blank" rel="noopener"><code>.its()</code></a> 预期最终找到当前主题的一个属性。</li></ul><p><strong>使Cypress推翻其元素等待存在的规则</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认元素一直存在存在</span></span><br><span class="line">cy.get(<span class="string">'button.close'</span>).click().should(<span class="string">'exist'</span>)</span><br><span class="line"><span class="comment">// -----------------------------------------------</span></span><br><span class="line"><span class="comment">// Cypress将一直等待直到</span></span><br><span class="line"><span class="comment">// 点击&lt;button&gt; 按钮后，它不再存在</span></span><br><span class="line">cy.get(<span class="string">'button.close'</span>).click().should(<span class="string">'not.exist'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确认这个 #modal 元素不在DOM里存在</span></span><br><span class="line"><span class="comment">// 自动等待,直到它消失!</span></span><br><span class="line">cy.get(<span class="string">'#modal'</span>).should(<span class="string">'not.exist'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度断言</span></span><br><span class="line">cy.get(<span class="string">'li.selected'</span>).should(<span class="string">'have.length'</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类断言</span></span><br><span class="line">cy.get(<span class="string">'form'</span>).find(<span class="string">'input'</span>).should(<span class="string">'not.have.class'</span>, <span class="string">'disabled'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值断言</span></span><br><span class="line">cy.get(<span class="string">'textarea'</span>).should(<span class="string">'have.value'</span>, <span class="string">'foo bar baz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本断言</span></span><br><span class="line">cy.get(<span class="string">'a'</span>).parent(<span class="string">'span.help'</span>).should(<span class="string">'not.contain'</span>, <span class="string">'click me'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见性断言</span></span><br><span class="line">cy.get(<span class="string">'button'</span>).should(<span class="string">'be.visible'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在性断言</span></span><br><span class="line">cy.get(<span class="string">'#loading'</span>).should(<span class="string">'not.exist'</span>)</span><br><span class="line"><span class="comment">// 状态断言</span></span><br><span class="line">cy.get(<span class="string">':radio'</span>).should(<span class="string">'be.checked'</span>)</span><br></pre></td></tr></table></figure><h3 id="编写断言"><a href="#编写断言" class="headerlink" title="编写断言"></a>编写断言</h3><p>在 Cypress 中有两种断言写法:</p><ul><li><p><strong>隐式主题:</strong> </p><p>使用 <a href="https://docs.cypress.io/api/commands/should.html" target="_blank" rel="noopener"><code>.should()</code></a> 或者 <a href="https://docs.cypress.io/api/commands/and.html" target="_blank" rel="noopener"><code>.and()</code></a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'#header a'</span>)</span><br><span class="line">  .should(<span class="string">'have.class'</span>, <span class="string">'active'</span>)</span><br><span class="line">  .and(<span class="string">'have.attr'</span>, <span class="string">'href'</span>, <span class="string">'/users'</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>显示主题:</strong> </p><p>使用 <code>expect</code>. 通常我们使用显示的目的是</p><ul><li>对同一主题进行多次断言</li><li>在做出断言之前,以某种方式预估主题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'tbody tr:first'</span>).should(<span class="function">(<span class="params">$tr</span>) =&gt;</span> &#123;</span><br><span class="line">  expect($tr).to.have.class(<span class="string">'active'</span>)</span><br><span class="line">  expect($tr).to.have.attr(<span class="string">'href'</span>, <span class="string">'/users'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><h3 id="应用超时"><a href="#应用超时" class="headerlink" title="应用超时"></a>应用超时</h3><p><strong>默认超时时长为4秒</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 .get()有一个默认断言</span></span><br><span class="line"><span class="comment">// 直到找到元素,或者它超时并标记失败</span></span><br><span class="line"><span class="comment">// 默认断言时间为4秒</span></span><br><span class="line">cy.get(<span class="string">'.mobile-nav'</span>)</span><br></pre></td></tr></table></figure><p><strong>修改超长时长</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们已经修改了默认断言和添加断言的超时时长</span></span><br><span class="line"><span class="comment">// 添加&#123; timeout: 10000 &#125; 所有断言的超时时长都变成10秒</span></span><br><span class="line">cy</span><br><span class="line">  .get(<span class="string">'.mobile-nav'</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;)</span><br><span class="line">  .should(<span class="string">'be.visible'</span>)</span><br><span class="line">  .and(<span class="string">'contain'</span>, <span class="string">'Home'</span>)</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>Cypress 根据命令的类型提供了几种不同的超时值.</p><p>我们根据某些操作预期确定的时长来设置默认超时时间。</p><p>例如:</p><ul><li><a href="https://docs.cypress.io/api/commands/visit.html" target="_blank" rel="noopener"><code>cy.visit()</code></a> 加载远程页面,直到所有外部资源完成其加载阶段才能解析。这可能需要一段时间,所以它的默认时长设置为<code>60000ms</code>.</li><li><a href="https://docs.cypress.io/api/commands/exec.html" target="_blank" rel="noopener"><code>cy.exec()</code></a> 执行一个系统命令，例如 <em>初始化数据库</em>。 我们预计这可能需要很长时间, 它的默认时长设置为<code>60000ms</code>.</li><li><a href="https://docs.cypress.io/api/commands/wait.html" target="_blank" rel="noopener"><code>cy.wait()</code></a> 实际使用2个不同的超时。当等待 <a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases.html#Routes" target="_blank" rel="noopener">路由别名</a>时, 我们等待一个匹配的请求 <code>5000ms</code>, 紧接着等待服务器响应 <code>30000ms</code>. 我们预期你的应用程序能够快速发出匹配的请求,但我们预计服务器的响应可能会需要更长的时间。</li></ul><p>大多数其他命令(包括所有基于 DOM 的命令)默认在 4000ms 之后超时。</p><h2 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h2><h3 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h3><p> 要跳过指定的套件或测试，只需要将 <code>.skip()</code> 附加到该函数即可。所有嵌套套件也将被跳过。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it.skip(<span class="string">'returns "fizz" when number is multiple of 3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  numsExpectedToEq([<span class="number">9</span>, <span class="number">12</span>, <span class="number">18</span>], <span class="string">'fizz'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="仅运行某条测试"><a href="#仅运行某条测试" class="headerlink" title="仅运行某条测试"></a>仅运行某条测试</h3><p> 使用 <a href="https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Excluding-and-Including-Tests" target="_blank" rel="noopener"><code>.only</code></a> 来限制运行哪些测试：当你在一个测试中进行大量测试时，这会特别有用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it.only(<span class="string">'使用only来限制运行'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  .get()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听文件"><a href="#监听文件" class="headerlink" title="监听文件"></a>监听文件</h3><ul><li><p>文件</p><ul><li><a href="https://docs.cypress.io/guides/references/configuration.html" target="_blank" rel="noopener"><code>cypress.json</code></a></li><li><a href="https://docs.cypress.io/guides/guides/environment-variables.html" target="_blank" rel="noopener"><code>cypress.env.json</code></a></li></ul></li><li><p>文件夹</p><ul><li><code>cypress/integration/</code></li><li><code>cypress/support/</code></li><li><code>cypress/plugins/</code></li></ul></li></ul><p>上面的文件夹，文件夹中的文件以及所有子文件夹及其文件（递归）都将被监视。</p><p><strong>剩余文件夹皆为非监听文件夹</strong></p><h2 id="元素交互-1"><a href="#元素交互-1" class="headerlink" title="元素交互"></a>元素交互</h2><p>Cypress的一些命令可以用于和DOM进行交互，例如：</p><ul><li><a href="https://docs.cypress.io/api/commands/click.html" target="_blank" rel="noopener"><code>.click()</code></a>  </li><li><a href="https://docs.cypress.io/api/commands/dblclick.html" target="_blank" rel="noopener"><code>.dblclick()</code></a></li><li><a href="https://docs.cypress.io/api/commands/type.html" target="_blank" rel="noopener"><code>.type()</code></a></li><li><a href="https://docs.cypress.io/api/commands/clear.html" target="_blank" rel="noopener"><code>.clear()</code></a></li><li><a href="https://docs.cypress.io/api/commands/check.html" target="_blank" rel="noopener"><code>.check()</code></a></li><li><a href="https://docs.cypress.io/api/commands/uncheck.html" target="_blank" rel="noopener"><code>.uncheck()</code></a></li><li><a href="https://docs.cypress.io/api/commands/select.html" target="_blank" rel="noopener"><code>.select()</code></a></li><li><a href="https://docs.cypress.io/api/commands/trigger.html" target="_blank" rel="noopener"><code>.trigger()</code></a></li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>在Cypress中，命令将会放到队列中异步执行</p><p><strong>要想访问每个Cypress命令返回的内容，需要使用 <code>.then()</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'button'</span>).then(<span class="function">(<span class="params">$btn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// $btn is the object that the previous</span></span><br><span class="line">  <span class="comment">// command yielded us</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'button'</span>).then(<span class="function">(<span class="params">$btn</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存按钮的文本</span></span><br><span class="line">  <span class="keyword">const</span> txt = $btn.text()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交表单</span></span><br><span class="line">  cy.get(<span class="string">'form'</span>).submit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较两个按钮的文字</span></span><br><span class="line">  <span class="comment">// 并确保它们不一样</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).should(<span class="function">(<span class="params">$btn2</span>) =&gt;</span> &#123;</span><br><span class="line">    expect($btn2.text()).not.to.eq(txt)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些命令在所有命令之后运行</span></span><br><span class="line"><span class="comment">// 其它之前的命令已经完成</span></span><br><span class="line">cy.get(...).find(...).should(...)</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>cypress中，使用别名来共享上下文。</p><p>要为你想要共享的内容添加别名，请使用 <a href="https://docs.cypress.io/api/commands/as.html" target="_blank" rel="noopener"><code>.as()</code></a> 命令。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对 $btn.text() 取个别名叫 'text'</span></span><br><span class="line">  cy.get(<span class="string">'button'</span>).invoke(<span class="string">'text'</span>).as(<span class="string">'text'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'has access to text'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.text <span class="comment">// 现在可以直接使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在引擎的支持下，别名基础对象和基元使用Mocha的<a href="https://github.com/mochajs/mocha/wiki/Shared-Behaviours" target="_blank" rel="noopener"><code>context</code></a> 对象: 也就是说，别名可以作为 <code>this.*</code>来使用。</p><p>Mocha会在每个测试的所有适用的挂钩中自动为我们共享上下文。此外，每次测试后都会自动清理这些别名和属性。</p><p><strong>访问 Fixtures:</strong></p><p>共享上下文最常用的例子是处理 <a href="https://docs.cypress.io/api/commands/fixture.html" target="_blank" rel="noopener"><code>cy.fixture()</code></a>时。</p><p>通常，你可以通过 <code>beforeEach</code>来加载fixture，但是想要在测试中使用这些值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对用户的fixtures取个别名</span></span><br><span class="line">  cy.fixture(<span class="string">'users.json'</span>).as(<span class="string">'users'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'utilize users in some way'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 访问users的属性</span></span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">this</span>.users[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保header中包含第一个用户名字</span></span><br><span class="line">  cy.get(<span class="string">'header'</span>).should(<span class="string">'contain'</span>, user.name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>与DOM元素一起使用时，别名具有其它特殊特征。</p><p>在对DOM元素使用别名后，你可以稍后访问它们以供重用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有找到的tr取个别名叫'rows'</span></span><br><span class="line">cy.get(<span class="string">'table'</span>).find(<span class="string">'tr'</span>).as(<span class="string">'rows'</span>)</span><br></pre></td></tr></table></figure><p>在内部，Cypress已经引用了作为别名”rows”返回的 集合。要在以后引用这些相同的”rows”。你可以使用 <a href="https://docs.cypress.io/api/commands/get.html" target="_blank" rel="noopener"><code>cy.get()</code></a> 命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cypress 返回 &lt;tr&gt; 的引用</span></span><br><span class="line"><span class="comment">// 它允许我们继续链接命令</span></span><br><span class="line"><span class="comment">// 来找到第1行</span></span><br><span class="line">cy.get(<span class="string">'@rows'</span>).first().click()</span><br></pre></td></tr></table></figure><p>因为我们在<a href="https://docs.cypress.io/api/commands/get.html" target="_blank" rel="noopener"><code>cy.get()</code></a>中使用了<code>@</code>字符，而不是查询DOM元素， <a href="https://docs.cypress.io/api/commands/get.html" target="_blank" rel="noopener"><code>cy.get()</code></a> 寻找现有的别名为 <code>rows</code>的并返回引用（如果找到它）。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>别名同样可以在<a href="https://docs.cypress.io/api/commands/request.html" target="_blank" rel="noopener">requests</a> 中使用。</p><p>下面是给请求取个别名并在后面访问其属性的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cy.request(<span class="string">'https://jsonplaceholder.cypress.io/comments'</span>).as(<span class="string">'comments'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里有其它的测试代码</span></span><br><span class="line"></span><br><span class="line">cy.get(<span class="string">'@comments'</span>).should(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">      expect(response).to.have.property(<span class="string">'duration'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在这里你可以做任何你想做的判断</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2019/11/03/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/11/03/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="JS的三种引入方式"><a href="#JS的三种引入方式" class="headerlink" title="JS的三种引入方式"></a>JS的三种引入方式</h2><ul><li>直接在时间属性中写js代码</li><li>在script标签中写js代码</li><li>外部引入</li></ul><h3 id="js和java的区别"><a href="#js和java的区别" class="headerlink" title="js和java的区别"></a>js和java的区别</h3><ul><li>编译型语言：强类型的语言，先编译后运行</li><li>解释型语言：弱类型的语言，直接运行</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在js中方法也是对象，实际上js内置了一些数据类型：Math、String、Array、Function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> a - b&#125;</span><br><span class="line"><span class="keyword">var</span> sort = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;<span class="keyword">return</span> a - b&#125;</span><br><span class="line"><span class="keyword">var</span> sort = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>,  <span class="string">"return a - b;"</span>)</span><br></pre></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>全局的函数：属window的函数，因为window代指的是整个浏览器对象，所以整个浏览器中就只有一个window，没有歧义，所以在调动全局函数或者全局变量的时候就可以省略window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.isNaN(obj)</span><br><span class="line"><span class="built_in">window</span>.parseInt(obj)</span><br><span class="line"><span class="built_in">window</span>.parseFloat(obj)</span><br><span class="line"><span class="built_in">window</span>.alert(obj)</span><br></pre></td></tr></table></figure><p>console相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.console.log(obj)</span><br><span class="line"><span class="built_in">window</span>.console.dir(obj)</span><br></pre></td></tr></table></figure><p>document相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.docunment.getElementById(id)</span><br></pre></td></tr></table></figure><p>Math相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random()</span><br><span class="line"><span class="built_in">Math</span>.floor()</span><br><span class="line"><span class="built_in">Math</span>.ceil()</span><br><span class="line"><span class="built_in">Math</span>.round()</span><br></pre></td></tr></table></figure><p>String相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str.toLowerCase()</span><br><span class="line">str.toUpperCase()</span><br><span class="line">str.charAt(index)</span><br><span class="line">str.indexOf(substr)</span><br><span class="line">str.lastIndexOf(substr)</span><br><span class="line">str.subString(start,[end])</span><br><span class="line">str.replace(reg,tostr)</span><br><span class="line">str.split()</span><br></pre></td></tr></table></figure><p>Array相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse()</span><br><span class="line">arr.sort(func)</span><br></pre></td></tr></table></figure><p>Date相关的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getDate() <span class="comment">// 获取月份中的天</span></span><br><span class="line">getDay() <span class="comment">// 获取星期，范围是0-6，0代表周日</span></span><br><span class="line">getFullYear() <span class="comment">// 获取年份</span></span><br><span class="line">getYear() <span class="comment">// 获取1900距今的差值</span></span><br><span class="line">setDate() <span class="comment">// 设置月份中的天</span></span><br><span class="line">setYear() <span class="comment">// 设置年份</span></span><br><span class="line">toString()</span><br><span class="line">toLocalString() <span class="comment">// 获取本地格式的日期字符串</span></span><br><span class="line">toLocalDateString() <span class="comment">// 年 月 日</span></span><br><span class="line">toLacalTimeString() <span class="comment">// 时 分 秒</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3></li><li><p>重复执行定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照指定时间重复的执行对应的函数，返回一个定时器对象</span></span><br><span class="line"><span class="comment">// 该方法每调用一次，就会创建一个新的定时器对象</span></span><br><span class="line"><span class="built_in">window</span>.setInterval(func, mills) </span><br><span class="line"><span class="built_in">window</span>.clearInterval(timer)</span><br></pre></td></tr></table></figure></li><li><p>一次性定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照指定的时间延迟</span></span><br><span class="line"><span class="built_in">window</span>.setTimeout(func,mills)</span><br><span class="line"><span class="built_in">window</span>.clearTimeout(timer)</span><br></pre></td></tr></table></figure></li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>brower object model - 浏览器对象模型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span> <span class="comment">// 整个浏览器的信息都被封装在该对象中</span></span><br><span class="line">- alert()</span><br><span class="line">- confirm(tips) <span class="comment">// 弹出一个提示框，点击确认返回true，点击取消返回false</span></span><br><span class="line">- prompt([标题],[data]) <span class="comment">// 弹出一个提示框，点击确认返回输入的值，点击取消返回null</span></span><br><span class="line">- open(addr) <span class="comment">// 打开指定的网页</span></span><br><span class="line">- close() <span class="comment">// 关闭当前页面</span></span><br><span class="line">    - history <span class="comment">// 封装了历史信息</span></span><br><span class="line">    - navigator <span class="comment">// 封装了导航信息</span></span><br><span class="line">    - <span class="built_in">document</span> <span class="comment">// 封装了所有页面的信息</span></span><br><span class="line">    - location <span class="comment">//封装了地址栏的所有信息</span></span><br><span class="line">        - reload() <span class="comment">// 刷新</span></span><br><span class="line">    - screen <span class="comment">// 封装了屏幕信息</span></span><br><span class="line">    - event <span class="comment">// 事件对象</span></span><br></pre></td></tr></table></figure><p><strong>元素</strong></p><ul><li>元素是节点的一种</li><li>在DOM中，所有的元素节点都隶属于document对象，浏览器加载对应元素的html代码后就生成对应的对象</li><li>每一个元素对象都由很多属性构成的，常用的属性：<ul><li>value： 值</li><li>style：封装的是所有样式信息</li><li>innerHTML：内部的HTML，封装了元素内部（开始标记喝结束标记之间）的所有超文本，包含了对应的标签</li><li>innerText：内部的文本，封装了元素内部的纯文本</li><li>className：封装的class属性的值</li><li>id：封装了id属性的值</li></ul></li></ul><p><strong>查找结点</strong></p><ul><li><p>根据结构查找</p><ul><li>childNodes：该属性封装了元素节点的所有子节点信息，是一个数组</li><li>nextSibing：该属性指代的是该节点的下一个节点</li><li>previousSibing：该属性指代的是该节点的上一个节点</li><li>fristChild：该属性指代的是该节点的第一个子节点</li><li>lastChild：该属性代指的是该节点的最后一个子节点</li><li>parentNode：该属性代指的是该节点的父节点</li></ul></li><li><p>跨结构查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById()</span><br><span class="line">document.getElementsByTagName()</span><br><span class="line">document.getElementsByClassName()</span><br></pre></td></tr></table></figure></li></ul><p><strong>事件 - event</strong></p><ul><li>这是一个全局变量，浏览器可以监听页面的变化，还可以监听元素对象的变化</li><li>每当触发一个事件的时候，产生一个新的event对象，event对象封装了元素信息，鼠标信息，键盘信息</li><li>常用事件：<ul><li>onclick: 当点击对应元素的时候触发JS代码</li><li>onblur: 当失去焦点的时候触发JS代码</li><li>onload: 当加载完毕dom树的时候执行，在html元素上声明</li><li>onchange：页面加载完毕触发js代码</li><li>onmouseover：鼠标移上事件</li><li>onmouseout：鼠标移出事件</li><li>onmousemove：鼠标在元素中移动事件</li></ul></li><li>常用属性：<ul><li>srcElement：获取触发事件的元素节点对象</li><li>terget：获取触发事件的元素节点对象</li><li>clientX：鼠标X坐标</li><li>clientY：鼠标Y坐标</li><li>cancelBubble：取消冒泡</li></ul></li><li>事件句柄 ：  可以在某个事件发生时通过一个事件句柄对某个元素进行某种操作</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos修改时间为北京时间</title>
      <link href="/2019/09/27/centos%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%BA%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4/"/>
      <url>/2019/09/27/centos%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E4%B8%BA%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>查看当前系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date</span><br></pre></td></tr></table></figure></li><li><p>删除本地时间并设置时区为上海</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rm -rf /etc/localtime</span><br><span class="line"><span class="meta">$</span> ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li><li><p>安装ntp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum install ntp</span><br></pre></td></tr></table></figure></li><li><p>启动ntpd服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> service ntpd restart</span><br></pre></td></tr></table></figure></li><li><p>查看当前硬件时间，并使用hwclock -w命令从当前系统时间设置硬件时钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hwclock -w</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker下使用Nginx</title>
      <link href="/2019/09/23/docker%20%E4%B8%8B%E4%BD%BF%E7%94%A8nginx/"/>
      <url>/2019/09/23/docker%20%E4%B8%8B%E4%BD%BF%E7%94%A8nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="docker中搜索可用镜像"><a href="#docker中搜索可用镜像" class="headerlink" title="docker中搜索可用镜像"></a>docker中搜索可用镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker search nginx</span><br></pre></td></tr></table></figure><h2 id="获取Nginx官方镜像"><a href="#获取Nginx官方镜像" class="headerlink" title="获取Nginx官方镜像"></a>获取Nginx官方镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull nginx</span><br></pre></td></tr></table></figure><h2 id="vue项目打包"><a href="#vue项目打包" class="headerlink" title="vue项目打包"></a>vue项目打包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装cnpm</span><br><span class="line"><span class="meta">$</span> npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="meta">#</span> 安装&amp;打包项目</span><br><span class="line"><span class="meta">$</span> cnpm install</span><br><span class="line"><span class="meta">$</span> cnpm run build</span><br></pre></td></tr></table></figure><h2 id="使用Dockerfile构建Nginx环境"><a href="#使用Dockerfile构建Nginx环境" class="headerlink" title="使用Dockerfile构建Nginx环境"></a>使用Dockerfile构建Nginx环境</h2><ul><li><p>在项目根目录（dist所在目录）编写dockerfile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim Dockerfile</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br><span class="line">COPY default.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure></li><li><p>在在项目根目录（dist所在目录）编写配置文件default.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim default.conf</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用docker build构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 命令最后面有个点</span><br><span class="line"><span class="meta">$</span> docker build -t testnginx .</span><br></pre></td></tr></table></figure></li></ul><h2 id="执行test-nginx镜像"><a href="#执行test-nginx镜像" class="headerlink" title="执行test_nginx镜像"></a>执行test_nginx镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -p 3000:80 -d --name test testnginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python魔法函数</title>
      <link href="/2019/09/03/python%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/2019/09/03/python%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>什么是魔法方法呢？它们在面向对象的Python的处处皆是。它们是一些可以让你对类添加“魔法”的特殊方法。 它们经常是两个下划线包围来命名的（比如 <strong>init</strong> ， <strong>lt</strong>）。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li><p>_<em>new_</em>(cls,[…)</p><p>__new__ 是对象实例化时第一个调用的方法，它只取下 cls 参数，并把其他参数传给 _<em>init_</em> </p></li><li><p>_<em>init_</em>(self,[…])</p><p>类的初始化方法。它获取任何传给构造器的参数（比如我们调用 x = SomeClass(10, ‘foo’) ， _<em>init_</em> 就会接到参数 10 和 ‘foo’ 。 __init__在Python的类定义中用的最多。</p></li><li><p>_<em>del_</em>(self)</p><p>_<em>new__ 和 __init__ 是对象的构造器， __del__ 是对象的销毁器。它并非实现了语句 del x (因此该语句不等同于 x.__del_\</em>())。而是定义了当对象被垃圾回收时的行为。 当对象需要在销毁时做一些处理的时候这个方法很有用，比如 socket对象、文件对象。但是需要注意的是，当Python解释器退出但对象仍然存活的时候， __del__ 并不会 执行。 所以养成一个手工清理的好习惯是很重要的，比如及时关闭连接。</p></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>使用Python魔法方法的一个巨大优势就是可以构建一个拥有Python内置类型行为的对象。这意味着你可以避免使用非标准的、丑陋的方式来表达简单的操作。</p><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><p>Python包含了一系列的魔法方法，用于实现对象之间直接比较，而不需要采用方法调用。同样也可以重载Python默认的比较方法，改变它们的行为。下面是这些方法的列表：</p><ul><li><p>__cmp__(self, other)</p><p>__cmp__ 是所有比较魔法方法中最基础的一个，它实际上定义了所有比较操作符的行为（&lt;,==,!=,等等），但是它可能不能按照你需要的方式工作（例如，判断一个实例和另一个实例是否相等采用一套标准，而与判断一个实例是否大于另一实例采用另一套）。 __cmp__ 应该在 self &lt; other 时返回一个负整数，在 self == other时返回0，在 self &gt; other 时返回正整数。最好只定义你所需要的比较形式，而不是一次定义全部。 如果你需要实现所有的比较形式，而且它们的判断标准类似，那么 __cmp__ 是一个很好的方法，可以减少代码重复，让代码更简洁。</p></li><li><p>__eq__(self, other)</p><p>定义等于操作符(==)的行为。</p></li><li><p>__ne__(self, other)</p><p>定义不等操作符(!=)的行为。</p></li><li><p>__lt__(self, other)</p><p>定义小于操作符(&lt;)的行为。</p></li><li><p>__gt__(self, other)</p><p>定义大于操作符(&gt;)的行为。</p></li><li><p>__le__(self, other)</p><p>定义小于等于操作符(&lt;)的行为。</p></li><li><p>__ge__(self, other)</p><p>定义大于等于操作符(&gt;)的行为。</p></li></ul><h3 id="数值操作符"><a href="#数值操作符" class="headerlink" title="数值操作符"></a>数值操作符</h3><ul><li><p>__pos__(self)</p><p>实现取正操作，例如 +some_object。</p></li><li><p>__neg__(self)</p><p>实现取负操作，例如 -some_object。</p></li><li><p>__abs__(self)</p><p>实现内建绝对值函数 abs() 操作。</p></li><li><p>__invert__(self)</p><p>实现取反操作符 ~。</p></li><li><p>__round__(self， n)</p><p>实现内建函数 round() ，n 是近似小数点的位数。</p></li><li><p>__floor__(self)</p><p>实现 math.floor() 函数，即向下取整。</p></li><li><p>__ceil__(self)</p><p>实现 math.ceil() 函数，即向上取整。</p></li><li><p>__trunc__(self)</p><p>实现 math.trunc() 函数，即距离零最近的整数。</p></li></ul><h3 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h3><ul><li><p>__add__(self, other)</p><p>实现加法操作。</p></li><li><p>__sub__(self, other)</p><p>实现减法操作。</p></li><li><p>__mul__(self, other)</p><p>实现乘法操作。</p></li><li><p>__floordiv__(self, other)</p><p>实现使用 // 操作符的整数除法。</p></li><li><p>__div__(self, other)</p><p>实现使用 / 操作符的除法。</p></li><li><p>__truediv__(self, other)</p><p>实现 <em>true</em> 除法，这个函数只有使用 from <strong>future</strong> import division 时才有作用。</p></li><li><p>__mod__(self, other)</p><p>实现 % 取余操作。</p></li><li><p>__divmod__(self, other)</p><p>实现 divmod 内建函数。</p></li><li><p>__pow__</p><p>实现 ** 操作符。</p></li><li><p>__lshift__(self, other)</p><p>实现左移位运算符 &lt;&lt; 。</p></li><li><p>__rshift__(self, other)</p><p>实现右移位运算符 &gt;&gt; 。</p></li><li><p>__and__(self, other)</p><p>实现按位与运算符 &amp; 。</p></li><li><p>__or__(self, other)</p><p>实现按位或运算符 | 。</p></li><li><p>__xor__(self, other)</p><p>实现按位异或运算符 ^ 。</p></li></ul><h3 id="反射算数运算符"><a href="#反射算数运算符" class="headerlink" title="反射算数运算符"></a>反射算数运算符</h3><ul><li><p>__radd__(self, other)</p><p>实现反射加法操作。</p></li><li><p>__rsub__(self, other)</p><p>实现反射减法操作。</p></li><li><p>__rmul__(self, other)</p><p>实现反射乘法操作。</p></li><li><p>__rfloordiv__(self, other)</p><p>实现使用 // 操作符的整数反射除法。</p></li><li><p>__rdiv__(self, other)</p><p>实现使用 / 操作符的反射除法。</p></li><li><p>__rtruediv__(self, other)</p><p>实现 <em>true</em> 反射除法，这个函数只有使用 from _<em>future_</em> import division时才有作用。</p></li><li><p>__rmod__(self, other)</p><p>实现 % 反射取余操作符。</p></li><li><p>__rdivmod__(self, other)</p><p>实现调用 divmod(other, self) 时 divmod 内建函数的操作。</p></li><li><p>__rpow__</p><p>实现 ** 反射操作符。</p></li><li><p>__rlshift__(self, other)</p><p>实现反射左移位运算符 &lt;&lt; 的作用。</p></li><li><p>__rshift__(self, other)</p><p>实现反射右移位运算符 &gt;&gt; 的作用。</p></li><li><p>__rand__(self, other)</p><p>实现反射按位与运算符 &amp; 。</p></li><li><p>__ror__(self, other)</p><p>实现反射按位或运算符 | 。</p></li><li><p>__rxor__(self, other)</p><p>实现反射按位异或运算符 ^ 。</p></li></ul><h3 id="增强赋值运算法"><a href="#增强赋值运算法" class="headerlink" title="增强赋值运算法"></a>增强赋值运算法</h3><p><strong>a += b _<em>iadd_</em> 也许会返回 a + b ，这个结果会被赋给 a</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 5</span><br><span class="line">x += 1 # 也就是 x = x + 1</span><br></pre></td></tr></table></figure><ul><li><p>__iadd__(self, other)</p><p>实现加法赋值操作。</p></li><li><p>__isub__(self, other)</p><p>实现减法赋值操作。</p></li><li><p>__imul__(self, other)</p><p>实现乘法赋值操作。</p></li><li><p>__ifloordiv__(self, other)</p><p>实现使用 //= 操作符的整数除法赋值操作。</p></li><li><p>__idiv__(self, other)</p><p>实现使用 /= 操作符的除法赋值操作。</p></li><li><p>__itruediv__(self, other)</p><p>实现 <em>true</em> 除法赋值操作，这个函数只有使用 from _<em>future_</em> import division 时才有作用。</p></li><li><p>__imod__(self, other)</p><p>实现 %= 取余赋值操作。</p></li><li><p>__ipow__</p><p>实现 **= 操作。</p></li><li><p>__ilshift__(self, other)</p><p>实现左移位赋值运算符 &lt;&lt;= 。</p></li><li><p>__irshift__(self, other)</p><p>实现右移位赋值运算符 &gt;&gt;= 。</p></li><li><p>__iand__(self, other)</p><p>实现按位与运算符 &amp;= 。</p></li><li><p>__ior__(self, other)</p><p>实现按位或赋值运算符 | 。</p></li><li><p>__ixor__(self, other)</p><p>实现按位异或赋值运算符 ^= 。</p></li></ul><h3 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h3><ul><li><p>__int__(self)</p><p>实现到int的类型转换。</p></li><li><p>__long__(self)</p><p>实现到long的类型转换。</p></li><li><p>__float__(self)</p><p>实现到float的类型转换。</p></li><li><p>__complex__(self)</p><p>实现到complex的类型转换。</p></li><li><p>__oct__(self)</p><p>实现到八进制数的类型转换。</p></li><li><p>__hex__(self)</p><p>实现到十六进制数的类型转换。</p></li><li><p>__index__(self)</p><p>实现当对象用于切片表达式时到一个整数的类型转换。如果你定义了一个可能会用于切片操作的数值类型，你应该定义 __index__。</p></li><li><p>__trunc__(self)</p><p>当调用 math.trunc(self) 时调用该方法， _<em>trunc_</em> 应该返回 self 截取到一个整数类型（通常是long类型）的值。</p></li><li><p>__coerce__(self)</p><p>该方法用于实现混合模式算数运算，如果不能进行类型转换，_<em>coerce_</em> 应该返回 None 。反之，它应该返回一个二元组 self 和 other ，这两者均已被转换成相同的类型。</p></li></ul><h2 id="类的表示"><a href="#类的表示" class="headerlink" title="类的表示"></a>类的表示</h2><ul><li><p>__str__(self)</p><p>定义对类的实例调用 str() 时的行为。</p></li><li><p>__repr__(self)</p><p>定义对类的实例调用 repr() 时的行为。 str() 和 repr() 最主要的差别在于“目标用户”。 repr() 的作用是产生机器可读的输出（大部分情况下，其输出可以作为有效的Python代码），而 str() 则产生人类可读的输出。</p></li><li><p>__format__(self)</p><p>定义当类的实例用于新式字符串格式化时的行为，例如， “Hello, 0:abc!”.format(a) 会导致调用 a._<em>format_</em>(“abc”) 。当定义你自己的数值类型或字符串类型时，你可能想提供某些特殊的格式化选项，这种情况下这个魔法方法会非常有用。</p></li><li><p>__hash__(self)</p><p>定义对类的实例调用 hash() 时的行为。它必须返回一个整数，其结果会被用于字典中键的快速比较。同时注意一点，实现这个魔法方法通常也需要实现 _<em>eq_</em> ，并且遵守如下的规则： a == b 意味着 hash(a) == hash(b)。</p></li><li><p>__nonzero__(self)</p><p>定义对类的实例调用 bool() 时的行为，根据你自己对类的设计，针对不同的实例，这个魔法方法应该相应地返回True或False。</p></li><li><p>__dir__(self)</p><p>定义对类的实例调用 dir() 时的行为，这个方法应该向调用者返回一个属性列表。一般来说，没必要自己实现 _<em>dir_</em> 。但是如果你重定义了 _<em>getattr_</em> 或者 _<em>getattribute_</em> （下个部分会介绍），乃至使用动态生成的属性，以实现类的交互式使用，那么这个魔法方法是必不可少的。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins + Gitlab + 钉钉推送</title>
      <link href="/2019/08/22/jenkins%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/22/jenkins%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>更新Git</li><li>安装Maven</li><li>安装JDK</li><li>安装python3</li></ol><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat/jenkins-2.176.2-1.1.noarch.rpm</span><br><span class="line">rpm -ivh jenkins-2.176.2-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 编辑jenkins配置文件</span><br><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"><span class="meta">#</span> 更改端口 - 初始端口是8080与tomcat冲突</span><br><span class="line">JENKINS_PORT="8088"</span><br></pre></td></tr></table></figure><h3 id="3、权限"><a href="#3、权限" class="headerlink" title="3、权限"></a>3、权限</h3><p>修改用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改权限为root 避免以后的权限坑</span><br><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"><span class="meta">$</span>JENKINS_USER="root"</span><br></pre></td></tr></table></figure><p>修改目录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root /var/lib/jenkins</span><br><span class="line">chown -R root:root /var/cache/jenkins</span><br><span class="line">chown -R root:root /var/log/jenkins</span><br></pre></td></tr></table></figure><p>重启jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 重启</span><br><span class="line">service jenkins restart</span><br><span class="line"><span class="meta">#</span> 查看jenkins是否已经改为root用户</span><br><span class="line">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure><h3 id="4、启动"><a href="#4、启动" class="headerlink" title="4、启动"></a>4、启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start jenkins</span><br><span class="line"><span class="meta">#</span> 访问jenkins地址</span><br><span class="line">http://localhost:8088</span><br></pre></td></tr></table></figure><p>按jenkins提示进行安装 - 插件选择安装推荐的插件</p><h3 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h3><h4 id="（1）设置全局变量"><a href="#（1）设置全局变量" class="headerlink" title="（1）设置全局变量"></a>（1）设置全局变量</h4><ol><li><p>进入全局变量设置</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzxkn.png" alt="设置1"></p></li><li><p>设置Maven</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzzYq.png" alt="设置2"></p></li><li><p>设置JDK</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzUL4.png" alt="JDK设置"></p></li><li><p>设置GIT</p><p><img src="https://s2.ax1x.com/2019/08/23/mBztQU.png" alt="GIT设置"></p></li><li><p>设置Maven</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzsW6.png" alt="Maven设置"></p></li></ol><h4 id="（2）设置安全设置"><a href="#（2）设置安全设置" class="headerlink" title="（2）设置安全设置"></a>（2）设置安全设置</h4><ol><li><p>进入安全设置</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzOmQ.png" alt="进入安全设置"></p></li><li><p>根据下图进行设置</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzfwd.png" alt="安全设置"></p></li></ol><h4 id="（3）安装插件"><a href="#（3）安装插件" class="headerlink" title="（3）安装插件"></a>（3）安装插件</h4><ol><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Python+Plugin" target="_blank" rel="noopener">Python Plugin</a></li><li><a href="https://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin" target="_blank" rel="noopener">SSH Slaves plugin</a></li><li><a href="http://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin" target="_blank" rel="noopener">Deploy to container Plugin</a></li><li><a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin" target="_blank" rel="noopener">Generic Webhook Trigger Plugin</a> </li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><ol><li><p>生成ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在jenkins服务器生成ssh -key</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>获取ssh 公钥</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzcQO.png" alt="ssh公钥"></p></li><li><p>在gitlab项目中添加ssh公钥</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzDF1.png" alt="gitlabSSH"></p></li><li><p>获取ssh密钥</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzgyD.png" alt="ssh密钥"></p></li><li><p>在jenkins中添加ssh密钥</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzXwj.png" alt="凭据1"></p><p><img src="https://s2.ax1x.com/2019/08/23/mBzjTs.png" alt="凭据2"></p><p><img src="https://s2.ax1x.com/2019/08/23/mBzhTA.png" alt="创建凭据"></p><h4 id="（2）新建"><a href="#（2）新建" class="headerlink" title="（2）新建"></a>（2）新建</h4></li><li><p><strong>新建Item</strong></p></li><li><p>输入项目名称，选择自由项目</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzIYt.png" alt="创建项目"></p></li><li><p>点击确认</p></li></ol><h4 id="（3）项目设置"><a href="#（3）项目设置" class="headerlink" title="（3）项目设置"></a>（3）项目设置</h4><ol><li><p><strong>源码管理</strong></p><p>Repository URL 为gitlab中clone地址</p><p>Credentials 为添加的SSH</p><p><img src="https://s2.ax1x.com/2019/08/23/mBzww9.png" alt="git源码"></p></li><li><p><strong>构建触发器</strong></p><ul><li>利用 <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin" target="_blank" rel="noopener">Generic Webhook Trigger Plugin</a> 插件拉取指定分支的代码</li></ul><p><img src="https://s2.ax1x.com/2019/11/14/MtukPf.png" alt="设置"></p><p><strong>“ refs/heads/{这里填写需要拉取的分支名称}”</strong></p><p><img src="https://s2.ax1x.com/2019/11/15/MUz8de.png" alt="webhook正则匹配"> </p></li></ol><ul><li><p>利用gitlab webhook进行触发</p><p><img src="https://s2.ax1x.com/2019/11/14/MtuIW8.png" alt="gtilabWebhook"></p><p>​    </p></li><li><p>gitlab添加webhook需要用管理员账号打开</p><p>设置-网络-外部发送-允许来自钩子和服务的对本地网络的请求</p></li></ul><ol start="3"><li><p>构建**</p><ul><li>调用maven,执行shell命令，使用docker挂载目录、指定端口</li></ul><p><img src="https://s2.ax1x.com/2019/11/14/MtKMOH.png" alt="构建"></p></li><li><p>钉钉推送</p><p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq" target="_blank" rel="noopener">钉钉开发文档</a></p><ul><li>添加Execute Python script</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os, json, sys, time</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">'/usr/local/lib/python3.7/site-packages'</span>)</span><br><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendding</span><span class="params">(title, content)</span>:</span></span><br><span class="line">    <span class="comment"># 钉钉的webhook地址</span></span><br><span class="line">    url = <span class="string">"https://oapi.dingtalk.com/robot/send?access_token=&#123;钉钉机器人token&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钉钉发送的消息</span></span><br><span class="line">    pagrem = &#123;</span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">        <span class="string">"markdown"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: title,</span><br><span class="line">            <span class="string">"text"</span>: content,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># "at": &#123;</span></span><br><span class="line">        <span class="comment">#    "atMobiles": [</span></span><br><span class="line">        <span class="comment">#         "156xxxx8827",</span></span><br><span class="line">        <span class="comment">#         "189xxxx8325"</span></span><br><span class="line">        <span class="comment">#     ],</span></span><br><span class="line">        <span class="comment">#     "isAtAll": false # @全体成员</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钉钉传参的头部信息</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"charset"</span>: <span class="string">"utf-8"</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向钉钉推送请求</span></span><br><span class="line">    requests.post(url, data=json.dumps(pagrem), headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notification</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取git日志</span></span><br><span class="line">    logStr = os.popen(<span class="string">"git log"</span>).read()</span><br><span class="line">    new_str = logStr.split(<span class="string">'commit'</span>)[<span class="number">1</span>].split(<span class="string">'\n'</span>)</span><br><span class="line">    puthCommit = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_str:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Author'</span> <span class="keyword">in</span> i:</span><br><span class="line">            <span class="comment"># 获取提交者的名字</span></span><br><span class="line">            pushName = i.split()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Date'</span> <span class="keyword">in</span> i:</span><br><span class="line">            <span class="comment"># 获取提交者的时间</span></span><br><span class="line">            pushTimes = i.split()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'    '</span> <span class="keyword">in</span> i:</span><br><span class="line">            puthCommit += i.strip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取推送的月份</span></span><br><span class="line">    mm = pushTimes[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取推送的日期</span></span><br><span class="line">    dd = pushTimes[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取推送的时间</span></span><br><span class="line">    hh = pushTimes[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取推送的年份</span></span><br><span class="line">    yy = pushTimes[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    months = &#123;<span class="string">'Jan'</span>: <span class="string">'1'</span>, <span class="string">'Feb'</span>: <span class="string">'2'</span>, <span class="string">'Mar'</span>: <span class="string">'3'</span>, <span class="string">'Apr'</span>: <span class="string">'4'</span>, <span class="string">'May'</span>: <span class="string">'5'</span>, <span class="string">'Jun'</span>: <span class="string">'6'</span>, <span class="string">'Jul'</span>: <span class="string">'7'</span>, <span class="string">'Aug'</span>: <span class="string">'8'</span>,</span><br><span class="line">              <span class="string">'Sep'</span>: <span class="string">'9'</span>, <span class="string">'Oct'</span>: <span class="string">'10'</span>, <span class="string">'Nov'</span>: <span class="string">'11'</span>, <span class="string">'Dec'</span>: <span class="string">'12'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 时间字符串</span></span><br><span class="line">    pushTime = <span class="string">"time ： "</span> + yy + <span class="string">"-"</span> + months[mm] + <span class="string">"-"</span> + dd + <span class="string">"  "</span> + hh</span><br><span class="line"></span><br><span class="line">    <span class="comment"># jenkins的请求</span></span><br><span class="line">    server = jenkins.Jenkins(<span class="string">'http://192.168.1.180:8081/'</span>, username=<span class="string">'admin'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取上次构建的项目序号</span></span><br><span class="line">    build_number = server.get_job_info(<span class="string">'WBS'</span>)[<span class="string">'lastBuild'</span>][<span class="string">'number'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取Jenkins构建时的日志</span></span><br><span class="line">    jenkinsLog = server.get_build_console_output(<span class="string">'WBS'</span>, build_number)</span><br><span class="line">    <span class="keyword">if</span> jenkinsLog <span class="keyword">is</span> <span class="string">"null"</span>:</span><br><span class="line">        jenkinsLog = server.get_build_console_output(<span class="string">'WBS'</span>, build_number - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产看docker正在运行的服务</span></span><br><span class="line">    results = os.popen(<span class="string">'docker ps -a'</span>)</span><br><span class="line"></span><br><span class="line">    results = results.read()</span><br><span class="line">    print(<span class="string">"*******  docker  *******"</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> results.splitlines()[:<span class="number">5</span>]:</span><br><span class="line">        print(line)</span><br><span class="line">      <span class="keyword">if</span>  <span class="string">'8080'</span> <span class="keyword">in</span> line:</span><br><span class="line">            ruselt = <span class="string">'成功'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ruselt = <span class="string">'失败'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ruselt == <span class="string">'失败'</span>:</span><br><span class="line">        os.system(<span class="string">'docker logs --tail=300 wbs'</span>)</span><br><span class="line">    print(ruselt)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 打印上次构建的序号</span></span><br><span class="line">    <span class="comment"># print("BUILD_NUMBER："+ str(build_number))</span></span><br><span class="line">    print(<span class="string">'------------------------------------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钉钉推送的消息title</span></span><br><span class="line">    title = pushName + <span class="string">' [WBS]第'</span> + str(build_number) + <span class="string">'次部署'</span>  + ruselt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 钉钉推送的消息内容</span></span><br><span class="line">    content = <span class="string">"### "</span> + title + <span class="string">"\n"</span> + <span class="string">"&gt; "</span> + pushTime + <span class="string">"\n\n"</span> + <span class="string">"&gt; commit ： "</span> + puthCommit + <span class="string">"\n\n"</span> + <span class="string">"&gt; [jenkins 控制台输出](http://192.168.1.180:8081/job/WBS/%s/console)\n"</span> % build_number</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 调用钉钉推送方法</span></span><br><span class="line">    sendding(title,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    notification()</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li>点击保存，完成项目配置</li></ol><p>​        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2019/08/11/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/08/11/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h2><ul><li>进程：<ul><li>正在允许中的程序，是系统进行资源分配和调用的独立单位</li><li>每一个进程都有它自己的内存空间和系统资源</li></ul></li><li>线程：<ul><li>是进程中的单个顺序控制流，是一条执行路径</li><li>一个进程如果只有一条执行路径，则称为单线程程序</li><li>一个进程如果有多条执行路径，则称为多线程程序</li></ul></li><li>并行和并发<ul><li>并行是逻辑上同时发生，指在某一个时间内同时运行多个程序</li><li>并发是物理上同时发生，只在某一个时间点同时运行多个程序</li></ul></li></ul><h2 id="开启多线程-方法一"><a href="#开启多线程-方法一" class="headerlink" title="开启多线程 - 方法一"></a>开启多线程 - 方法一</h2><ol><li>自定义类集成Thread类</li><li>重写run()</li><li>创建对象</li><li>启动线程</li></ol><h3 id="获取和设置多线程名称"><a href="#获取和设置多线程名称" class="headerlink" title="获取和设置多线程名称"></a>获取和设置多线程名称</h3><ul><li><p>Thread类的基本获取和设置方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getNmae</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 通过构建方法也可以给线程起名字</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title">currentThread</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><ul><li><p>线程调度的两种调度模式</p><ul><li>分时调度模型，所有线程轮流使用CPU的使用权，平均分配给每个线程占CPU的时间片</li><li>抢占式调度模型，有限让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的CPU时间片相对多一些</li></ul></li><li><p>java使用的是抢占式调度模型</p></li><li><p>设置和获取线程优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前线程优先级</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置线程优先级 1-10</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ul><li><p>线程休眠</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br></pre></td></tr></table></figure></li><li><p>线程加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>线程礼让</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>后台线程 - 守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span><span class="params">(<span class="keyword">boolean</span> on)</span></span></span><br></pre></td></tr></table></figure></li><li><p>中断线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 过时方法 - 不建议使用：不能捕获异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 可以捕获异常</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="开启多线程-方法二"><a href="#开启多线程-方法二" class="headerlink" title="开启多线程 - 方法二"></a>开启多线程 - 方法二</h2><ol><li>创建myRunnable类实现Runnable接口</li><li>Thread类的构造方法传入myRunnable类</li><li>调用Thread的start()方法来启动线程</li></ol><h2 id="解决线程安全的思想"><a href="#解决线程安全的思想" class="headerlink" title="解决线程安全的思想"></a>解决线程安全的思想</h2><ul><li><p>首先想为什么出现问题？</p><ul><li>是否是多线程环境</li><li>是否有共享数据</li><li>是否有多条语言操作共享数据</li></ul></li><li><p>如何解决多线程安全问题？</p><p>加同步锁</p><ul><li>基本思想：让程序处于没有安全问题的环境</li><li>怎么实现？<ul><li>把多个语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程秩序即可</li></ul></li></ul></li><li><p>同步锁是谁？</p><ul><li>实例方法 : this</li><li>静态方法 : 类.class - 当前类的字节码对象</li></ul></li></ul><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><ul><li>同步弊端<ul><li>效率低</li><li>如果出现同步嵌套，就容易产生死锁问题</li></ul></li><li>死锁问题及其代码<ul><li>是指产生两个或者两个以上的线程在执行的过程中，因争夺资源产生的一种互相等待现象</li><li>同步代码块的嵌套案例</li></ul></li></ul><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>针对统一个资源的操作有不同的线程</p><ul><li>生产者和消费者问题<ul><li>获取学生对象<ul><li>生产者：创建学生对象线程</li><li>消费者：获取学生对象</li></ul></li></ul></li></ul><p><strong>生产者和消费者模型</strong></p><ul><li><p>创建Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建SetStudent生产者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetStudent</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Student s;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    SetStudent(Student s) &#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        s.wait(); <span class="comment">// 等待，归还锁，下次被唤醒，就从此处开始执行</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count %<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">// 学生类赋值</span></span><br><span class="line">                    s.setName(<span class="string">"tim"</span>);</span><br><span class="line">                    s.setAge(<span class="number">11</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    s.setName(<span class="string">"tom"</span>);</span><br><span class="line">                    s.setAge(<span class="number">12</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                s.flag = <span class="keyword">true</span>;</span><br><span class="line">                s.notify(); <span class="comment">// 唤醒消费者</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建GetStudent消费者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStudent</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Student s;</span><br><span class="line">    GetStudent(Student s) &#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!s.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        s.wait(); <span class="comment">// 等待，归还锁，下次被唤醒，就从此处开始执行</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                s.flag = <span class="keyword">false</span>;</span><br><span class="line">                s.notify(); <span class="comment">// 唤醒生产者</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        SetStudent s1 = <span class="keyword">new</span> SetStudent(s);</span><br><span class="line">        GetStudent s2 = <span class="keyword">new</span> GetStudent(s);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(s1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(s2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="单例模式-多线程"><a href="#单例模式-多线程" class="headerlink" title="单例模式 - 多线程"></a>单例模式 - 多线程</h2><ul><li><p>懒汉式</p><ul><li><p>优点： 不会占用过多的系统资源</p></li><li><p>缺点： 第一次访问慢，第一次惩罚，延迟加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingletonLazy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 懒汉式 - 不会创建一个对象，而是在调用的时候再创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingletonLazy mySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 懒汉式需要加锁来保证线程安全，相比饿汉式执行效率低</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">synchronized</span> MySingletonLazy <span class="title">createInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mySingleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mySingleton = <span class="keyword">new</span> MySingletonLazy();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>饿汉式</p><ul><li><p>优点： 第一次使用加载快</p></li><li><p>缺点：会占用过多资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 饿汉式 - 上来就创建好对象等待调用，以空间换时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton mySingleton= <span class="keyword">new</span> MySingleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> MySingleton <span class="title">createMySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常用API</title>
      <link href="/2019/07/31/java%E5%B8%B8%E7%94%A8API/"/>
      <url>/2019/07/31/java%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h1 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 哈希编码： 跟内存地址有关，根据内存地址按照哈希算法计算出一个数</span></span></span><br><span class="line"><span class="function"><span class="comment">// 两个字符串的内存不同，但是哈希编码可能一样 例如："Aa"和"BB" 。</span></span></span><br><span class="line"><span class="function">--------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// Class与反射有关，代表类的字节码对象</span></span></span><br><span class="line"><span class="function">--------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 重写该方法自定义对象的输出格式</span></span></span><br><span class="line"><span class="function">--------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 引用类型比较相等，默认比地址</span></span></span><br><span class="line"><span class="function"><span class="comment">// 重写方法，按照属性值比较内容相等</span></span></span><br><span class="line"><span class="function">--------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 清理资源、记录日志</span></span></span><br><span class="line"><span class="function"><span class="comment">// 手动启动垃圾回收  System.gc()</span></span></span><br><span class="line"><span class="function">-------------------------------------------------------- </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 必须实现Cloneable接口（这个接口什么都没有） -- 标记接口</span></span></span><br><span class="line"><span class="function">--------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul><li><p>概述</p><ul><li>字符串是由多个字符组成的一串数据（字符序列）</li><li>字符串可以看作是字符数组</li></ul></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> offset, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span></span></span><br></pre></td></tr></table></figure></li><li><p>判断功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断两个字符串是否相等</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断两个字符串是否相等，不考虑大小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否包含某个字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串是否以某个字符串开始</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串是否以某个字符串结尾</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是否空字符串</span></span></span><br></pre></td></tr></table></figure></li><li><p>获取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符串的长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回字符串指定位置的字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 找指定字符的下标</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 找指定字符串的下标</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 指定字符串下标位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 截取字符串，指定起始位置</span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 指定截取字符串的起始和结尾位置</span></span></span><br></pre></td></tr></table></figure></li><li><p>转换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] getBytes()</span><br><span class="line"><span class="comment">// String 还原成字节数组</span></span><br><span class="line"><span class="keyword">char</span>[] toCharArray()</span><br><span class="line"><span class="comment">// String 转换成字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符数组变字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 整数转字符串</span></span></span><br><span class="line"><span class="function"><span class="comment">// 最常用的是 整数加一个空字符 (str = 1+"";)</span></span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符串全部变小写</span></span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符串全部转小写</span></span></span><br><span class="line"><span class="function">String <span class="title">concat</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符串拼接</span></span></span><br></pre></td></tr></table></figure></li><li><p>其他功能</p><p>替换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> old, <span class="keyword">char</span> new)</span></span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(String old, String new)</span></span></span><br></pre></td></tr></table></figure><p>去除字符串两空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>按字典顺序比较两个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareToIgnoreCase</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><ul><li><p>描述</p><ul><li>StringBuffer主要帮助我们解决字符串拼接问题，因为每次字符串拼接都会构建新的对象，费时，费空间</li><li>线程安全的可变字符序列</li></ul></li><li><p>StringBuffer和String的区别</p><ul><li></li></ul></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span></span></span><br></pre></td></tr></table></figure></li><li><p>添加功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset,String str)</span></span></span><br></pre></td></tr></table></figure></li><li><p>删除功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br></pre></td></tr></table></figure></li><li><p>替换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span></span></span><br></pre></td></tr></table></figure></li><li><p>反转功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>截取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="String-StringBuffer-StringBuilder"><a href="#String-StringBuffer-StringBuilder" class="headerlink" title="String, StringBuffer, StringBuilder"></a>String, StringBuffer, StringBuilder</h2><ul><li>区别<ul><li>String : 不可字符串</li><li>StringBuffer, StringBuilder：可变字符串<ul><li>StringBuffer：线程安全</li><li>StringBuilder：线程不安全，效率高</li></ul></li></ul></li></ul><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul><li><p>概述</p><ul><li>针对数组进行操作的工具类</li><li>提供了排序，查找等功能</li></ul></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 二分查找</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li><p>概述</p><ul><li>基本类型对应的引用类型</li><li>主要用来做类型转换</li></ul></li><li><p>基本类型和包装类型的对应</p></li><li><p>Byte, Short, Integer, Long, Float, Double, Character, Boolean</p></li></ul><h2 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h2><ul><li><p>概述</p><p>Integer类在对象中包装了一个基本类型int的值</p></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String s)</span></span></span><br></pre></td></tr></table></figure></li><li><p>类成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 包装类型转为基本类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 字符串转数字</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 数字转字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(Strng s)</span></span></span><br></pre></td></tr></table></figure></li><li><p>进制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toBinaryString</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 十进制转二进制</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toOctalString</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 十进制转八进制</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 十进制转十六进制</span></span></span><br></pre></td></tr></table></figure></li><li><p>十进制到其他进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> radix)</span></span></span><br></pre></td></tr></table></figure></li><li><p>其他进制到十进制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Character类"><a href="#Character类" class="headerlink" title="Character类"></a>Character类</h2><ul><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUpperCase</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符是否是大写</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLowerCase</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符是否是小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符是不是数字</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">toUpperCase</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"><span class="comment">// </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">toLowerCase</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 内存清理</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 退出程序，习惯退出参数为0</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 当前时间戳，1970-1-1起计时，单位：毫秒</span></span></span><br></pre></td></tr></table></figure><h2 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h2><ul><li><p>描述</p><ul><li>可以让超过Integer范围内的数据进行运算</li></ul></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigInteger</span><span class="params">(String val)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="BigDecemal类"><a href="#BigDecemal类" class="headerlink" title="BigDecemal类"></a>BigDecemal类</h2><ul><li><p>描述</p><ul><li>解决小数运算精度问题</li></ul></li><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecemal</span><span class="params">(String val)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><ul><li><p>概述</p><ul><li>类Date表示特定的瞬间，精确到毫秒</li></ul></li><li><p>构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public Date()</span><br><span class="line">public Date(long date)</span><br></pre></td></tr></table></figure></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h2><ul><li><p>概述</p><ul><li>DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间</li><li>是抽象类，所以使用其子类SimpleDateFormat</li></ul></li><li><p>SimpleDateFormat构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span></span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 日期转字符串</span></span></span><br><span class="line"><span class="function">DateFormat df </span>= <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String strdate = df.format(date);</span><br><span class="line">System.out.println(strdate);</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function">----------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="comment">// 字符串转日期</span></span></span><br><span class="line"><span class="function">Scanner sc </span>= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">System.out.println(<span class="string">"输入日期："</span>);</span><br><span class="line">String strdate = sc.nextLine();</span><br><span class="line">Date date = df.parse(strdate);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Calender类"><a href="#Calender类" class="headerlink" title="Calender类"></a>Calender类</h2><ul><li><p>概述</p><ul><li>Calendar类是一个抽象类，它为指定瞬间与一组诸如YEAR、MONTH、HOUR等日历字段之前的转换提供了一些方法，并为操作日历字段提供了一些方法</li></ul></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calender <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取日历中的指定部分</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 日期加减运算</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置日日为指定的日期</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p>概述</p><ul><li>异常就是java在运行过程中出现错误</li><li>我们常见异常： 角标越界异常、空指针异常</li></ul></li><li><p>常见错误</p><ul><li>编译错误： 语法错误，编译器无法通过.class文件都没有</li><li>逻辑错误： 编译通过，正常运行，结果和预想不一致</li><li>异常： 程序运行时出错，有些宜昌市无法避免的，出现异常，程序应该能正常继续运行</li></ul></li><li><p>异常结构</p><ul><li><p>Throwable</p><ul><li><p>Error： 严重的系统级错误，层序员不管</p></li><li><p>Exception： 程序员处理</p><ul><li><p>RuntimeException及其子类 </p><p>运行时异常： 编译器不会强制检查 - 非受查异常</p></li><li><p>非RuntimeException及其子类 </p><p>编译时异常： 编译会检查异常是否处理，没有处理编译报错- 受查异常</p></li></ul></li></ul></li></ul></li><li><p>异常处理</p><p>一个try可以跟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">// 可能发生异常的代码</span><br><span class="line">&#125;catch (Exception e)&#123;  </span><br><span class="line">// 异常发生后的处理</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">// 最后要做的事情</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  throw : 抛出异常：我的代码不处理异常，调用者来处理</p><ul><li><p>异常体系</p><ul><li>Throwable<ul><li>Error</li><li>Exception<ul><li>RuntimeException及其子类：非受查异常- 编译器不检查</li><li>受查异常 - 编译器强制检查</li></ul></li></ul></li></ul></li><li><p>throws和throw区别</p><ul><li><p>throws</p><ol><li>用在方法声明后面，跟的是异常类名</li><li>可以跟多个异常类名，用逗号隔开</li><li>表示抛出异常，由该方法的调用者来处理</li><li>throws表示出现的异常的一种可能性，并不一定会发生这些异常</li></ol></li><li><p>throw</p><pre><code>1. 用在方法体内，跟的是异常对象名 2. 只能抛出一个异常对象名 3. 表示抛出异常，有方法体内的语句处理 4. throw则是抛出了异常，执行throw则一定抛出了某种异常</code></pre></li><li><p>异常注意事项</p><ul><li>子类重写父类的方法时，子类的方法必须抛出相同的异常或父类异常的子类</li><li>如果父类抛出了多个异常，子类重写父类时，只能抛出相同的异常或者是他的子集，子类不能抛出父类没有的异常</li><li>如果被重写的方法没有异常抛出，那么子类的方法绝对不可以抛出异常，如果子类的方法内有异常发生，那么子类只能try，不能throws。</li></ul></li></ul></li></ul><h2 id="Throwable类"><a href="#Throwable类" class="headerlink" title="Throwable类"></a>Throwable类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getMessage()</span><br><span class="line"><span class="comment">// 获取异常信息，返回字符串</span></span><br><span class="line">toString()</span><br><span class="line"><span class="comment">// 获取异常类名和异常信息，返回字符串</span></span><br><span class="line">printStackTrace()</span><br><span class="line"><span class="comment">// 获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void</span></span><br></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>代替数组</p><ul><li><p>集合和数组的区别</p><ul><li>数组虽然也可以存储对象，但是长度是固定的，集合的长度是可变的</li><li>数组中可以存储任何类型，集合只能存储对象</li></ul></li><li><p>集合的特点</p><ul><li>集合只用于存储对象，集合长度是可变的，集合可以存储不同类型的对象</li><li>如果要存储基本类型必须使用包装类（自动装箱）</li><li>非泛型集合：集合中可以存储任意类型的数据</li><li>泛型集合：定义集合时，必须规定集合中的元素类型</li></ul></li><li><p>集合框架</p><ul><li>Collection<ul><li>List<ul><li>ArraryList（重点）</li><li>LinkedList</li></ul></li><li>Set<ul><li>HashSet（重点）</li><li>TreeSet</li></ul></li></ul></li><li>Map<ul><li>HashMap（重点）</li><li>TreMap</li></ul></li></ul></li></ul><h2 id="Collection类"><a href="#Collection类" class="headerlink" title="Collection类"></a>Collection类</h2><p>有些可重复，有些不可重复，有些有序，有些无序</p><ul><li><p>接口成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 添加元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 清空元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Objest o)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 集合是否包含某个元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 集合实都为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取集合中元素的个数</span></span></span><br><span class="line"><span class="function">Objest[] <span class="title">toArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 把集合转成数组，可以实现集合的遍历</span></span></span><br><span class="line"><span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 迭代器，集合的专用遍历方式</span></span></span><br></pre></td></tr></table></figure></li><li><p>泛型集合</p><ul><li><p>数组：数据类型[]    数组名</p></li><li><p>泛型集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;类型&gt; 集合对象 = <span class="keyword">new</span> ArrayList&lt;类型&gt;()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>泛型类 ： 泛型集合</p></li><li><p>泛型方法</p></li><li><p>泛型接口</p></li></ul><h2 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h2><p>list的底层就是数组，提供了针对下标操作的方法</p><ul><li><p>概述</p><ul><li><p>有序的collection（也称为序列）。此接口的用户可以对列表中的每一个元素的插入进行精确的控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表的元素</p></li><li><p>与set不同，列表通常允许重复的元素</p></li></ul></li><li><p>案例</p><ul><li>储存字符串并遍历</li><li>储存自定义对象并遍历</li></ul></li><li><p>接口成员方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void add(int index, E element)</span><br><span class="line">// 添加元素到指定下标</span><br><span class="line">E remove(int index)</span><br><span class="line">// 删除指定下标元素</span><br><span class="line">E get(int index)</span><br><span class="line">// 获取指定下标的元素</span><br><span class="line">E set(int index, E element)</span><br><span class="line">// 修改指定下标的元素</span><br><span class="line">ListIterator listIterator()</span><br><span class="line">// 遍历元素</span><br></pre></td></tr></table></figure></li><li><p>父子关系</p><ul><li>List<ul><li>ArrayList</li><li>Vector</li><li>LinkedList</li></ul></li><li>Set<ul><li>HashSet</li><li>LinkedHashSet</li><li>TreeSet</li></ul></li></ul></li></ul><h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><ul><li>概述<ul><li>底层数据结构时数组，查询快，增删慢</li><li>线程不安全，效率高</li></ul></li><li>案例<ul><li>存储字符串并遍历</li><li>存储自定义对象并遍历</li></ul></li></ul><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><ul><li><p>概述</p><p>文件和目录路径的抽象表示形式</p></li><li><p>构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public File(String pathname)</span><br><span class="line">public File(String parent, String child)</span><br><span class="line">public File(File parent, String child)</span><br></pre></td></tr></table></figure></li><li><p>创建功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 新建文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 创建目录</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 创建多层目录</span></span></span><br></pre></td></tr></table></figure></li><li><p>删除功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>重命名功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span></span></span><br></pre></td></tr></table></figure></li><li><p>判断功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是不是文件夹</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是不是文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断文件存不存在</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWirte</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断文件是否隐藏</span></span></span><br></pre></td></tr></table></figure></li><li><p>基本获取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取完整文件路径</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取路径名称的字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取文件名字</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取里面文字的长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取文件最后修改时间</span></span></span><br></pre></td></tr></table></figure></li><li><p>高级获取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list()</span><br><span class="line"><span class="keyword">public</span> File[] listFiles()</span><br></pre></td></tr></table></figure></li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li><p>概述</p><p>方法定义中调用方法本身的现象</p></li><li><p>注意事项</p><ol><li>要有出口否则就是死递归</li><li>次数不能太多，否则就会内存溢出</li><li>构造方法不能递归使用</li></ol></li><li></li></ul><h2 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h2><p>LinkedList底层是链表，没有下标，但是用了算法模拟数组操作。</p><ul><li><p>概述</p><ul><li>底层数据结构是链表，查询慢，增删快</li><li>线程不安全，效率高</li></ul></li><li><p>特有功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>及<span class="title">addLast</span><span class="params">(E e)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 添加第一个/最后一个</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span>及<span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 过去第一个/最后一个</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EremoveFirst</span><span class="params">()</span>及<span class="keyword">public</span> <span class="title">EremoveLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 移除第一个/最后一个</span></span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><ul><li>存储字符串 并遍历</li><li>存储自定义对象并遍历</li></ul></li></ul><h2 id="Set接口-1"><a href="#Set接口-1" class="headerlink" title="Set接口"></a>Set接口</h2><ul><li><p>概述</p><p>一个不包含重复元素的collection.</p></li><li><p>案例</p><ul><li>存储字符串并遍历</li><li>寻出自定义对象并遍历</li></ul></li></ul><h2 id="HashSet类"><a href="#HashSet类" class="headerlink" title="HashSet类"></a>HashSet类</h2><ul><li><p>概述</p><p>无序不重复</p></li><li><p>HashSet如何保证元素唯一性</p><ul><li>底层数据结构是哈希表（元素是链表的数据结构）</li><li>添加功能底层依赖两个方法：<ul><li>int hashCode()</li><li>boolean equals(Object obj)</li></ul></li></ul></li></ul><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><ul><li><p>概述</p><ul><li>将键映射到值的对象</li><li>一个映射不能包含重复的键</li><li>每个键最多只能映射到一个值</li></ul></li><li><p>Map接口和collection接口的区别</p><ul><li>Map是双列的，Collection是单列的</li><li>Map的键唯一，Collection的子体系Set是唯一的</li></ul></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key,V value)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 添加元素</span></span></span><br><span class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 移除元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 清空元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断键有没有</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断值有没有</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是否为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回map长度</span></span></span><br><span class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 根据键获取值</span></span></span><br><span class="line"><span class="function">Set&lt;K&gt; <span class="title">KeySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取所有键的集合Set</span></span></span><br><span class="line"><span class="function">Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取所有值的集合Collection</span></span></span><br><span class="line"><span class="function">Set&lt;Map.Entry&lt;K,V&gt;&gt; <span class="title">entrySet</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取键和值的集合</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Collection类-1"><a href="#Collection类-1" class="headerlink" title="Collection类"></a>Collection类</h2><ul><li><p>概述</p><ul><li>针对集合操作的工具类</li></ul></li><li><p>成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List&lt;?&gt; list, T key)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 二分查找</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">max</span><span class="params">(Collection&lt;?&gt; coll)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 最大</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;? list&gt;)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 反转</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ul><li><p>概述</p><ul><li>IO流用来处理设备之间的数据传输<ul><li>上传文件和下载文件</li></ul></li><li>Java对数据的操作是通过流的方式</li><li>Java用于操作流的对象在IO包中</li></ul></li><li><p>分类</p><ul><li>按照数据流向<ul><li>输入流 读入数据</li><li>输出流 写出数据</li></ul></li><li>按照数据类型<ul><li>字节流 - 操作中文字符方便。</li><li>字符流 - 通用的，任何文件都可以操作。</li><li>什么情况下使用那种流呢？<ul><li>如果数据所在的文件能通过win自带记事本打开，并读懂里面的内容，就用字符流</li><li>其他使用字节流</li></ul></li></ul></li></ul></li><li><p>字节流写数据</p><p><strong>OutputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileOutputStream()类</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">FileOutputStream(File file)</span><br><span class="line">FileOutputStream(String name)</span><br></pre></td></tr></table></figure></li><li><p>字节流写数据的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 写入字符编码</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br></pre></td></tr></table></figure></li><li><p>字节流读取数据</p><p><strong>InputStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileInputStream类</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">FileInputStream(File file)</span><br><span class="line">FileInputStream(String name)</span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span></span><br></pre></td></tr></table></figure></li><li><p>字节缓冲流</p><ul><li><p>字节流一次写入一个数组的速度明显比一次读写一个字节的速度要快很多，这是加入了数组这样的缓冲区效果，java本身在设计的时候，也考虑到了这样的 设计思想，所以提供了字节缓冲区流。</p></li><li><p>字节流缓存输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedOutputStream()</span><br></pre></td></tr></table></figure></li><li><p>字节缓冲输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedInputStream()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><p>字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out, String charsetName)</span></span></span><br></pre></td></tr></table></figure><h2 id="InputStreamWriter"><a href="#InputStreamWriter" class="headerlink" title="InputStreamWriter"></a>InputStreamWriter</h2><p>字符输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamWriter</span><span class="params">(OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamWriter</span><span class="params">(OutputStream out, String charsetName)</span></span></span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul><li><p>序列化</p><p>将对象存储到存储媒介（文件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectOutputStream</span><br></pre></td></tr></table></figure></li><li><p>反序列化</p><p>将储存介质中的数据还原成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream</span><br></pre></td></tr></table></figure></li><li><p>transient</p><p>指定序列化时，不需要存储属性</p></li></ul><h2 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h2><ul><li><p>Properties 作为Map集合使用</p></li><li><p>特殊功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setProperty</span><span class="params">(String key, String value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">setProperty</span><span class="params">(String key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>Properties和IO流结合使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Reader reader)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Writer weiter,String comments)</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基础</title>
      <link href="/2019/07/10/redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/10/redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>部分内容摘录自：<a href="https://github.com/Renskk/Python-100-Days/blob/master/Day36-40/39-40.NoSQL入门.md" target="_blank" rel="noopener">https://github.com/Renskk/Python-100-Days/blob/master/Day36-40/39-40.NoSQL%E5%85%A5%E9%97%A8.md</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html" target="_blank" rel="noopener">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html" target="_blank" rel="noopener">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html" target="_blank" rel="noopener">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html" target="_blank" rel="noopener">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html" target="_blank" rel="noopener">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html" target="_blank" rel="noopener">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html" target="_blank" rel="noopener">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html" target="_blank" rel="noopener">分区</a>。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Redis是REmote DIctionary Server的缩写，它是一个用ANSI C编写的高性能的key-value存储系统，与其他的key-value存储系统相比，Redis有以下一些特点（也是优点）：</p><ul><li>Redis的读写性能极高，并且有丰富的特性（发布/订阅、事务、通知等）。</li><li>Redis支持数据的持久化（RDB和AOF两种方式），可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis支持多种数据类型，包括：string、hash、list、set，zset、bitmap、hyperloglog等。</li><li>Redis支持主从复制（实现读写分析）以及哨兵模式（监控master是否宕机并自动调整配置）。</li><li>Redis支持分布式集群，可以很容易的通过水平扩展来提升系统的整体性能。</li><li>Redis基于TCP提供的可靠传输服务进行通信，很多编程语言都提供了Redis客户端支持。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>高速缓存 - 将不常变化但又经常被访问的热点数据放到Redis数据库中，可以大大降低关系型数据库的压力，从而提升系统的响应性能。</li><li>排行榜 - 很多网站都有排行榜功能，利用Redis中的列表和有序集合可以非常方便的构造各种排行榜系统。</li><li>商品秒杀/投票点赞 - Redis提供了对计数操作的支持，网站上常见的秒杀、点赞等功能都可以利用Redis的计数器通过+1或-1的操作来实现，从而避免了使用关系型数据的<code>update</code>操作。</li><li>分布式锁 - 利用Redis可以跨多台服务器实现分布式锁（类似于线程锁，但是能够被多台机器上的多个线程或进程共享）的功能，用于实现一个阻塞式操作。</li><li>消息队列 - 消息队列和高速缓存一样，是一个大型网站不可缺少的基础服务，可以实现业务解耦和非实时业务削峰等特性，这些我们都会在后面的项目中为大家展示。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在ubuntu下安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 首先安装 redis-server</span><br><span class="line">sudo apt install redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 以默认的配置启动Redis服务</span><br><span class="line">redis-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 通过以下方式修改redis配置</span><br><span class="line"><span class="meta">#</span> 方式一：通过参数指定认证口令和AOF持久化方式</span><br><span class="line">redis-server --requirepass 1qaz2wsx --appendonly yes</span><br><span class="line"><span class="meta">#</span> 方式二：通过指定的配置文件来修改Redis的配置</span><br><span class="line">redis-server /root/redis-5.0.4/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动Redis并将其置于后台运行，并将Redis产生的输出重定向到名为redis.log的文件中</span><br><span class="line">redis-server --requirepass 1qaz2wsx &gt; redis.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看redis是否启动成功</span><br><span class="line">ps -ef | grep redis-server</span><br><span class="line">netstat -nap | grep redis-server</span><br></pre></td></tr></table></figure><h4 id="在Python程序中使用Redis"><a href="#在Python程序中使用Redis" class="headerlink" title="在Python程序中使用Redis"></a>在Python程序中使用Redis</h4><p>可以使用pip安装redis模块。redis模块的核心是名为Redis的类，该类的对象代表一个Redis客户端，通过该客户端可以向Redis服务器发送命令并获取执行的结果。上面我们在Redis客户端中使用的命令基本上就是Redis对象可以接收的消息，所以如果了解了Redis的命令就可以在Python中玩转Redis。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pip3 install redis</span><br><span class="line">python3</span><br><span class="line">-------------------------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = redis.Redis(host=<span class="string">'1.2.3.4'</span>, port=<span class="number">6379</span>, password=<span class="string">'1qaz2wsx'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.set(<span class="string">'username'</span>, <span class="string">'admin'</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hset(<span class="string">'student'</span>, <span class="string">'name'</span>, <span class="string">'hao'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hset(<span class="string">'student'</span>, <span class="string">'age'</span>, <span class="number">38</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.keys(<span class="string">'*'</span>)</span><br><span class="line">[<span class="string">b'username'</span>, <span class="string">b'student'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.get(<span class="string">'username'</span>)</span><br><span class="line"><span class="string">b'admin'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.hgetall(<span class="string">'student'</span>)</span><br><span class="line">&#123;<span class="string">b'name'</span>: <span class="string">b'hao'</span>, <span class="string">b'age'</span>: <span class="string">b'38'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django基础(待填坑)</title>
      <link href="/2019/07/08/Django/"/>
      <url>/2019/07/08/Django/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在基于Python的Web框架中，Django是所有重量级选手中最有代表性的一位，开发者可以基于Django快速的开发可靠的Web应用程序，因为它减少了Web开发中不必要的开销，对常用的设计和开发模式进行了封装，并对MVC架构提供了支持（MTV）。</p><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td><strong>URL/URI</strong></td><td>统一资源定位符/统一资源标识符，网络资源的唯一标识</td></tr><tr><td><strong>域名</strong></td><td>与Web服务器地址对应的一个易于记忆的字符串名字</td></tr><tr><td><strong>DNS</strong></td><td>域名解析服务，可以将域名转换成对应的IP地址</td></tr><tr><td><strong>IP地址</strong></td><td>网络上的主机的身份标识，通过IP地址可以区分不同的主机</td></tr><tr><td><strong>HTTP</strong></td><td>超文本传输协议，构建在TCP之上的应用级协议，万维网数据通信的基础</td></tr><tr><td><strong>反向代理</strong></td><td>代理客户端向服务器发出请求，然后将服务器返回的资源返回给客户端</td></tr><tr><td><strong>Web服务器</strong></td><td>接受HTTP请求，然后返回HTML文件、纯文本文件、图像等资源给请求者</td></tr><tr><td><strong>Nginx</strong></td><td>高性能的Web服务器，也可以用作<a href="https://zh.wikipedia.org/wiki/反向代理" target="_blank" rel="noopener">反向代理</a>，<a href="https://zh.wikipedia.org/wiki/负载均衡" target="_blank" rel="noopener">负载均衡</a> 和 <a href="https://zh.wikipedia.org/wiki/HTTP缓存" target="_blank" rel="noopener">HTTP缓存</a></td></tr></tbody></table><h2 id="虚拟环境搭建"><a href="#虚拟环境搭建" class="headerlink" title="虚拟环境搭建"></a>虚拟环境搭建</h2><p>为什么要用虚拟环境：</p><ul><li>在使用django框架创建项目的时候，一个环境只能加载一个版本，因此若不安装虚拟环境，系统中只能存在一个版本的django项目。</li><li>方便管理第三方包，每个项目使用的包可能不一样，若不安装虚拟环境、都装在系统里面，每次项目加载都需要加载所有的安装包，影响效率。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装 virtualenv </span><br><span class="line"><span class="meta">$</span> pip install virtualenv </span><br><span class="line"><span class="meta">#</span> 创建虚拟环境</span><br><span class="line"><span class="meta">$</span> python -m virtualenv venv</span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="meta">#</span> 进入虚拟环境 - windows</span><br><span class="line"><span class="meta">$</span> cd venv/Scripts</span><br><span class="line"><span class="meta">$</span> activate#执行进入环境</span><br><span class="line"><span class="meta">$</span> deactivate         #退出虚拟环境</span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="meta">#</span> 进入虚拟环境 - linux</span><br><span class="line"><span class="meta">$</span> cd venv/lib</span><br><span class="line"><span class="meta">$</span> activate#执行进入环境</span><br><span class="line"><span class="meta">$</span> deactivate         #退出虚拟环境</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB基础</title>
      <link href="/2019/06/23/mongodb/"/>
      <url>/2019/06/23/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB是2009年问世的一个面向文档的数据库管理系统，由C++语言编写，旨在为Web应用提供可扩展的高性能数据存储解决方案。虽然在划分类别的时候后，MongoDB被认为是NoSQL的产品，但是它更像一个介于关系数据库和非关系数据库之间的产品，在非关系数据库中它功能最丰富，最像关系数据库。</p><p>MongoDB将数据存储为一个文档，一个文档由一系列的“键值对”组成，其文档类似于JSON对象，但是MongoDB对JSON进行了二进制处理（能够更快的定位key和value），因此其文档的存储格式称为BSON。关于JSON和BSON的差别大家可以看看MongoDB官方网站的文章<a href="https://www.mongodb.com/json-and-bson" target="_blank" rel="noopener">《JSON and BSON》</a>。</p><p>目前，MongoDB已经提供了对Windows、MacOS、Linux、Solaris等多个平台的支持，而且也提供了多种开发语言的驱动程序，Python当然是其中之一。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>在MongoDB中，数据库和集合都不需要手动创建，当我们创建文档时，如果文档所在的集合或数据库不存在，会自动创建数据库和集合</strong></p><ul><li>数据库（database）</li><li>集合（collection）</li><li>文档（document）</li></ul><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show dbs OR show databases# 显示当前所有数据库</span><br><span class="line">use &lt;database&gt;# 进入指定数据库</span><br><span class="line">db # 显示当前所处数据库</span><br><span class="line">show collections# 显示数据库中的集合</span><br></pre></td></tr></table></figure><h2 id="数据库CRUD的查询"><a href="#数据库CRUD的查询" class="headerlink" title="数据库CRUD的查询"></a>数据库CRUD的查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$or       逻辑或</span><br><span class="line">$and     逻辑与</span><br><span class="line">$not      逻辑非</span><br><span class="line">$nor      逻辑or的取反</span><br><span class="line">$exists   存在逻辑</span><br><span class="line">$type     查询键的数据类型</span><br><span class="line">$push操作符添加指定的值到数组中</span><br><span class="line">$ne一个值不在数组里时就把它加进去，避免重复数据 </span><br><span class="line">$<span class="keyword">set</span> 可以用来修改文档中指定属性</span><br><span class="line">$unset 可以删除文档中的制定属性</span><br><span class="line">$addToSet往数组里面加入数据，如果数组里已经存在，则不会加入</span><br><span class="line">$pop删除数组元素，只能从头部或尾部删除一个元素 </span><br><span class="line">$pull删除数组元素，将所有匹配的元素删除</span><br><span class="line">$gt查找大于</span><br><span class="line">$gte查找大于等于</span><br><span class="line">$lt查找小于</span><br><span class="line">$inc自增</span><br><span class="line">&#123;$gt:value，$lt:value&#125;查找区间</span><br></pre></td></tr></table></figure><h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;collection&gt;.insert(doc)# 在&lt;collection&gt;中插入一个文档</span><br><span class="line">db.collection.insertOne(doc)# 插入一个文档</span><br><span class="line">db.collection.insertMany(doc)# 插入多个文档</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;collection&gt;.find(doc)# 查询当前集合中所有文档,返回一个数组</span><br><span class="line">db.&lt;collection&gt;.find(&#123;'doc.doc':'值'&#125;)# 查询当前集合中文档中的文档值</span><br><span class="line">db.&lt;collection&gt;.findOne(doc)# 查询一个，返回文档</span><br><span class="line">db.&lt;collection&gt;.find(doc).count()# 查询符合条件的是几个文档</span><br><span class="line">db.&lt;collection&gt;.find(doc).limit(10)# 查找前十的数据</span><br><span class="line">db.&lt;collection&gt;.find(doc).skip(10).limit(10)# 查找11条到20条的数据</span><br><span class="line">db.&lt;collection&gt;.find($or:[条件，条件])# 查找11条到20条的数据</span><br></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">update() 默认情况使用新对象替换旧对象/默认只会修改一个</span><br><span class="line">db.&lt;collection&gt;.update(&#123;查询条件&#125;，&#123;新对象&#125;)# 替换一个文档</span><br><span class="line">db.&lt;collection&gt;.update(&#123;查询条件&#125;，&#123;$set:&#123;属性&#125;&#125;)# 修改一个文档</span><br><span class="line">db.&lt;collection&gt;.update(&#123;查询条件&#125;，&#123;$unset:&#123;属性&#125;&#125;)# 删除一个文档</span><br><span class="line">db.&lt;collection&gt;.update(&#123;查询条件&#125;，&#123;$push/$addToSet:&#123;属性&#125;&#125;)# 像数组中添加一个新元素</span><br><span class="line">db.&lt;collection&gt;.updateMany() OR db.&lt;collection&gt;.update(&#123;multi:true&#125;)# 修改多个</span><br><span class="line">db.&lt;collection&gt;.repleceOne()# 替换多个</span><br></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">remove() 默认删除多个/必须传参</span><br><span class="line">remove(&#123;&#125;) 清空集合</span><br><span class="line">db.&lt;collection&gt;.remove(属性)# 删除符合条件所有文档</span><br><span class="line">db.&lt;collection&gt;.remove(属性,true)# 删除一个文档</span><br><span class="line">db.&lt;collection&gt;.drop()# 删除集合</span><br><span class="line">db.dropDatabase()# 删库跑路</span><br></pre></td></tr></table></figure><h2 id="插入多数据"><a href="#插入多数据" class="headerlink" title="插入多数据"></a>插入多数据</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i=1; i&lt;=100; i++)&#123;db.&lt;collection&gt;.insert(doc:i)&#125;# 循环插入100条数据</span><br><span class="line">-------------------------------</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;arr.push(&#123;<span class="attr">doc</span>:i&#125;);&#125;</span><br><span class="line">db.&lt;collection&gt;.insert(arr)# 快速插入100条数据</span><br></pre></td></tr></table></figure><h4 id="在Python程序中操作MongoDB"><a href="#在Python程序中操作MongoDB" class="headerlink" title="在Python程序中操作MongoDB"></a>在Python程序中操作MongoDB</h4><p>可以通过pip安装pymongo来实现对MongoDB的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pymongo</span><br><span class="line">python3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient(<span class="string">'mongodb://127.0.0.1:27017'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db = client.school</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> student <span class="keyword">in</span> db.students.find():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'学号:'</span>, student[<span class="string">'stuid'</span>])</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'姓名:'</span>, student[<span class="string">'name'</span>])</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'电话:'</span>, student[<span class="string">'tel'</span>])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">学号: <span class="number">1001.0</span></span><br><span class="line">姓名: 骆昊</span><br><span class="line">电话: <span class="number">13566778899</span></span><br><span class="line">学号: <span class="number">1002.0</span></span><br><span class="line">姓名: 王大锤</span><br><span class="line">电话: <span class="number">13012345678</span></span><br><span class="line">学号: <span class="number">1003.0</span></span><br><span class="line">姓名: 白元芳</span><br><span class="line">电话: <span class="number">13022223333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.find().count()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.remove()</span><br><span class="line">&#123;<span class="string">'n'</span>: <span class="number">3</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.students.find().count()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll = db.students</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> ASCENDING</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.create_index([(<span class="string">'name'</span>, ASCENDING)], unique=<span class="literal">True</span>)</span><br><span class="line"><span class="string">'name_1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.insert_one(&#123;<span class="string">'stuid'</span>: int(<span class="number">1001</span>), <span class="string">'name'</span>: <span class="string">'骆昊'</span>, <span class="string">'gender'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x1050cc6c8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coll.insert_many([&#123;<span class="string">'stuid'</span>: int(<span class="number">1002</span>), <span class="string">'name'</span>: <span class="string">'王大锤'</span>, <span class="string">'gender'</span>: <span class="literal">False</span>&#125;, &#123;<span class="string">'stuid'</span>: int(<span class="number">1003</span>), <span class="string">'name'</span>: <span class="string">'白元芳'</span>, <span class="string">'gender'</span>: <span class="literal">True</span>&#125;])</span><br><span class="line">&lt;pymongo.results.InsertManyResult object at <span class="number">0x1050cc8c8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> student <span class="keyword">in</span> coll.find(&#123;<span class="string">'gender'</span>: <span class="literal">True</span>&#125;):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'学号:'</span>, student[<span class="string">'stuid'</span>])</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'姓名:'</span>, student[<span class="string">'name'</span>])</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'性别:'</span>, <span class="string">'男'</span> <span class="keyword">if</span> student[<span class="string">'gender'</span>] <span class="keyword">else</span> <span class="string">'女'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">学号: <span class="number">1001</span></span><br><span class="line">姓名: 骆昊</span><br><span class="line">性别: 男</span><br><span class="line">学号: <span class="number">1003</span></span><br><span class="line">姓名: 白元芳</span><br><span class="line">性别: 男</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式(待填坑)</title>
      <link href="/2019/06/12/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/12/%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2019/06/12/java%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/12/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="八大基本数据类型"><a href="#八大基本数据类型" class="headerlink" title="八大基本数据类型"></a>八大基本数据类型</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>基本数据类型</th><th>对应包装类</th></tr></thead><tbody><tr><td>byte（字节型）</td><td>java.lang.Byte</td></tr><tr><td>short（短整型）</td><td>java.lang.Short</td></tr><tr><td>int（整型）</td><td>java.lang.Integer</td></tr><tr><td>long（长整型）</td><td>java.lang.Long</td></tr><tr><td>float（单精度浮点型）</td><td>java.lang.Float</td></tr><tr><td>double（双精度浮点型）</td><td>java.lang.Double</td></tr><tr><td>boolean（布尔型）</td><td>java.lang.Boolean</td></tr><tr><td>char（字符型）</td><td>java.lang.Character</td></tr></tbody></table><h2 id="详细划分"><a href="#详细划分" class="headerlink" title="详细划分"></a>详细划分</h2><p>整形：<strong>byte、short、int、long</strong></p><p>浮点型：<strong>float、double</strong></p><p>逻辑型：<strong>Boolean</strong> </p><p>字符型：<strong>char</strong></p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><table><thead><tr><th>顺序</th><th><strong>数据类型</strong></th><th>大/小</th><th>封装类</th><th><strong>默认值</strong></th><th>可表示数据范围**</th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>Byte</strong>(位)</td><td><strong>8</strong></td><td><strong>Byte</strong></td><td><strong>0</strong></td><td><strong>-128~127</strong></td></tr><tr><td><strong>2</strong></td><td><strong>short</strong>(短整数)</td><td><strong>16</strong></td><td><strong>Short</strong></td><td><strong>0</strong></td><td><strong>-32768~32767</strong></td></tr><tr><td><strong>3</strong></td><td><strong>int</strong>(整数)</td><td><strong>32</strong></td><td><strong>Interger</strong></td><td><strong>0</strong></td><td><strong>-2147483648~2147483647</strong></td></tr><tr><td><strong>4</strong></td><td><strong>long</strong>(长整数)</td><td><strong>64</strong></td><td><strong>Long</strong></td><td><strong>0L</strong></td><td><strong>-9223372036854775808~9223372036854775807</strong></td></tr><tr><td><strong>5</strong></td><td><strong>float</strong>(单精度)</td><td><strong>32</strong></td><td><strong>Float</strong></td><td><strong>0</strong>.<strong>0F</strong></td><td><strong>1.4E-45~3.4028235E38</strong></td></tr><tr><td><strong>6</strong></td><td><strong>double</strong>(双精度)</td><td><strong>64</strong></td><td><strong>Double</strong></td><td><strong>0</strong>.<strong>0D</strong></td><td><strong>4.9E-324~1.7976931348623157E308</strong></td></tr><tr><td><strong>7</strong></td><td><strong>char</strong>(字符)</td><td><strong>16</strong></td><td><strong>character</strong></td><td><strong>空</strong></td><td><strong>0~65535</strong></td></tr><tr><td><strong>8</strong></td><td><strong>boolean</strong></td><td><strong>8</strong></td><td><strong>boolean</strong></td><td><strong>flase</strong></td><td><strong>True 或 false</strong></td></tr></tbody></table><p><strong>当一个变量被</strong> <strong>final</strong> <strong>修饰后</strong> <strong>该变量只有一次赋值机会</strong></p><h1 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a>算数操作符</h1><p><strong>基本：</strong>+<strong>、</strong> <strong>- 、*、 /、 %、 ++、 –</strong></p><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Import java.util.Scanner;<span class="comment">// 导包</span></span><br><span class="line"></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);    <span class="comment">//获取一个输入的值</span></span><br><span class="line">Int a = s.nextInt();          <span class="comment">//输入的值赋值给a</span></span><br><span class="line">String str = s.nexLine();    </span><br><span class="line"><span class="keyword">float</span> a = s.nextFloat();</span><br></pre></td></tr></table></figure><h1 id="DecimalFormat"><a href="#DecimalFormat" class="headerlink" title="DecimalFormat"></a>DecimalFormat</h1><p>使用DecimalFormat将数字进行格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取一位整数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> ecimalFormat(<span class="string">"0"</span>).format(pi));<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取一位整数和两位小数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"0.00"</span>).format(pi));<span class="comment">//3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取两位整数和三位小数，整数不足部分以0填补。</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"00.000"</span>).format(pi));<span class="comment">//03.142</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取所有整数部分</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"#"</span>).format(pi));<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以百分比方式计数，并取两位小数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(pi));<span class="comment">//314.16%</span></span><br><span class="line">longc=<span class="number">299792458</span>;<span class="comment">//光速</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示为科学计数法，并取五位小数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"#.#####E0"</span>).format(c));<span class="comment">//2.99792E8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示为两位整数的科学计数法，并取四位小数</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"00.####E0"</span>).format(c));<span class="comment">//29.9792E7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每三位以逗号进行分隔。</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">",###"</span>).format(c));<span class="comment">//299,792,458</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将格式嵌入文本</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> DecimalFormat(<span class="string">"光速大小为每秒,###米。"</span>).format(c));</span><br></pre></td></tr></table></figure><h1 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符(?:)"></a>三元操作符(?:)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">int</span> k = i &lt; j ? <span class="number">99</span> : <span class="number">88</span>;</span><br><span class="line">            <span class="comment">// 相当于</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">               k = <span class="number">99</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k = <span class="number">88</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(k);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多表达式必须要用大括号阔起来；单一表达式可以不适应大括号（看起来简洁）-单一表达式不能在if后加分号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//如果有多个表达式，必须用大括弧包括起来</span></span><br><span class="line"><span class="keyword">if</span> (b)&#123;</span><br><span class="line">    System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">    System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">    System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//否则表达式2 3 无论b是否为true都会执行</span></span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">    System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">    System.out.println(<span class="string">"yes2"</span>);</span><br><span class="line">    System.out.println(<span class="string">"yes3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果只有一个表达式可以不用写括弧，看上去会简约一些</span></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">    System.out.println(<span class="string">"yes1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">    System.out.println(<span class="string">"yes1"</span>);</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p><strong>可以使用 byte, short, int, char, String, enum</strong></p><p><strong>注:</strong> 每个表达式结束，都应该有一个<strong>break</strong>;</p><p><strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(day)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 剩余的数</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"这个是什么鬼？"</span>);</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>while：条件为true时重复执行</p><p>do while：条件为true时重复执行，至少会执行一次</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的定义 ：定义直接赋值</span></span><br><span class="line"><span class="keyword">int</span>[]  array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>  array[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义后赋值</span></span><br><span class="line"><span class="keyword">float</span>[] array = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">5</span>];</span><br><span class="line">array[<span class="number">0</span>] = <span class="number">10.5f</span>;</span><br><span class="line"><span class="comment">// 打印数组 - for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">    System.out.println(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// for each循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : array)&#123;</span><br><span class="line">    System.out.println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用Array类中的toString方法</span></span><br><span class="line">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure><h2 id="数值与字符串互转"><a href="#数值与字符串互转" class="headerlink" title="数值与字符串互转"></a>数值与字符串互转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符转数值</span></span><br><span class="line">String number = <span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">int</span> sum = Integer.parseInt(number) + <span class="number">200</span>;</span><br><span class="line"><span class="keyword">double</span> sum = Double.parseDouble(number) + <span class="number">200.5</span>;</span><br><span class="line"><span class="comment">// 数值转字符</span></span><br><span class="line">String number = <span class="string">""</span> + sum;</span><br><span class="line">String number = String.valueOf(sum);</span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>static:</p><ul><li>静态方法：<ul><li>可以直接调用静态成员</li><li>不可以直接调用非静态成员</li></ul></li><li>非静态方法：<ul><li>可以直接调用静态成员</li><li>可以直接调用非静态成员</li></ul></li><li>成员变量：<ul><li>static :  对所有对象是否使用同一个值</li></ul></li><li>成员方法：<ul><li>static :  工具类中的方法</li></ul></li></ul><h2 id="THIS-关键字"><a href="#THIS-关键字" class="headerlink" title="THIS 关键字"></a>THIS 关键字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用属性</span></span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"tim"</span>;</span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">12</span>;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">this</span>.print();</span><br><span class="line"><span class="comment">// 调用构造方法</span></span><br><span class="line"><span class="comment">// 如果使用，必须是构造方法第一条语句</span></span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>(<span class="string">"tim"</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>super - 子类调用父类的构造方法，属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问父类属性</span></span><br><span class="line"><span class="keyword">super</span>.name ;</span><br><span class="line"><span class="keyword">super</span>.age ;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">this</span>.print();</span><br><span class="line"><span class="comment">// 调用构造方法</span></span><br><span class="line"><span class="comment">// 如果使用，必须是构造方法第一条语句</span></span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line"><span class="keyword">this</span>(<span class="string">"tim"</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure><ul><li><p>子类是对父类功能的扩展：</p></li><li><p>子类可以在父类的基础上添加属性，一般不要定义和父类同名的属性，可以重新父类的方法增强父类的功能。</p></li><li><p>子类对象创建，先调用弗雷德构造方法，默认调用无参构造器</p><ul><li>父类定义了带参的构造器：<ul><li>父类定义无参构造器（建议）</li><li>在子类的构造器中使用super指定调用父类带参的构造器。</li><li>super调用父类的构造方法，必须在子类构造方法的第一条</li><li>this调用本类的构造方法，必须在子类构造方法的第一条语句</li></ul></li></ul></li><li><p>子类集成父类的私有方法，但是不继承父类的构造器（所以子类无法重写父类构造器）</p></li><li><p>代码执行顺序:</p><ul><li>父类：<ul><li>1.静态代码块  –&gt; 2.非静态代码块 –&gt; 3.构造方法</li></ul></li><li>子类<ul><li>4.静态代码块  –&gt; 5.非静态代码块 –&gt; 6.构造方法</li></ul></li><li>1 –&gt; 4 –&gt; 2 –&gt; 3 –&gt; 5 –&gt; 6 </li></ul></li></ul><h3 id="抽象类和方法"><a href="#抽象类和方法" class="headerlink" title="抽象类和方法"></a>抽象类和方法</h3><p>抽象类没有实例化</p><p>抽象方法所在的类，必须是抽象类、抽象类里卖弄可以没有抽象方法</p><ul><li><p>设计抽象方法的目的是：</p><p>抽象类就是设计骨架，可以规定子类的共同属性和方法，</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line">pulice adstract <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">// 抽象方法-只有定义没有实现，没有方法体&#123;&#125;</span></span><br><span class="line">    <span class="function">pulice <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类集成抽象类，必须实现抽象类中的方法，（除开子类也是抽象类）。</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>使用final后的类和方法不能再定义</p><ul><li>修饰变量： 常量</li><li>修饰方法： 子类不能重写父类的final方法</li><li>修饰类： 该类不能被继承</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>同一对象，调用相同的方法，执行不同的操作</p><ul><li><p>重载的多态： 面向编译，静态绑定</p></li><li><p>重写的多态： 面向运行，动态绑定</p></li><li><p>多态实现的三步：    </p><ol><li>子类重写父类的方法</li><li>程序运行时，子类对象赋给父类对象</li><li>通过父类调用方法，执行的时子类的方法</li></ol></li><li><p>父类和子类的转换：</p><ul><li>向上转型：自动类型转换，安全<ul><li>父类=子类</li></ul></li><li>向下转型：不安全<ul><li>真转型：编译通过，运行时异常</li><li>假转型：可以</li></ul></li></ul></li><li><p>多态的应用：</p><ul><li>使用父类类型作为方法的参数</li><li>使用父类类型作为方法的返回值</li></ul></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>interface：</strong> 只有定义，没有实现</p><p>接口是什么：</p><ul><li><p>接口不能被实例化</p></li><li><p>接口只能包含方法声明</p></li><li><p>接口的成员包括方法、属性、索引器、事件</p></li><li><p>接口中不能包含常量、字段(域)、构造函数、析构函数、静态成员</p></li></ul><p>接口的使用：</p><ol><li>派生类必须实现接口中未实现的方法，抽象类除外</li><li>一个类可以实现多个接口（所以 Java 虽然是单继承，但是可以通过接口实现类似多继承的用法）</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mock基础</title>
      <link href="/2019/06/02/mock/"/>
      <url>/2019/06/02/mock/</url>
      
        <content type="html"><![CDATA[<h2 id="如何解决依赖产生的痛点"><a href="#如何解决依赖产生的痛点" class="headerlink" title="如何解决依赖产生的痛点"></a>如何解决依赖产生的痛点</h2><p>1、使用代理工具实现MOCK服务器<br>2、在测试中代码mock，写个mock服务<br>3、真实写个临时接口返回</p><h2 id="mock介绍"><a href="#mock介绍" class="headerlink" title="mock介绍"></a>mock介绍</h2><ul><li>unittest.mock是一个用于在Python中进行测试的库。它允许你使用模拟对象替换受测试系统的部分，检查调用并对如何使用它们进行断言。</li><li>unittest.mock提供了一个核心Mock类，还有MagicMock.<ul><li>执行操作后，您可以断言使用哪种方法/属性以及调用他们的参数。</li><li>您还可以制定返回参数并以正常方式设置所需属性</li><li>mock的patch()装饰器，用于处理测试范围内的修补模块和类级属性</li></ul></li></ul><h2 id="希望得到返回数据"><a href="#希望得到返回数据" class="headerlink" title="希望得到返回数据"></a>希望得到返回数据</h2><ul><li><p>设置返回值和属性</p></li><li><p>mock object对象的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mock = Mock()</span><br><span class="line">mock.return_value = <span class="number">3</span></span><br><span class="line">mock()</span><br></pre></td></tr></table></figure></li><li><p>methods具体方法返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.something.return_value = <span class="number">3</span></span><br><span class="line">mock.something()</span><br></pre></td></tr></table></figure></li><li><p>attribute setting 属性的设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.x = <span class="number">5</span></span><br><span class="line">mock.x</span><br></pre></td></tr></table></figure></li><li><p>通过构造方法-传参的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock = Mock(return_value = <span class="number">3</span>)</span><br><span class="line">mock()</span><br></pre></td></tr></table></figure></li><li><p>多次不同返回值及顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mock.side_effect = (<span class="number">200</span>,<span class="number">404</span>,<span class="number">302</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="希望跟踪多个方法是否被调用和断言"><a href="#希望跟踪多个方法是否被调用和断言" class="headerlink" title="希望跟踪多个方法是否被调用和断言"></a>希望跟踪多个方法是否被调用和断言</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跟踪是否被调用</span></span><br><span class="line">mock_calls</span><br><span class="line"><span class="comment"># 断言是否调用的这个参数</span></span><br><span class="line">assert_called_with()</span><br><span class="line"><span class="comment"># 断言是否只调用一次</span></span><br><span class="line">assert_called_once_with()</span><br></pre></td></tr></table></figure><h2 id="对已有的类的实例使用patch临时改变返回值"><a href="#对已有的类的实例使用patch临时改变返回值" class="headerlink" title="对已有的类的实例使用patch临时改变返回值"></a>对已有的类的实例使用patch临时改变返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入需要测试的类，mock库，patch</span></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> testClass</span><br><span class="line"><span class="keyword">from</span> unittest.mock <span class="keyword">import</span> patch</span><br><span class="line"></span><br><span class="line"><span class="comment"># some_function方法是调用要测试的实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_function</span><span class="params">()</span>:</span></span><br><span class="line">    ins = testClass.method()  <span class="comment"># 调用测试类中的模块   </span></span><br><span class="line">    <span class="keyword">return</span> ins.method()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用with patch方法将要mock的方法写出来，加了返回值和方法返回值，是拦截了命名空间先调用了mock</span></span><br><span class="line"><span class="keyword">with</span> patch(<span class="string">'test.testClass.method'</span>) <span class="keyword">as</span> mock:</span><br><span class="line">    ins = mock.return_value</span><br><span class="line">    ins.method.return_value = <span class="string">'result'</span></span><br><span class="line">    result = some_function()</span><br><span class="line">    <span class="keyword">assert</span> result == <span class="string">'result'</span></span><br></pre></td></tr></table></figure><h2 id="mock扩展应用-性能测试解决方案之一"><a href="#mock扩展应用-性能测试解决方案之一" class="headerlink" title="mock扩展应用-性能测试解决方案之一"></a>mock扩展应用-性能测试解决方案之一</h2><ul><li>进行自服务器的压力测试方案</li><li>直接使用线上的后端服务进行压测<ul><li>优点：近线上状态，代价极小</li><li>缺点：线上子服务的稳定性，数据统计，引入脏数据等</li></ul></li><li>部署完整的后端测试环境、<ul><li>优点：与线上隔离；测试结果基本与线上环境一致，测试结果相对准确</li><li>缺点：部署成本极高，要保证子服务性能会造成的资源浪费</li></ul></li><li>部署部分子服务<ul><li>优点：与线上隔离；部署成本相对较小</li><li>缺点：测试结果有出处，后端性能可能是瓶颈</li></ul></li><li>使用测试平台mock后端接口数据<ul><li>优点：与线上隔离；</li><li>缺点：mock平台一般性能较弱，测试结果有出入；mock平台的逻辑规则会有一定学习成本（可以通过django写的mock服务）</li></ul></li><li>使用nginx cache mock子服务返回内容：<ul><li>优点：与线上隔离子服务返回内容与线上一致；可保证后端性能不是瓶颈</li><li>缺点：必须使用固定的一组请求（请求数量在几万的量级没有问题）</li></ul></li></ul><h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><ul><li>@patch 的路径一定要完整</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker下使用MySQL</title>
      <link href="/2019/05/23/docker%20%E4%B8%8B%E4%BD%BF%E7%94%A8mysql/"/>
      <url>/2019/05/23/docker%20%E4%B8%8B%E4%BD%BF%E7%94%A8mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="docker中搜索可用镜像"><a href="#docker中搜索可用镜像" class="headerlink" title="docker中搜索可用镜像"></a>docker中搜索可用镜像</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker search mysql</span><br></pre></td></tr></table></figure><h2 id="获取mysql镜像"><a href="#获取mysql镜像" class="headerlink" title="获取mysql镜像"></a>获取mysql镜像</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull mysql</span><br></pre></td></tr></table></figure><h2 id="运行docker下mysql"><a href="#运行docker下mysql" class="headerlink" title="运行docker下mysql"></a>运行docker下mysql</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 --restart=always  mysql</span><br><span class="line"><span class="meta">#</span> 创建容器的时候就指定utf8编码</span><br><span class="line"><span class="meta">$</span> docker run --name mysql_dev -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306  -d mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci </span><br><span class="line"><span class="meta">#</span> 以上参数定义</span><br><span class="line">  --name mysql  将容器命名为mysql，后面可以用这个name进行容器的启动暂停等操作</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 设置MySQL密码为123456</span><br><span class="line">  -d 此容器在后台运行,并且返回容器的ID</span><br><span class="line">  -i 以交互模式运行容器</span><br><span class="line">  -p 进行端口映射，格式为主机(宿主)端口:容器端口</span><br><span class="line">  --restart=always 当docker重启时，该容器自动重启</span><br></pre></td></tr></table></figure><h2 id="进入MySQL容器"><a href="#进入MySQL容器" class="headerlink" title="进入MySQL容器"></a>进入MySQL容器</h2>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker exec -ti mysql bash</span><br></pre></td></tr></table></figure><h2 id="MySQL中文乱码"><a href="#MySQL中文乱码" class="headerlink" title="MySQL中文乱码"></a>MySQL中文乱码</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ show variables like &apos;character_set%&apos;; # 查看mysql字符集</span><br></pre></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 修改/etc/mysql/my.cnf</span><br><span class="line"><span class="meta">#</span>在[]便签下添加如下参数配置</span><br><span class="line">[mysqld]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">character_set_server = utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">[mysql.server]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">[mysqld_safe]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br></pre></td></tr></table></figure><h2 id="Mysql授权用户"><a href="#Mysql授权用户" class="headerlink" title="Mysql授权用户"></a>Mysql授权用户</h2><p>老版MySQL创建数据库用户并授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on db_sonar.* to &apos;用户名&apos;@&apos;%&apos;identified by &apos;密码&apos; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><strong>新版的mysql将创建账户和赋予权限的方式分开了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建用户</span><br><span class="line">create user &apos;sonar&apos;@&apos;%&apos;identified by &apos;123456&apos;;</span><br><span class="line">// 修改权限</span><br><span class="line">grant all privileges on db_sonar.* to &apos;sonar&apos;@&apos;%&apos; with grant option;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL基础</title>
      <link href="/2019/05/20/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/05/20/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="WSL-UBUNTU"><a href="#WSL-UBUNTU" class="headerlink" title="WSL.UBUNTU"></a>WSL.UBUNTU</h1><h2 id="WSL安装mysql"><a href="#WSL安装mysql" class="headerlink" title="WSL安装mysql"></a>WSL安装mysql</h2><h3 id="更新apt源"><a href="#更新apt源" class="headerlink" title="更新apt源"></a>更新apt源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 备份源文件</span><br><span class="line"><span class="meta">$</span> sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="meta">#</span> 编辑源文件列表</span><br><span class="line"><span class="meta">$</span> sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="meta">#</span> 使用[国内镜像源](https://blog.csdn.net/xiangxianghehe/article/details/80112149)替换原声源</span><br><span class="line"><span class="meta">#</span> 更新apt</span><br><span class="line"><span class="meta">$</span> sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装MYSQL服务器版"><a href="#安装MYSQL服务器版" class="headerlink" title="安装MYSQL服务器版"></a>安装MYSQL服务器版</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt install mysql-server</span><br></pre></td></tr></table></figure><h3 id="启动MYSQL"><a href="#启动MYSQL" class="headerlink" title="启动MYSQL"></a>启动MYSQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mysql是rpm安装的</span><br><span class="line"><span class="meta">#</span>启动mysql</span><br><span class="line"><span class="meta">$</span> service mysqld start</span><br><span class="line"><span class="meta">#</span>关闭mysql</span><br><span class="line"><span class="meta">$</span> service mysqld stop</span><br><span class="line"><span class="meta">#</span> 二进制和源码安装的</span><br><span class="line"><span class="meta">#</span>启动mysql</span><br><span class="line"><span class="meta">$</span> /etc/init.d/mysqld start</span><br><span class="line"><span class="meta">#</span>关闭mysql</span><br><span class="line"><span class="meta">$</span> /etc/init.d/mysqld stop | /usr/bin/mysqladmin -u root -p shutdown</span><br><span class="line"><span class="meta">#</span>重启mysql    </span><br><span class="line"><span class="meta">$</span> /etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure><h3 id="MYSQL可能出现的问题"><a href="#MYSQL可能出现的问题" class="headerlink" title="MYSQL可能出现的问题"></a>MYSQL可能出现的问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)</span><br></pre></td></tr></table></figure><blockquote><p>方案1</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps -A|grep mysql</span><br><span class="line"><span class="meta">#</span> 显示类似：</span><br><span class="line"><span class="meta">$</span> 1829 ?        00:00:00 mysqld_safe</span><br><span class="line"><span class="meta">$</span> 1876 ?        00:00:31 mysqld</span><br><span class="line"><span class="meta">$</span> kill -9 1829</span><br><span class="line"><span class="meta">$</span> kill -9 1876</span><br><span class="line"><span class="meta">$</span> /etc/init.d/mysql restart</span><br><span class="line"><span class="meta">$</span> mysql -u root -p</span><br></pre></td></tr></table></figure><blockquote><p>方案2</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 先查看mysql是否已经启动</span><br><span class="line"><span class="meta">$</span> /etc/rc.d/init.d/mysqld status </span><br><span class="line"><span class="meta">#</span> 另外看看是不是权限问题.</span><br><span class="line"><span class="meta">$</span> chown -R mysql:mysql /var/lib/mysql</span><br><span class="line"><span class="meta">$</span> /etc/init.d/mysqld start</span><br><span class="line"><span class="meta">$</span> 启动 MySQL： [ 确定 ]</span><br><span class="line"><span class="meta">$</span> mysqladmin -uroot password '123456'</span><br><span class="line"><span class="meta">$</span> mysql -uroot -p</span><br></pre></td></tr></table></figure><blockquote><p>方案3</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_connections=1000 他说太多了，然后改成500也说多，无奈删之问题解决了。</span><br></pre></td></tr></table></figure><blockquote><p>方案4</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /var/lib/mysql </span><br><span class="line"><span class="meta">#</span> 所有文件权限 改成mysql.mysql</span><br></pre></td></tr></table></figure><blockquote><p>方案5</p></blockquote><p>摘要：解决不能通过mysql .sock连接MySQL问题 这个问题主要提示是，不能通过 ‘/tmp/mysql .sock’连到服务器，而php标准配置正是用过’/tmp/mysql .sock’，但是一些mysql 安装方法 将 mysql .sock放在/var/lib/mysql .sock或者其他的什么地方，你可以通过修改/etc/my.cnf文件来修正它，打开文件，可以看到如下的东东：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysql d] </span><br><span class="line">socket=/var/lib/mysql .sock </span><br><span class="line"><span class="meta">#</span> 改一下就好了，但也会引起其他的问题，如mysql 程序连不上了，再加一点： </span><br><span class="line">[mysql] </span><br><span class="line">socket=/tmp/mysql .sock </span><br><span class="line">或者还可以通过修改php.ini中的配置来使php用其他的mysql .sock来连，这个大家自己去找找</span><br><span class="line">或者用这样的方法:ln -s /var/lib/mysql /mysql .sock /tmp/mysql .sock</span><br></pre></td></tr></table></figure><h3 id="在windows下连接WSL中的MySQL"><a href="#在windows下连接WSL中的MySQL" class="headerlink" title="在windows下连接WSL中的MySQL"></a>在windows下连接WSL中的MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 当连接提示报错是因为MySQL把 Windows 下的程序的连接视为远程 MySQL 请求，若你使用的 MySQL 用户没有远程权限，则会出错</span><br><span class="line"><span class="meta">#</span> 解决方法，WSL进入mysql中 </span><br><span class="line"><span class="meta">$</span> use mysql;</span><br><span class="line"><span class="meta">$</span> update user set host = '%' where user = 'root';</span><br><span class="line"><span class="meta">$</span> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '' WITH GRANT OPTION;</span><br><span class="line"><span class="meta">$</span> FLUSH PRIVILEGES;</span><br><span class="line"><span class="meta">#</span> 现在就可以使用 root 账户连接，无密码</span><br></pre></td></tr></table></figure><h2 id="WSL安装java"><a href="#WSL安装java" class="headerlink" title="WSL安装java"></a>WSL安装java</h2><p>1、从官网下载tar.gz结尾的java压缩包，放到/opt/目录下解压<br>2、输入命令vim /etc/profile，打开环境变量配置文件在文件底部输入以下信息，并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/home/java/jdk1.8.0_131</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export JRE_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure><p>3、建立连接/usr/bin/java的超链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/java/jdk1.8.0_131/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure><p>4、配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/2019/04/23/dockerBasis/"/>
      <url>/2019/04/23/dockerBasis/</url>
      
        <content type="html"><![CDATA[<h1 id="docker基础"><a href="#docker基础" class="headerlink" title="docker基础"></a>docker基础</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><p><strong>启动容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run image [command] [ARG]</span><br></pre></td></tr></table></figure></li><li><p><strong>启动交互式容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -i -t IMAGE /bin/bash </span><br><span class="line"><span class="meta">$</span> docker run --name mysqltest -i -t centos:7 /bin/bash</span><br></pre></td></tr></table></figure></li><li><p><strong>查看容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker ps [-a] [-l] # -a 查看所有容器信息  -l 列出最新容器</span><br><span class="line"><span class="meta">$</span> docker inspect[] # 查看容器信息</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义容器名"><a href="#自定义容器名" class="headerlink" title="自定义容器名"></a>自定义容器名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run name = 自定义  -i -t IMAGE /bin/bash</span><br></pre></td></tr></table></figure><h2 id="重新启动停止的服务"><a href="#重新启动停止的服务" class="headerlink" title="重新启动停止的服务"></a>重新启动停止的服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker start [-i] 容器名</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker rm -a</span><br></pre></td></tr></table></figure><h2 id="以守护形式运行容器"><a href="#以守护形式运行容器" class="headerlink" title="以守护形式运行容器"></a>以守护形式运行容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTRL + Q   OR   CTRL + P</span><br></pre></td></tr></table></figure><h2 id="启用守护式容器"><a href="#启用守护式容器" class="headerlink" title="启用守护式容器"></a>启用守护式容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker run -d 镜像名 [command] [ARG]</span><br></pre></td></tr></table></figure><h2 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker logs [-f] [-t] [--fail] 容器名</span><br><span class="line">-f-- follows = true | fales 默认为fales</span><br><span class="line">-t-- timestamps = true | fals 默认为fales</span><br><span class="line">--fail = 'all'</span><br></pre></td></tr></table></figure><h2 id="查看容器进程"><a href="#查看容器进程" class="headerlink" title="查看容器进程"></a>查看容器进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker top 容器名</span><br></pre></td></tr></table></figure><h2 id="运行的容器中启用新的进程"><a href="#运行的容器中启用新的进程" class="headerlink" title="运行的容器中启用新的进程"></a>运行的容器中启用新的进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker exec [-d] [-i] [-t] 容器名 [commend] [ARG]</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker stop 容器名</span><br><span class="line"><span class="meta">$</span> docker kill 容器名</span><br></pre></td></tr></table></figure><h2 id="设置容器的端口映射"><a href="#设置容器的端口映射" class="headerlink" title="设置容器的端口映射"></a>设置容器的端口映射</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 大写P表示随机选择一个端口映射到容器内部开放的网络端口上</span><br><span class="line"><span class="meta">$</span> docker run -P -i -t ubuntu /bin/bash</span><br><span class="line"><span class="meta">#</span> 小写p指定要映射的端口</span><br><span class="line"><span class="meta">$</span> docker run -p 80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="meta">$</span> docker run -p 8080:80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="meta">$</span> docker run -p 0.0.0.0:8080:80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="meta">#</span> 绑定本机的任意端口到容器的80端口，随机分配一个端口</span><br><span class="line"><span class="meta">$</span> docker run -p 0.0.0.0::80 -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h1 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h1><p>##　列出镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker images [options] [REFOSITORY]</span><br><span class="line">-a显示所有镜像</span><br><span class="line">-f过滤条件</span><br><span class="line">-q只显示images veid</span><br></pre></td></tr></table></figure><p>##　查看镜像信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker inspect 容积或镜像ID</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker rmi [OPTION] IMAGE [IMAGE]</span><br><span class="line">-f --force = false</span><br><span class="line">-no -prane = fales</span><br></pre></td></tr></table></figure><h2 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker rmi -f image_id</span><br></pre></td></tr></table></figure><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker search IMAGE</span><br></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull [OPTION] NAME [:TAG]</span><br><span class="line"><span class="meta">#</span> 例如拉取ubuntu:16.04镜像</span><br><span class="line"><span class="meta">$</span> docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><h3 id="docker问题汇总"><a href="#docker问题汇总" class="headerlink" title="docker问题汇总"></a>docker问题汇总</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bean Shell基础</title>
      <link href="/2018/12/11/Bean%20Shell/"/>
      <url>/2018/12/11/Bean%20Shell/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Bean-Shell"><a href="#什么是Bean-Shell" class="headerlink" title="什么是Bean Shell"></a>什么是Bean Shell</h2><ul><li>BeanShell是一种完全符合Java语法规范的脚本语言，并且有拥有自己的一些语法和方法。</li><li>BeanShell是一种松散类型的脚本语言（这点和JS）类似。</li><li>BeanShell是用Java写成的，一个小型的、免费的、可下载的、嵌入式的Java源代码解释器，具有对象脚本语言特性，非常精简的解释器。</li><li>BeanShell执行标准的Java语句和表达式，另外包括一些脚本命令和语法。</li></ul><h2 id="Jmeter有哪些Bean-Shell"><a href="#Jmeter有哪些Bean-Shell" class="headerlink" title="Jmeter有哪些Bean Shell"></a>Jmeter有哪些Bean Shell</h2><ul><li>定时器：　　BeanShell Timer</li><li>前置处理器：BeanShell PreProcessor</li><li>采样器：　　BeanShell Sampler</li><li>后置处理器：BeanShell PostProcessor</li><li>断言：　　　BeanShell断言</li><li>监听器：　　BeanShell Listener</li></ul><h2 id="BeanShell的用法"><a href="#BeanShell的用法" class="headerlink" title="BeanShell的用法"></a>BeanShell的用法</h2><h2 id="BeanShell常用内置变量"><a href="#BeanShell常用内置变量" class="headerlink" title="BeanShell常用内置变量"></a>BeanShell常用内置变量</h2><p>JMeter在它的BeanShell中内置了变量，用户可以通过这些变量与JMeter进行交互，其中主要的变量及其使用方法如下:</p><ul><li><p>log：写入信息到jmeber.log文件，使用方法：log.info(“This is log info!”);</p></li><li><p>ctx：该变量引用了当前线程的上下文，使用方法可参 org.apache.jmeter.threads.JMeterContext。</p></li><li><p>vars - (JMeterVariables)：操作jmeter变量，这个变量实际引用了JMeter线程中的局部变量容器（本质上是Map），它是测试用例与BeanShell交互的桥梁，常用方法：<br>　　 　     a) vars.get(String key)：从jmeter中获得变量值<br>　　  　b) vars.put(String key，String value)：数据存到jmeter变量中</p></li><li><p>props - (JMeterProperties - class java.util.Properties)：操作jmeter属性，该变量引用了JMeter的配置信息，可以获取Jmeter的属性，它的使用方法与vars类似，但是只能put进去String类型的值，而不能是一个对象。对应于java.util.Properties。<br>　　　　a) props.get(“START.HMS”);　注：START.HMS为属性名，在文件jmeter.properties中定义<br>　　　　b) props.put(“PROP1”,”1234”); </p></li><li><p>prev - (SampleResult)：获取前面的sample返回的信息，常用方法：<br>　　　　a) getResponseDataAsString()：获取响应信息<br>　　　　b) getResponseCode() ：获取响应code</p></li><li><p>sampler - (Sampler)：gives access to the current sampler</p></li></ul><h2 id="beanshell-usage"><a href="#beanshell-usage" class="headerlink" title="beanshell-usage"></a>beanshell-usage</h2><ol><li><p>添加http请求，数据参数化</p></li><li><p>添加beanshellpreprcessor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vars.put("user","admin123");//定义请求数据中的参数:用户名</span><br><span class="line">vars.put("pass","admin123");//定义请求数据中的参数：密码</span><br><span class="line">save=vars.put("save","false");//定义请求数据中的参数：是否保存登录信息</span><br></pre></td></tr></table></figure></li><li><p>添加beanshell断言</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username=vars.get("user");//获取参数中的用户名信息</span><br><span class="line">log.info("用户名:"+username);//打印用户名</span><br></pre></td></tr></table></figure></li><li><p>添加beanshellpostprocessor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resp_text=prev.getResponseDataAsString();//获取请求的响应结果</span><br><span class="line">log.info(resp_text);//打印响应结果</span><br><span class="line">log.info(resp_code);//打印响应代码</span><br><span class="line">resp_mes=prev.getResponseMessage();//获取响应结果的消息</span><br><span class="line">log.info(resp_mes);//打印响应结果的消息</span><br><span class="line">pro=props.get("START.HMS");//获取START.HMS的属性信息</span><br><span class="line">log.info(pro);//打印START.HMS的属性信息</span><br></pre></td></tr></table></figure></li><li><p>自定义函数：添加beanshell sample，编写脚本</p></li><li><p>添加debug Sample,用于调试脚本</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jmeter基础</title>
      <link href="/2018/11/27/jmeter/"/>
      <url>/2018/11/27/jmeter/</url>
      
        <content type="html"><![CDATA[<h2 id="安装jmeter"><a href="#安装jmeter" class="headerlink" title="安装jmeter"></a>安装jmeter</h2><p>下载：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">https://jmeter.apache.org/download_jmeter.cgi</a></p><h2 id="jmeter工作原理"><a href="#jmeter工作原理" class="headerlink" title="jmeter工作原理"></a>jmeter工作原理</h2><p>jmeter可以作为web服务器与浏览器直接的代理网关，以便捕获浏览器的请求和web服务器的响应，如此就可以很容易地生成性能测试脚本。有了性能测试脚本，jmeter就可以通过线程来模拟真实用户对web服务器的访问压力，</p><p>jmeter的基本原理是建立一个线程池，多线程运行取样器产生大量的负载，再运行过程中通过断言来验证结果的准确性，通过监听器来记录测试结果。</p><h2 id="jmeter用法"><a href="#jmeter用法" class="headerlink" title="jmeter用法:"></a>jmeter用法:</h2><p>添加线程组:      测试计划 - 添加 - Threads<br>添加请求:        线程组 - 添加 - Sample - HTTP请求<br>查看结果:        线程组 - 添加 - 监听器 - 查看结果树</p><h2 id="Jmeter常用插件："><a href="#Jmeter常用插件：" class="headerlink" title="Jmeter常用插件："></a>Jmeter常用插件：</h2><table><thead><tr><th>插件名</th><th>作用</th></tr></thead><tbody><tr><td>Active Threads Over Time</td><td>活动线程随时间的变化</td></tr><tr><td>Connect Times Over Time</td><td>连接时间</td></tr><tr><td>Response Times Over Time</td><td>响应时间</td></tr><tr><td>Transactions per Second</td><td>每秒事务数</td></tr><tr><td>PerfMon Metrics Collector</td><td>性能指标收集器</td></tr><tr><td>Response Times Percentiles</td><td>响应时间百分位数</td></tr><tr><td>Response Latencies Over Time</td><td>响应延迟时间</td></tr><tr><td>Response Times vs Threads</td><td>响应时间vs线程</td></tr><tr><td>Transaction Throughput vs Threads</td><td>事务吞吐量vs线程</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq自启设置</title>
      <link href="/2018/11/23/rabbitmq%E8%87%AA%E5%90%AF%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/11/23/rabbitmq%E8%87%AA%E5%90%AF%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ自启设置"><a href="#RabbitMQ自启设置" class="headerlink" title="RabbitMQ自启设置"></a>RabbitMQ自启设置</h1><ul><li>添加自启动脚本：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/init.d</span><br><span class="line"><span class="meta">$</span> vim rabbitmq</span><br></pre></td></tr></table></figure><ul><li><p>输入如下内容：</p><p><strong>vim下粘贴脚本的需要先进入编辑（点击i或insert）模式，然后右键粘贴</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">. /etc/rc.d/init.d/functions</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span> 脚本名称</span><br><span class="line">prog=rabbitmq</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> RABBITMQ_HOME为RabbitMQ的安装目录</span><br><span class="line">RABBITMQ_HOME=/usr/local/rabbitmq</span><br><span class="line">export RABBITMQ_HOME</span><br><span class="line"></span><br><span class="line">case "$1" in</span><br><span class="line">    start)</span><br><span class="line">    echo "Starting RabbitMQ ..."</span><br><span class="line">    $RABBITMQ_HOME/ctlscript.sh start</span><br><span class="line">    ;;</span><br><span class="line">    </span><br><span class="line">stop)</span><br><span class="line">    echo "Stopping RabbitMQ ..."</span><br><span class="line">    $RABBITMQ_HOME/ctlscript.sh stop</span><br><span class="line">    ;;</span><br><span class="line"> </span><br><span class="line">restart)</span><br><span class="line">    echo "Restarting RabbitMQ ..."</span><br><span class="line">    $RABBITMQ_HOME/ctlscript.sh restart</span><br><span class="line">    ;;</span><br><span class="line">    </span><br><span class="line">*)</span><br><span class="line">    echo "Usage: $prog &#123;start|stop|restart&#125;"</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li>修改文件为可执行文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chmod a+x rabbitmq</span><br></pre></td></tr></table></figure><ul><li>查看本机开机自启情况：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chkconfig --list</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use 'systemctl list-unit-files'.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      'systemctl list-dependencies [target]'.</span><br><span class="line"></span><br><span class="line">netconsole      0:off   1:off   2:off   3:off   4:off   5:off   6:off</span><br><span class="line">network         0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br><span class="line">rabbitmq        0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br><span class="line">redisd          0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br></pre></td></tr></table></figure><ul><li>如rabbitmq没有在自启列表中，则添加到系统启动队列中：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chkconfig --add rabbitmq</span><br></pre></td></tr></table></figure><ul><li><p>重新检查RabbitMQ开机启动情况，若成功，则应显示如下内容：</p><p><strong><em>rabbitmq 0:off 1:off 2:on 3:on 4:on 5:on 6:off</em></strong></p></li><li><p>使用下列命令对RabbitMQ进行重启、停止、启动：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> service rabbitmq restart/stop/start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nmon监控linux系统资源</title>
      <link href="/2018/10/29/nmon%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/10/29/nmon%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="nmon简介"><a href="#nmon简介" class="headerlink" title="nmon简介"></a>nmon简介</h2><p>nmon是一个分析aix和linux性能的免费工具（其主要是ibm为自己的aix操作系统开发的，但是也可以应用在linux操作系统上）<br>nmon_analyser：是nmon的一个工具可以把nmon生成的报告转化成excel报表的形式供我们查看。两者的结合可以把各个硬件的监控信息生成形象化的分析报表图<br>下载地址：<a href="http://nmon.sourceforge.net/pmwiki.php?n=Site.Download" target="_blank" rel="noopener">http://nmon.sourceforge.net/pmwiki.php?n=Site.Download</a></p><h2 id="安装使用方法"><a href="#安装使用方法" class="headerlink" title="安装使用方法"></a>安装使用方法</h2><p>1.用root用户登录Linux操作系统，建立目录：#mkdir /opt/nmon<br>2.切换路径：cd /opt/nmon<br>3.用命令rz将下载的nmon工具上传至Linux服务器 目录/opt/nmon下<br>4.修改tar包权限：#chmod +x nmon_linux_14i_newer_Linux_versions.tar.gz<br>5.解压文件：#tar -xzvf nmon_linux_14i_newer_Linux_versions.tar.gz<br>5.执行授权命令：#chmod +x nmon_linux_x86<br>6.更改名字 : # mv nmon_linux_x86 nmon<br>7.运行nmon命令: # ./nmon<br>8.敲c:CPU相关资源信息<br>9.敲m:memory相关资源信息<br>10.敲d:disk磁盘相关信息<br>11.敲n:network相关信息<br>12.创建一个存放结果的文件夹：mkdir /opt/nmon/log<br>13.监控系统资源：./nmon -f -N -m /opt/nmon/log/ -s 10 -c 60,每10秒采集一次数据，采集60次<br>14.使用命令sz，将Linux系统中的文件下载到Windows本地<br>15.解压nmon_analyser_v51_2.zip，打开nmon analyser v51_2.xlsm，启用宏，方可使用<br>16.点击Analyser nmon data,选择已经下载好的结果文件，自动生成报告。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python常用API</title>
      <link href="/2018/10/13/python%E5%B8%B8%E7%94%A8API/"/>
      <url>/2018/10/13/python%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h2 id="heapq"><a href="#heapq" class="headerlink" title="heapq"></a>heapq</h2><p><strong>使用heapq模块的nlargest()和nsmallest()来查找最大或最小的N个元素</strong></p><table><thead><tr><th align="left">方法名</th><th align="left">简介</th></tr></thead><tbody><tr><td align="left">nsmallest(n,iterable,key=None)</td><td align="left">获取列表里面最小的几个值</td></tr><tr><td align="left">nlargest(n,iterable,key=None)</td><td align="left">获取列表里面最大的几个值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Import heapq</span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-78</span>,<span class="number">23</span>,<span class="number">9</span>,<span class="number">45</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>,nums)) <span class="comment"># 获取列表里面最大的几个值</span></span><br><span class="line">print(heapq.nsmallest(<span class="number">3</span>,nums))  <span class="comment"># 获取列表里面最小的几个值</span></span><br><span class="line">portfolio=[</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'IBM'</span>,<span class="string">'shares'</span>:<span class="number">100</span>,<span class="string">'price'</span>:<span class="number">91.1</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'AAPL'</span>,<span class="string">'shares'</span>:<span class="number">50</span>,<span class="string">'price'</span>:<span class="number">543.22</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'FB'</span>,<span class="string">'shares'</span>:<span class="number">200</span>,<span class="string">'price'</span>:<span class="number">21.09</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'HPQ'</span>,<span class="string">'shares'</span>:<span class="number">35</span>,<span class="string">'price'</span>:<span class="number">31.75</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'YHOO'</span>,<span class="string">'shares'</span>:<span class="number">45</span>,<span class="string">'price'</span>:<span class="number">16.35</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'ACME'</span>,<span class="string">'shares'</span>:<span class="number">75</span>,<span class="string">'price'</span>:<span class="number">115.65</span>&#125;</span><br><span class="line">]</span><br><span class="line">Cheap = heapq.nsmallest(<span class="number">3</span>,portfolio,key=lambdas:s[<span class="string">'shares'</span>])</span><br><span class="line">Expensive = heapq.nlargest(<span class="number">3</span>,portfolio,key=lambdas:s[<span class="string">'price'</span>])</span><br><span class="line">print(cheap)</span><br></pre></td></tr></table></figure><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 获得列表出现次数最多的元素</span></span><br><span class="line">words = [</span><br><span class="line">    <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>,</span><br><span class="line">    <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'not'</span>, <span class="string">'around'</span>,</span><br><span class="line">    <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">"don't"</span>, <span class="string">'look'</span>, <span class="string">'around'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>,</span><br><span class="line">    <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">"you're"</span>, <span class="string">'under'</span></span><br><span class="line">]</span><br><span class="line">counter = Counter(words)</span><br><span class="line">print(counter.most_common(<span class="number">3</span>)) <span class="comment"># 获得出现次数最多的三个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="string">'eyes'</span>, <span class="number">8</span>), (<span class="string">'the'</span>, <span class="number">5</span>), (<span class="string">'look'</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><h4 id="namedtuple-命名元组"><a href="#namedtuple-命名元组" class="headerlink" title="namedtuple - 命名元组"></a>namedtuple - 命名元组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="comment"># namedtuple你可以像使用对象属性那样去访问数据</span></span><br><span class="line">Book = namedtuple(<span class="string">'Book'</span>, [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'count'</span>])</span><br><span class="line"></span><br><span class="line">book1 = Book(name=<span class="string">'python'</span>, price=<span class="number">100.0</span>, count=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> book1</span><br><span class="line"><span class="keyword">print</span> book1.name</span><br><span class="line"><span class="keyword">print</span> book1.price</span><br><span class="line"><span class="keyword">print</span> book1.count</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>解析HTML</p><p> <strong>select()方法寻找元素：</strong></p><table><thead><tr><th><strong>传递给</strong> select()方法的选择器</th><th>将匹配…</th></tr></thead><tbody><tr><td>soup.select(‘div’)</td><td>所有名为&lt;div&gt;的元素</td></tr><tr><td>soup.select(‘#author’)</td><td>带有 id 属性为 author 的元素</td></tr><tr><td>soup.select(‘.notice’)</td><td>所有使用 CSS class 属性名为 notice 的元素</td></tr><tr><td>soup.select(‘div span’)</td><td>所有在&lt;div&gt;元素之内的&lt;span&gt;元素</td></tr><tr><td>soup.select(‘div &gt; span’)</td><td>所有直接在&lt;div&gt;元素之内的&lt;span&gt;元素，中间没有其他元素</td></tr><tr><td>soup.select(‘input[name]’)</td><td>所有名为&lt;input&gt;，并有一个 name 属性，其值无所谓的元素</td></tr><tr><td>soup.select(‘input[type=”button”]’)</td><td>所有名为&lt;input&gt;，并有一个 type 属性，其值为 button 的元素</td></tr></tbody></table><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ul><li><strong>loads()</strong> - 将json数据转化成dict数据</li><li><strong>dumps()</strong> - 将dict数据转化成json数据</li><li><strong>load()</strong> - 读取json文件数据，转成dict数据</li><li><strong>dump()</strong> - 将dict数据转化成json数据后写入json文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dict字典转json数据</span></span><br><span class="line">dt = &#123;<span class="string">'name'</span>:<span class="string">'tom'</span>,<span class="string">'age'</span>:<span class="string">'11'</span>&#125;</span><br><span class="line">js = json.dumps(dt)</span><br><span class="line"><span class="comment"># json数据转dict字典</span></span><br><span class="line">d = json.loads(js)</span><br></pre></td></tr></table></figure><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>抛出异常使用 raise 语句。在代码中，raise 语句包含以下部分：</p><ul><li>raise 关键字</li><li>对 Exception 函数的调用</li><li>传递给 Exception 函数的字符串，包含有用的出错信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raiseException(<span class="string">'Thisistheerrormessage.'</span>)</span><br></pre></td></tr></table></figure><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                        format=<span class="string">'%(asctime)s-%(levelname)s-%(message)s'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.debug(<span class="string">'Startofprogram'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.debug(<span class="string">'Endofprogram'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简介</th></tr></thead><tbody><tr><td>filename</td><td>指定日志文件名</td></tr><tr><td>filemode</td><td>和file函数意义相同，指定日志文件的打开模式，’w’或’a’</td></tr><tr><td>format</td><td>指定输出的格式和内容，format可以输出很多有用信息，如上例所示</td></tr><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径，其实就是sys.argv[0]</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程ID</td></tr><tr><td>%             (threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr><tr><td>datefmt</td><td>指定时间格式，同time.strftime()</td></tr><tr><td>level</td><td>设置日志级别，默认为logging.WARNING</td></tr><tr><td>stream</td><td>指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</td></tr></tbody></table><p>日志级别:</p><table><thead><tr><th>级别</th><th>日志函数</th><th>描述</th></tr></thead><tbody><tr><td>DEBUG</td><td>logging.debug()</td><td>最低级别。用于小细节。通常只有在诊断问题时，你才会关心这些消息</td></tr><tr><td>INFO</td><td>logging.info()</td><td>用于记录程序中一般事件的信息，或确认一切工作正常</td></tr><tr><td>WARNING</td><td>logging.warning()</td><td>用于表示可能的问题，它不会阻止程序的工作，但将来可能会</td></tr><tr><td>ERROR</td><td>logging.error()</td><td>用于记录错误，它导致程序做某事失败</td></tr><tr><td>CRITICAL</td><td>logging.critical()</td><td>最高级别。用于表示致命的错误，它导致或将要导致程序完全停止工作</td></tr></tbody></table><p>禁用日志:</p><p>在调试完程序后，你可能不希望所有这些日志消息出现在屏幕上。logging.disable() 函数禁用了这些消息，这样就不必进入到程序中，手工删除所有的日志调用。只要向 logging.disable() 传入一个日志级别，它就会禁止该级别和更低级别的所有日志消息。所以，如果想要禁用所有日志，只要在程序中添加 logging. disable（logging.CRITICAL）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶</title>
      <link href="/2018/10/12/python%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/10/12/python%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_bub</span><span class="params">(origin_items, comp=lambda x, y : x &gt; y )</span>:</span></span><br><span class="line">    items = origin_items</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(items) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(items) - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[j+<span class="number">1</span>]):</span><br><span class="line">                items[j], items[j+<span class="number">1</span>] = items[j+<span class="number">1</span>], items[j]</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(origin_items, comp=lambda x, y : x &lt; y )</span>:</span></span><br><span class="line">    items = origin_items</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(items) - <span class="number">1</span>):</span><br><span class="line">        min_items = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(items)):</span><br><span class="line">            <span class="keyword">if</span> comp(items[j], items[min_items]):</span><br><span class="line">                min_items = j</span><br><span class="line">        items[i], items[min_items] = items[min_items], items[i]</span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><h2 id="生成式语法"><a href="#生成式语法" class="headerlink" title="生成式语法"></a>生成式语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prices = &#123;</span><br><span class="line">    <span class="string">'AAPL'</span>: <span class="number">191.88</span>,</span><br><span class="line">    <span class="string">'GOOG'</span>: <span class="number">1186.96</span>,</span><br><span class="line">    <span class="string">'IBM'</span>: <span class="number">149.24</span>,</span><br><span class="line">    <span class="string">'ORCL'</span>: <span class="number">48.44</span>,</span><br><span class="line">    <span class="string">'ACN'</span>: <span class="number">166.89</span>,</span><br><span class="line">    <span class="string">'FB'</span>: <span class="number">208.09</span>,</span><br><span class="line">    <span class="string">'SYMC'</span>: <span class="number">21.29</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 用股票价格大于100元的股票构造一个新的字典</span></span><br><span class="line">new_prices = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> prices.items() <span class="keyword">if</span> value &gt; <span class="number">100</span>&#125;</span><br><span class="line">print(new_prices)</span><br></pre></td></tr></table></figure><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><ul><li>穷举法 - 又称为暴力破解法，对所有的可能性进行验证，直到找到正确答案。</li><li>贪婪法 - 在对问题求解时，总是做出在当前看来</li><li>最好的选择，不追求最优解，快速找到满意解。</li><li>分治法 - 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题，直到可以直接求解的程度，最后将子问题的解进行合并得到原问题的解。</li><li>回溯法 - 回溯法又称为试探法，按选优条件向前搜索，当搜索到某一步发现原先选择并不优或达不到目标时，就退回一步重新选择。</li><li>动态规划 - 基本思想也是将待求解问题分解成若干个子问题，先求解并保存这些子问题的解，避免产生大量的重复运算。</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>摘抄自：<a href="http://funhacks.net/2017/01/17/singleton/" target="_blank" rel="noopener">http://funhacks.net/2017/01/17/singleton/</a></p><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场</p><p>在 Python 中，我们可以用多种方法来实现单例模式：</p><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.pyclass </span></span><br><span class="line">My_Singleton(object):    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span>        </span><br><span class="line">passmy_singleton = My_Singleton()</span><br></pre></td></tr></table></figure><p>将上面的代码保存在文件 mysingleton.py中，然后这样使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singletonmy_singleton.foo()</span><br></pre></td></tr></table></figure><h3 id="使用-new"><a href="#使用-new" class="headerlink" title="使用 __new__"></a>使用 <code>__new__</code></h3><p>为了使类只能出现一个实例，我们可以使用 <code>__new__</code>来控制实例的创建过程，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class="line">        <span class="keyword">return</span> cls._instance  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span>  </span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。</p><p>执行情况如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>one = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>two = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one == two</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one <span class="keyword">is</span> two</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(one), id(two)</span><br><span class="line">(<span class="number">4303862608</span>, <span class="number">4303862608</span>)</span><br></pre></td></tr></table></figure><h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><p>我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line"><span class="meta">    @wraps(cls)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在上面，我们定义了一个装饰器 <code>singleton</code>，它返回了一个内部函数 <code>getinstance</code>，该函数会判断某个类是否在字典 <code>instances</code> 中，如果不存在，则会将 <code>cls</code> 作为 key，<code>cls(*args, **kw)</code> 作为 value 存到 <code>instances</code> 中，否则，直接返回 <code>instances[cls]</code></p><h3 id="使用-metaclass"><a href="#使用-metaclass" class="headerlink" title="使用 metaclass"></a>使用 metaclass</h3><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p><ul><li>拦截类的创建</li><li>修改类的定义</li><li>返回修改后的类</li></ul><p>使用元类实现单例模式的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="string">"""自定义元类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        cls.__instance = <span class="literal">None</span></span><br><span class="line">        cls.__lock = threading.Lock()</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> cls.__lock:</span><br><span class="line">                <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    cls.__instance = super().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">President</span><span class="params">(metaclass=SingletonMeta)</span>:</span></span><br><span class="line">    <span class="string">"""总统(单例类)"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器就是用于迭代操作（for 循环）的对象，它像列表一样可以迭代获取其中的每一个元素，任何实现了 <code>__next__</code> 方法的对象都可以称为迭代器</p><p>以斐波那契数列为例来实现一个迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""迭代器"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        self.idx = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.idx &lt; self.num:</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.idx += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> self.a</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>普通函数用 <code>return</code> 返回一个值，和 Java 等其他语言是一样的，然而在 Python 中还有一种函数，用关键字 <code>yield</code> 来返回值，这种函数叫生成器函数，函数被调用时会返回一个生成器对象，生成器本质上还是一个迭代器，也是用在迭代操作中，因此它有和迭代器一样的特性，唯一的区别在于实现方式上不一样，后者更加简洁</p><p>以斐波那契数列为例来实现一个生成器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""生成器"""</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(num):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line">a = fib(<span class="number">6</span>)</span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> a])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)) <span class="comment"># 使用()返回生成器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(g)</span><br><span class="line">&lt;type <span class="string">'generator'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment"># 使用[]返回列表对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(l)</span><br><span class="line">&lt;type <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>Python中实现并发编程的三种方案：多线程、多进程和异步I/O。并发编程的好处在于可以提升程序的执行效率以及改善用户体验；坏处在于并发的程序不容易开发和调试，同时对其他程序来说它并不友好</p><p>进程和线程的区别和联系</p><ul><li>进程 - 操作系统分配内存的基本单位 - 一个进程可以包含一个或多个线程</li><li>线程 - 操作系统分配CPU的基本单位</li></ul><p>并发编程（concurrent programming）</p><ul><li>提升执行性能 - 让程序中没有因果关系的部分可以并发的执行</li><li>改善用户体验 - 让耗时间的操作不会造成程序的假死</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象</title>
      <link href="/2018/10/12/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/10/12/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>参考自：<a href="https://github.com/Renskk/Python-100-Days/blob/master/Day16-20/16-20.Python语言进阶.md" target="_blank" rel="noopener">https://github.com/Renskk/Python-100-Days/blob/master/Day16-20/16-20.Python%E8%AF%AD%E8%A8%80%E8%BF%9B%E9%98%B6.md</a></p><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><ul><li>单一职责原则 （<strong>S</strong>RP）- 一个类只做该做的事情（类的设计要高内聚）</li><li>开闭原则 （<strong>O</strong>CP）- 软件实体应该对扩展开发对修改关闭</li><li>依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化）</li><li>里氏替换原则（<strong>L</strong>SP） - 任何时候可以用子类对象替换掉父类对象</li><li>接口隔离原则（<strong>I</strong>SP）- 接口要小而专不要大而全（Python中没有接口的概念）</li><li>合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码</li><li>最少知识原则（迪米特法则，Lo<strong>D</strong>）- 不要给没有必然联系的对象发消息</li></ul><blockquote><p>说明：上面加粗的字母放在一起称为面向对象的<strong>SOLID</strong>原则。</p></blockquote><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景，装饰器是解决这类问题的绝佳设计。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。 </p><p>引用自：<a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">https://foofish.net/python-decorator.html</a></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 访问器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;self._name&#125;</span>今年<span class="subst">&#123;self._age&#125;</span>岁！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    person = Person(<span class="string">'赵四'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br></pre></td></tr></table></figure><h2 id="slots"><a href="#slots" class="headerlink" title="_slots_"></a>_<em>slots_</em></h2><p>在类中定义__slots__变量来进行限定自定义类型的对象只能绑定某些属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">'_name'</span>, <span class="string">'_age'</span>, <span class="string">'_gender'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line">    <span class="comment"># 访问器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self._age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;self._name&#125;</span>今年<span class="subst">&#123;self._age&#125;</span>岁！'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    person = Person(<span class="string">'赵四'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># AttributeError: 'Person' object has no attribute 'sex'</span></span><br><span class="line">    person.sex = <span class="string">'女'</span></span><br><span class="line">    print(person.sex)</span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>静态方法是属于这个类，但不属于这个类的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, nationality)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.nationality = nationality</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_chinese</span><span class="params">(nationality)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> nationality == <span class="string">'chinese'</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>, <span class="subst">&#123;self.age&#125;</span>years is <span class="subst">&#123;self.nationality&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Test.is_chinese(<span class="string">'chinese'</span>):</span><br><span class="line">        print(<span class="string">'China'</span>)</span><br><span class="line">        print(Test(<span class="string">'tom'</span>, <span class="number">12</span>, <span class="string">'chinese'</span>).play())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Foreign'</span>)</span><br></pre></td></tr></table></figure><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>Python可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""数字时钟"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(cls)</span>:</span></span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""走字"""</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示时间"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%02d:%02d:%02d'</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="类、静态、实例方法区别"><a href="#类、静态、实例方法区别" class="headerlink" title="类、静态、实例方法区别"></a>类、静态、实例方法区别</h2><p>类方法无论是否为实例对象调用，都属于类的方法</p><p>静态方法无论是否为实例对象调用，都属于类的函数</p><p>实例方法当调用对象为类的实例时，它属于类的方法，反之则为函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># return self.b()# 静态方法可以使用self.函数名在类中调研</span></span><br><span class="line">        print(<span class="string">'这是实例函数'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'这是静态方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># print('这是类方法')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    t = Test()</span><br><span class="line">    print(type(t.a))<span class="comment"># &lt;class 'method'&gt;</span></span><br><span class="line">    print(type(Test.a))<span class="comment"># &lt;class 'function'&gt;</span></span><br><span class="line">    Test.a(t)<span class="comment"># 这是实例函数</span></span><br><span class="line">    Test.a(<span class="string">'hello'</span>)<span class="comment"># 这是实例函数</span></span><br><span class="line">    print(type(Test.b))<span class="comment"># &lt;class 'function'&gt;</span></span><br><span class="line">    print(type(t.b))<span class="comment"># &lt;class 'function'&gt;</span></span><br><span class="line">    print(type(Test.c))<span class="comment"># &lt;class 'method'&gt;</span></span><br><span class="line">    print(type(t.c))<span class="comment"># &lt;class 'method'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>一个类使用另外的类的非私有的属性和方法的时候，可以通过上面的方式，实现类的继承，来达到代码的复用</p><p>再有多个父类时如果父类里面有初始化属性，需要通过父类名._<em>init_</em>(self,参数列表)的方法实现属性的命名</p><p>在只有一个父类的情况下，还可以使用super()的方法调用父类的方法，和上一种方法的区别是super()只是一个对象，不需要再参数类别中添加self</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, sno)</span>:</span></span><br><span class="line">        super().__init__(name, age, sex)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.sno = sno</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'学生信息：\n学号：<span class="subst">&#123;self.sno&#125;</span>\n姓名：<span class="subst">&#123;self.name&#125;</span>'</span></span><br><span class="line">              <span class="string">f'\n年龄：<span class="subst">&#123;self.age&#125;</span>\n性别：<span class="subst">&#123;self.sex&#125;</span>\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, tno)</span>:</span></span><br><span class="line">        super().__init__(name, age, sex)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.tno = tno</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'老师信息：\n编号：<span class="subst">&#123;self.tno&#125;</span>\n姓名：<span class="subst">&#123;self.name&#125;</span>'</span></span><br><span class="line">              <span class="string">f'\n年龄：<span class="subst">&#123;self.age&#125;</span>\n性别：<span class="subst">&#123;self.sex&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    student(<span class="string">'tom'</span>, <span class="number">12</span>, <span class="string">'男'</span>, <span class="string">'001'</span>).show()</span><br><span class="line">    teacher(<span class="string">'tim'</span>, <span class="number">32</span>, <span class="string">'男'</span>, <span class="string">'100'</span>).show()</span><br></pre></td></tr></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>性能测试基础</title>
      <link href="/2018/10/11/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/10/11/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="性能测试分类"><a href="#性能测试分类" class="headerlink" title="性能测试分类"></a>性能测试分类</h2><ul><li>负载测试（Load testing）<ul><li>负载测试是不断增加系统的负载，直到负载达到阈值——评估系统在预期工作负载下的性能的测试。</li></ul></li><li>压力测试（Stress Testing）<ul><li>压力测试是指当硬件资源如cpu、内存、磁盘空间等不充足时对软件稳定性的检查。</li><li>压力测试属于负面测试（Negative testing），使大量并发用户/进程加载软件以使系统硬件资源不能应付。这个测试也被称为是疲劳测试（Fatigue testing），通过超出其能力的测试来捕获应用程序的稳定性。</li></ul></li><li>尖峰测试（Spike testing）<ul><li>尖峰测试是在目标系统经受短时间内反复增加工作负载，以至超出预期生产操作的负载量时，分析系统的行为，验证其性能特征。它还包括检查应用程序是否可以从突然增加的超预期负荷中恢复出来的测试。</li></ul></li><li>可扩展性测试（Scalability Testing）<ul><li>可扩展性测试是一种非功能的测试，它测试软件应用程序以确定所有非功能能力的扩展能力，如用户负载支持、事务数量、数据量等。</li></ul></li><li>容量测试（Volume testing）<ul><li>容量测试是一种非功能的测试，它通过向应用程序中添加大量的数据来实现。可以通过向数据库插入大量的数据或让应用程序处理一个大型文件来进行测试应用程序。</li><li>通过容量测试，可以识别应用程序中具有大数据时的瓶颈，检查应用程序的效率，进而得到不同数据量级下应用程序的性能。</li></ul></li><li>持久测试（Endurance testing）<ul><li>持久测试也被称为是浸泡测试（Soak Testing），它也是一种非功能的测试。</li><li>持久测试是指在相当长的时间内使用预期的负载量对系统进行测试，以检查系统的各种行为，如内存泄露、系统错误、随机行为等。</li></ul></li></ul><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ul><li><p>响应时间 RT Response Time 首屏时间–客户端请求服务器 发首页请求的响应时间</p></li><li><p>吞吐量：BPS RPS</p></li><li><p>事务处理能力 TPS  </p></li><li><p>系统资源消耗情况：CPU MEMORY DISK NETWORDK</p><h2 id="不同角色看待性能的角度"><a href="#不同角色看待性能的角度" class="headerlink" title="不同角色看待性能的角度"></a>不同角色看待性能的角度</h2></li><li><p>黑盒测试的角度</p><ol><li>黑盒测试操作应用界面 - 数据请求经过网络发送 - 服务器前端接受处理 - 在DB server获取相关数据 - 前端处理后返回数据 - 应用界面收到数据响应下一步</li><li>黑盒测试只关心应用程序的单步响应时间，性能好坏就看应用时间多少，也就是数据流经过服务器/服务器集群经过网络传输后往返的时间总和。</li></ol></li><li><p>开发角度</p><ol><li>架构合理性</li><li>数据库设计合理性</li><li>代码</li><li>系统里内存的使用方式</li><li>系统里线程使用方式</li><li>系统资源是否有恶性，不合理竞争</li></ol></li><li><p>系统管理员角度</p><ol><li>硬件资源利用率</li><li>JVM</li><li>DB</li><li>换那些硬件提高系统性能</li><li>7*24服务</li><li>扩展性，兼容性，最大容量，可能的瓶颈</li></ol></li><li><p>性能测试角度</p><ol><li>服务器硬件性能</li><li>根据需求和历史数据制定性能目标</li><li>建立性能通过模型</li><li>对开发代码框架和硬件框架进行性能分析</li><li>针对开发发布版本的基准测试</li><li>执行软件性能验收及稳定性测试</li><li>生产环境的配置和优化</li><li>制定性能测试的测试用例</li><li>制定性能测试的场景设计</li></ol></li></ul><h1 id="性能测试初级"><a href="#性能测试初级" class="headerlink" title="性能测试初级"></a>性能测试初级</h1><p>工具永远只能解决1/3的问题</p><ul><li>性能测试工具：loadrunner、jmeter<br>发送请求  —&gt;  参数化、思考时间、集合点、事务等  —&gt;  设计场景  —&gt;  运行场景  —&gt;  监控指标  —&gt;  结果图标</li></ul><h2 id="性能测试方案"><a href="#性能测试方案" class="headerlink" title="性能测试方案"></a>性能测试方案</h2><ol><li>能够位实施过程提供战术依据，实施过程必须严格遵守方案执行。</li><li>测什么：测试对象（测什么版本），测试范围（关键业务）</li><li>怎么测：接口、脚本、场景、参数、指标、运行策略（测试时间，压力，并发，负载，稳定性）</li><li>数据如何分析，如何定位瓶颈（预测本系统通常瓶颈容易出现在哪里），对指标体系的设计参考</li><li>优化和解决问题（解决方案），回归测试策略。</li><li>人员配置和工作协调。</li><li>软硬件配置清单，工具使用，脚本开发</li></ol><h2 id="性能测试场景"><a href="#性能测试场景" class="headerlink" title="性能测试场景"></a>性能测试场景</h2><ol><li>压力：最大用户数或使劲弄（负载机，客户端瓶颈，（租用云服务器，成本有点高），充分利用云服务器环境的运算能力+网络资源）</li><li>并发：集合点，（伪并发：1000个线程同时发请求，未必能同时到达服务器）。</li><li>负载：到底多少用户是合适的？<ul><li>(通常参考同行的系统，TPS，并发用户数是多少？(不一定需要关心)。如果是已上线系统，可以参考历史记录，历史交易。(Transaction)，但是如果是新上线的呢？（做最好的准备，最坏的打算，先基于业务进行估算，然后上线后实时监控，实时调整）。</li><li>如果在测试环境，测试结果毫无参考价值。最好的解决方案就是在生产环境（公网）直接进行测试。可通过采集测试环境的数据，拟合一条线性回归议程，来预测生产环境对应配置的负载能力。或者将生产环境直接用于测试，将访问域名解析到备用机上，将生产环境隔离出来用于性能测试（建议在深夜执行）。)</li></ul></li><li>长时间在标准负载（最佳用户数）运行（比如一个星期），考察是否支持7*24运行，考察是否存在内存溢出问题。</li></ol><h2 id="性能指标体系"><a href="#性能指标体系" class="headerlink" title="性能指标体系"></a>性能指标体系</h2><p>基于I/O路径来定位硬件和软件</p><ol><li>硬件：CPU，内存，带宽，硬件（路由器、交换机、集群、磁盘阵列、分布式）</li><li>软件：进程所消耗的CPU，内存，进程内部的内存管理，线程池（Pool,避免繁琐的新增和销毁），数据池连接池，缓存策略（缓存是目前最有效提升系统性能的办法之一，但凡有IO的地   方，最好都要使用缓存），算法对CPU的消耗，很多时候需要专门的监控工具</li><li>客户端视角：响应时间，响应内容，成功率，可靠性（稳定运行）</li></ol><h2 id="性能测试分析"><a href="#性能测试分析" class="headerlink" title="性能测试分析"></a>性能测试分析</h2><ol><li>瓶颈，指标的均衡（动态指标变化），用户体验（第一印象，First Impression，首屏加载时间：当执行性能测试时，利用F12同步访问该系统，手工统计即可。Dynatrace Ajax，前端性能分析工具，F12前端性能）。Microfocus，Compuware。</li><li>200并发-&gt;响应时间3s-&gt;服务器-&gt;TPS: 66  -&gt; 增加到500并发-&gt;（TPS:166？）-&gt;响应时间5秒-&gt;系统的处理能力会高于100，响应时间会低于5秒。</li><li>主要利用关联分析，对多个指标按时间进行关联，看是否存在正相关还是不相关。<h2 id="系统性能优化"><a href="#系统性能优化" class="headerlink" title="系统性能优化"></a>系统性能优化</h2></li><li>使用监控工具获取性能细节：内存，JVM，线程，硬盘，CPU，SQL。。。</li><li>server.xml设置Tomcat的线程数。</li><li>可以在catalina.bat文件中设置JVM内存参数。 <a href="https://blog.csdn.net/gududedabai/article/details/81072075" target="_blank" rel="noopener">https://blog.csdn.net/gududedabai/article/details/81072075</a></li><li>配置Tomcat集群。</li></ol><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><ol><li>JavaEE服务器（容器）：IBM: Websphere，Oracle: BEA：WebLogic，Tomcat，Apusic，Resin。</li><li>Web服务器（只处理HTTP请求）：Apache, Nginx，IIS，lighttp。</li><li>数据库：MySQL，PostgreSQL，MariaDB，DB2，Informix，Oracle，SQL Server，MongoDB。 分库，分表。</li><li>高可用（High Availability）：集群Cluster，请求分发，负载均衡(Load-Balance)，Redware，容错处理（Fail-Over）。</li><li>缓存服务器(Redis，MemedCache-内存型非关系型数据库-key:value，使用集群解决数据出问题)，分布式文件系统（FastDFS），磁盘存储阵列，网络文件系统（固态硬盘）。带宽-&gt;CDN服务器。</li><li>分布式开发，微服务，云计算，分布式事务，CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可兼得。。。</li><li>高并发，高可用。Redhat: RHEL-&gt;CentOS，MySQL-&gt;MariaDB（OpenJDK）。</li></ol><h1 id="性能测试高级篇"><a href="#性能测试高级篇" class="headerlink" title="性能测试高级篇"></a>性能测试高级篇</h1><ol><li>并发用户数量是一个无法完全精准的数据，需要明确具体的时间段。</li><li>关于并发用户数量的分析：针对已经上线的系统，可以通过日志进行访问记录，进而得出某个合理的时间段内的并发用户数量。但是如果系统是首次上线前的性能测试评估，如何设计合理的并发用户量和场景？<ol><li>通过公开渠道查阅相关的数据资料。</li><li>通过分析竞品寻找相应的参数数据。</li><li>根据需求分析和架构设计的要求，来验证并发用户数量。<br>某个关键事务的响应时间在多少秒内？2-5-8原则：2秒，5秒，8秒，超过8秒。<br>并发用户量（客户端视角）或业务处理量（服务器视角，特定的硬件环境）：<br>Transaction：事务，交易。（服务器视角和客户端视角）。<br>上线后继续收集访问日志，随时调整测试方案和硬件配置。<br>(什么环境，什么配置下）如果并发量和处理量均达标，但是响应时间不达标，此类情况，继续深入分析慢的原因：代码，数据库，算法，带宽，客户端阻塞等。。。。。</li><li>明确地知道用户是什么群体，在哪里，有多少人，按10%做并发折算。</li></ol></li><li>测试环境与生产环境，如果配置不一样，测试环境的数据意义何在？如何解决？</li><li>浏览器的并发线程数量：<a href="https://www.cnblogs.com/sunsky303/p/8862128.html。" target="_blank" rel="noopener">https://www.cnblogs.com/sunsky303/p/8862128.html。</a></li><li>配置基于Tomcat的集群环境：<a href="https://blog.csdn.net/dearfinance/article/details/79907594" target="_blank" rel="noopener">https://blog.csdn.net/dearfinance/article/details/79907594</a><ol><li>负载均衡：Load-Balance，多个节点共同提供服务。</li><li>容错转移：Fail-Over，当一个节点失效时，请求将被转交给其他节点处理。</li></ol></li><li>性能测试也需要同时对功能进行正确性校验，以统计事务的成功率，评估其功能上的稳定性。通常失败率不能够超过3%，尽量在1%。如果超过5%，则必须严格分析和检查，以定位问题。</li></ol><h2 id="模拟真实场景"><a href="#模拟真实场景" class="headerlink" title="模拟真实场景"></a>模拟真实场景</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>将代速设备的内容保存到高速设备中，减少对低速的读写</p><ol><li>缓存：页面资源必须要下载，但是通常只下载一次，后面的请求如果有相同的资源，则浏览器本身会从缓存中读取。相对于网络传输和服务器处理的时间来说，浏览器直接读取本地缓存（硬盘或内存）或更快，同时可以显著降低服务器端的I/O消耗。</li><li>如何用Python脚本来实现缓存？第一次下载页面资源后，将资源文件保存到硬盘某个特定目录，下一次再下载资源文件前，先检查一下该资源文件名是否已经存在于硬盘，如果存在，则无需下载。</li><li>在JMeter中，无法精确模拟缓存，要么全部下载，要么不下载。建议全部下载。</li><li>同一个用户才有缓存，不同的用户（并发用户），缓存不可能重复使用。目录：url1、url2。</li><li>5G：4.6G/s   500M/s，  远高于目前的标准硬盘的读写速度，此时还需要缓存吗？</li><li>对于硬盘来说，将内容缓存到内存，也是一种提速的方法。</li></ol><h3 id="网络带宽"><a href="#网络带宽" class="headerlink" title="网络带宽"></a>网络带宽</h3><ol><li>服务器端的出口带宽。</li><li>客户端的访问带宽。</li><li>性能测试实施过程中，要确保负载机（客户端）的并发情况下，客户端的带宽足够。调优（基于I/O路径进行优化）：<ol><li>降低资源文件的大小，减少带宽的占用。</li><li>合理利用各类系统节点的缓存，降低对低速设备的读写频率。</li><li>优化代码算法，降低CPU使用率。</li><li>找到系统的瓶颈所在，对瓶颈进行分析和优化。</li><li>修改系统的核心内存参数，优化内存的使用，降低硬盘的读写。</li></ol></li></ol><h2 id="指标监控与分析"><a href="#指标监控与分析" class="headerlink" title="指标监控与分析"></a>指标监控与分析</h2><ol><li>指标并不是越多越好，关键是找到核心指标，清楚了解该指标的作用。</li><li>巧妇难为无米之炊：一定要基于监控的指标数据进行分析，数据是基础。</li><li>监控工具很多，关键在指标本身。</li><li>对指标的分析：找到指标与指标之间影响关系，分析系统的瓶颈所在。最终目的是解决性能问题。</li><li>请求的处理过程会经历多个步骤，每一个步骤都可能存在瓶颈。</li><li>由于有多个步骤，所以步骤与步骤之间，就会存在动态影响。</li><li>动态影响：<ol><li>假设Tomcat所在服务器出现瓶颈，则此时数据库可能闲着。</li><li>如果解决了Tomcat的瓶颈，数据库有可能成为瓶颈。</li><li>如果解决了Tomcat和数据库的瓶颈，带宽有可能成为新的瓶颈。</li><li>如果带宽问题解决，流量变大，Tomcat或数据库又可能出现更高要求的瓶颈。<br>随着并发用户量的增加，必然导致请求数量增加，资源消耗增加，进而导致响应时间变长，导致处理请求的数量减少，请求队列增加，进而进入恶性循环。（瓶颈）。服务器端的一个关键指标：Timeout超时时间可能会起作用。</li></ol></li></ol><ul><li><p>吞吐量：硬盘，网络，请求，事务，都可以统一表达为吞吐量，单位时间的吞吐量叫吞吐率。</p></li><li><p>事务处理能力-TPS：Transaction Per Second，TPM：Minute。事务的成功率。</p></li><li><p>Tomcat的服务器端状态监控：（修改conf目录下的 tomcat-users.xml文件，最后添加并重启）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"tomcat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"role1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"denny"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager,manager-gui"</span>/&gt;</span>  </span><br><span class="line">//server status登录</span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"both"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"tomcat,role1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"role1"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"role1"</span>/&gt;</span></span><br><span class="line">默认情况下，Tomcat的内存分配：Free memory: 19.23 MB Total memory: 49.99 MB Max memory: 247.50 MB，最大的内存是256MB。</span><br><span class="line">Free memory: 19.23 MB：目前可用内存。</span><br><span class="line">Total memory: 49.99 MB：目前Tomcat被分配到的总内存。</span><br><span class="line">Max memory: 247.50 MB：Tomcat可以被分配的最大的内存数量。</span><br><span class="line">修改conf/server.xml，为Connector节点对应的访问端口处添加线程和队列长度：</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8088"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag"><span class="attr">redirectPort</span>=<span class="string">"8445"</span> <span class="attr">maxThreads</span>=<span class="string">"100"</span> <span class="attr">acceptCount</span>=<span class="string">"110"</span> /&gt;</span></span><br><span class="line">maxThreads="100"：Tomcat的最大处理线程。</span><br><span class="line">acceptCount="110"：允许排除的长度。</span><br><span class="line">修改catalina.bat，添加一行：</span><br><span class="line">set JAVA_OPTS=-Xms1024M -Xmx1024M -XX:MaxPermSize=1024M</span><br></pre></td></tr></table></figure></li><li><p>MySQL</p><ol><li>MySQL的核心配置参数在Linux的/etc/my.cnf，在Windows上，对应于MySQL的数据目录所在位置，叫my.ini。</li><li>缓冲区大小：<ul><li>query_cache_size=0  # 设置为0表示禁用缓存，不建议使用该设置。</li><li>query_cache_type=1  # 表示打开缓存</li></ul></li><li>MySQL，查找my.ini中的如下三个参数，并修改：<ul><li>slow-query-log=1   # 1表示开启慢查询的监控</li><li>slow_query_log_file=”DESKTOP-0C07AN0-slow.log”    # 将慢SQL写入日志文件中</li><li>long_query_time=1.5   # 1.5表示SQL语句执行时间超过1.5秒的，视为慢查询</li></ul></li><li>内存型数据库：把数据直接全部放到内存中进行DML和DQL。效率极高，速度极快，彻底解决了硬盘瓶颈的问题，但是很难完全商业化？为什么？因为内存不稳定，一个不小心，数据丢失。存储阵列，NAS，RAID，固态硬盘：综合运用，提升硬盘速度。</li></ol></li></ul><h2 id="性能测试方案-1"><a href="#性能测试方案-1" class="headerlink" title="性能测试方案"></a>性能测试方案</h2><p>（目的：根据方案可以很容易实施性能测试）：</p><ul><li>定义标准：关键性能指标，响应时间，事务处理，事务成功率，资源利用率等。</li><li>环境配置：在什么软件和硬件配置下进行性能测试。</li><li>测试范围：关键业务，测什么？用户使用频率最高，并发量最大的业务。</li><li>测试场景：如何设计场景，并发用户量，负载策略，分布式执行策略，数据库容量，客户端和服务器端带宽需求，缓存策略，IP地址（云服务器），思考时间，集合点，生产环境和测试环境。。。。</li><li>测试脚本：如何发送请求，接口规范，检查点，断言，事务，执行顺序。</li><li>性能指标：要监控什么指标。</li><li>回归测试：什么时候回归，如何回归，出现问题的应对措施。</li><li>实施计划。</li></ul><h2 id="性能测试报告"><a href="#性能测试报告" class="headerlink" title="性能测试报告"></a>性能测试报告</h2><ul><li>在现有的测试环境下，是否满足性能需求？</li><li>性能测试过程中，出现了什么问题，如何解决的？</li><li>相应的数据分析和图表，与结论对应。</li><li>改时方案，回归测试后的结果。。。。</li></ul><h2 id="Web前端性能分析"><a href="#Web前端性能分析" class="headerlink" title="Web前端性能分析"></a>Web前端性能分析</h2><ul><li>请求的数量：越少越好，请求越多，浏览器线程等待时间更长，更频繁地建立TCP连接，后台服务器IO的开销更多，考虑合并请求。</li><li>响应时间：越短越好，观察是否有明显的较长的响应时间。</li><li>响应的大小：比如文件，图片，确认是否可以压缩。</li><li>前端代码压缩：CSS，HTML和JS均可以做压缩，降低带宽消耗。</li><li>传输过程压缩：Accept-Encoding: gzip, deflate。</li><li>监控前端JavaScript代码的执行效率：Dynatrace Ajax Editon，或F12的调试。</li><li>监控前端资源配合测试：为了更好地配合前后端性能测试，当正在进行后端性能测试时（高并发的时候），此时利用F12或Fiddler等前端分析工具对整个通信过程进行监控。</li><li>First-Impression：第一印象，首屏加载时间。响应时间很长，并不代表首屏时间很长，而用户最直观的感受是首屏加载时间。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2018/09/06/linux/"/>
      <url>/2018/09/06/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux树形结构目录"><a href="#Linux树形结构目录" class="headerlink" title="Linux树形结构目录"></a>Linux树形结构目录</h2><table><thead><tr><th>/</th><th>根目录</th></tr></thead><tbody><tr><td>├── bin</td><td>存放用户二进制文件</td></tr><tr><td>├── boot</td><td>存放内核引导配置文件</td></tr><tr><td>├── dev</td><td>存放设备文件</td></tr><tr><td>├── etc</td><td>存放系统配置文件</td></tr><tr><td>├── home</td><td>用户主目录</td></tr><tr><td>├── lib</td><td>动态共享库</td></tr><tr><td>├── lost+found</td><td>文件系统恢复时的恢复文件</td></tr><tr><td>├── media</td><td>可卸载存储介质挂载点</td></tr><tr><td>├── mnt</td><td>文件系统临时挂载点</td></tr><tr><td>├── opt</td><td>附加的应用程序包</td></tr><tr><td>├── proc</td><td>系统内存的映射目录，提供内核与进程信息</td></tr><tr><td>├── root</td><td>root 用户主目录</td></tr><tr><td>├── sbin</td><td>存放系统二进制文件</td></tr><tr><td>├── srv</td><td>存放服务相关数据</td></tr><tr><td>├── sys</td><td>sys   虚拟文件系统挂载点</td></tr><tr><td>├── tmp</td><td>存放临时文件</td></tr><tr><td>├── usr</td><td>存放用户应用程序</td></tr><tr><td>└── var</td><td>存放邮件、系统日志等变化文件</td></tr></tbody></table><h1 id="linux杀进程"><a href="#linux杀进程" class="headerlink" title="linux杀进程"></a>linux杀进程</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps -ef | grep *  # 查找进程ID</span><br><span class="line"><span class="meta">$</span> ps -e --forest | grep * # 显示进程数</span><br><span class="line"><span class="meta">$</span> kill - 9 ID  # 杀死当前进程的ID</span><br><span class="line">－－－－－－－－－－－－－－－－－－</span><br><span class="line"><span class="meta">$</span> killall -9 * # 直接杀死当前进程（包含这个进程的所有ID）</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Signal Name</th><th align="center">Single Value</th><th align="center">Effect</th></tr></thead><tbody><tr><td align="center">SIGHUP</td><td align="center">1</td><td align="center">挂起</td></tr><tr><td align="center">SIGINT</td><td align="center">2</td><td align="center">键盘的中断信号</td></tr><tr><td align="center">SIGKILL</td><td align="center">9</td><td align="center">发出杀死信号</td></tr><tr><td align="center">SIGTERM</td><td align="center">15</td><td align="center">发出终止信号</td></tr><tr><td align="center">SIGSTOP</td><td align="center">17,19,23</td><td align="center">停止进程</td></tr></tbody></table><h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><table><thead><tr><th>bash命令</th><th>解释</th></tr></thead><tbody><tr><td>ls</td><td>显示文件或目录</td></tr><tr><td>mkdir   [-p]</td><td>创建目录 [若无父目录，则创建父目录]</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>touch</td><td>创建空文件</td></tr><tr><td>echo</td><td>输出</td></tr><tr><td>cat</td><td>查看文件内容</td></tr><tr><td>cp</td><td>拷贝</td></tr><tr><td>mv</td><td>移动</td></tr><tr><td>rm   [-r]   [-f]</td><td>删除文件 [递归删除，可删除子目录及文件] [强制删除]</td></tr><tr><td>find</td><td>在文件系统中搜索文件</td></tr><tr><td>wc</td><td>统计文本中行数、字数、字符数</td></tr><tr><td>grep</td><td>在文本文件中查找某个字符</td></tr><tr><td>rmdir</td><td>删除 空目录</td></tr><tr><td>tree</td><td>树形结构显示目录，需要安装tree包</td></tr><tr><td>pwd</td><td>显示当前目录</td></tr><tr><td>ln</td><td>创建链接文件</td></tr><tr><td>more/less</td><td>分页显示文本文件内容</td></tr><tr><td>head/tail</td><td>显示文件头、尾文件</td></tr><tr><td>stat</td><td>显示指定文件的详细信息，比ls更详细</td></tr><tr><td>who</td><td>显示在线登陆用户</td></tr><tr><td>whoami</td><td>显示当前操作用户</td></tr><tr><td>hostname</td><td>显示主机名</td></tr><tr><td>uname</td><td>显示系统信息</td></tr><tr><td>top</td><td>动态显示当前耗费资源最多的进程</td></tr><tr><td>ps</td><td>显示瞬间进程状态 ps -aux</td></tr><tr><td>du</td><td>查看目录大小 du -h /home带有单位显示目录信息</td></tr><tr><td>df</td><td>查看磁盘大小 df -h 带有单位显示磁盘信息</td></tr><tr><td>ping</td><td>测试网络</td></tr><tr><td>netstat</td><td>显示网络状态</td></tr><tr><td>clear</td><td>清屏</td></tr><tr><td>alias</td><td>对命令重命名 如 alias showmeit=”ps -aux”,另外接触使用 unalias showmeit</td></tr><tr><td>shutdown</td><td>[-r] 关机重启     [- h]关机不重启    [now]立刻关机</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>reboot</td><td>重启</td></tr><tr><td>du -ah –max-depth=1</td><td>查询文件夹大小</td></tr></tbody></table><h2 id="linux打包压缩"><a href="#linux打包压缩" class="headerlink" title="linux打包压缩"></a>linux打包压缩</h2><p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z</p><p>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2</p><p><strong>tar</strong>    打包(cvzf) 压缩(xvzf)</p><p>​    -c  压缩文件</p><p>​    -x 归档文件</p><p>​    -z gzip压缩文件</p><p>​    -j bzip2压缩文件</p><p>​    -v 显示压缩解压缩过程</p><p>​    -f 使用文档名</p><h2 id="linux用户及组管理"><a href="#linux用户及组管理" class="headerlink" title="linux用户及组管理"></a>linux用户及组管理</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useradd[username]</span><br><span class="line"></span><br><span class="line">userdel[username]</span><br><span class="line"></span><br><span class="line">adduser[username]</span><br><span class="line"></span><br><span class="line">groupadd[groupname]</span><br><span class="line"></span><br><span class="line">groupdel[groupname]</span><br><span class="line"></span><br><span class="line">passwd root# 给root设置密码</span><br><span class="line">su use# 切换用户,加载配置文件.bashrc</span><br><span class="line">su - user# 切换用户，加载配置文件/etc/profile，加载bash_profile,更改文件的用户及用户组</span><br><span class="line">chown [-R] owner[:group] &#123;File|Directory&#125; # 例 ：chown root:root jdk-8u211.tar</span><br></pre></td></tr></table></figure><h2 id="linux文件权限"><a href="#linux文件权限" class="headerlink" title="linux文件权限"></a>linux文件权限</h2><ul><li><p>三种基本权限</p><ul><li>R         读            数值表示为4</li><li>W        写            数值表示为2</li><li>X      可执行        数值表示为1</li></ul></li><li><p>更改权限</p><ul><li><p>chmod     [u所属用户     g所属组    o其他用户    a所有用户]   [+增加权限   -减少权限]    [r w x]  [目录名]</p></li><li><p>此外chmod也可以用数字来表示权限如：</p><p>chmod   777   [filename]</p></li></ul></li></ul><h2 id="linux管道"><a href="#linux管道" class="headerlink" title="linux管道"></a>linux管道</h2><ul><li><p>管道是什么：</p><ul><li><p>管道是一种通讯机制，通常用于进程间的通信(也可以通过socket进行网络通信)，它表现出现的新形式就是将前面的每一个命令的输出(stdout)直接作为下一个命令的输入(stdin)</p></li><li><p>例如：grep -r “close” /home/* | more  在home目录下所有文件查找，包括close的文件，并分页输出</p></li></ul></li></ul><h2 id="linux-sort"><a href="#linux-sort" class="headerlink" title="linux sort"></a>linux sort</h2><p>工作原理：</p><p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ll | sort -rnk 5|head -3</span><br><span class="line"><span class="meta">#</span> 将文件按顺序输出</span><br><span class="line"><span class="meta">$</span> cat test.txt</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line"><span class="meta">$</span> sort test.txt</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>sort  -u    —    去除重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat test</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line"><span class="meta">$</span> sort -u test</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>sort   -r    —     排序方式改为降序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat test</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line"><span class="meta">$</span> sort -r test</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>sort   -r text.txt -o text.txt    —    将输出结果写入原文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat test</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">$ sort - r test -o test</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">$ cat test</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure><p>sort   -n test.txt     —     sort默认字符排序，-n 告诉sort 要以数值排序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat test</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line"><span class="meta">$</span> sort -n test</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><strong>其他的sort常用选项</strong>:</p><p>-f    会将小写字母都转换为大写字母来进行比较，亦即忽略大小写</p><p>-c    会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1</p><p>-C    会检查文件是否已排好序，如果乱序，不输出内容，仅返回1</p><p>-M    会以月份来排序，比如JAN小于FEB等等</p><p>-b    会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python连接Mysql</title>
      <link href="/2018/08/12/Python%E8%BF%9E%E6%8E%A5Mysql/"/>
      <url>/2018/08/12/Python%E8%BF%9E%E6%8E%A5Mysql/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">STEP1:引包： <span class="comment">#pip install pymql</span></span><br><span class="line">Import pymySQL</span><br><span class="line"></span><br><span class="line">STEP2:通过模块调用对应的方法获取一个连续的函数</span><br><span class="line"><span class="comment">#指明连接的数据库（host、user、password、databasesname、charset）</span></span><br><span class="line">con = pymysql.connect (                                           )</span><br><span class="line"></span><br><span class="line">STEP3:用连接对象调用方法获取一个可执行对象</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">STEP4:执行SQL语句</span><br><span class="line">sql = （语句）</span><br><span class="line">cur.execute(sql)</span><br><span class="line">con.commit()</span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="comment">#cur.fetchone()  # 获取元组第一个元素</span></span><br><span class="line"><span class="comment">#cur.fetchall() # 获取元组剩余的元素</span></span><br><span class="line"><span class="comment">#cur.fetchmany() # 获取全部元素</span></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line">STEP5:关闭连接</span><br><span class="line">cur.close()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2018/08/11/Mysql%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/11/Mysql%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="mySQL基础"><a href="#mySQL基础" class="headerlink" title="mySQL基础"></a>mySQL基础</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>结构化查询语言，是常用操作数据库的计算机语言。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>非结构化</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>DQL：数据查询语言：<br>数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句构成的查询块：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>&lt;字段表名&gt;、<span class="keyword">FROM</span>&lt;表或视图名&gt;、<span class="keyword">WHERE</span>&lt;查询条件&gt;</span><br></pre></td></tr></table></figure></li><li><p>DML：数据操作语言：<br>数据操作语言的DML主要的三种形式：插入：INSERT、更新：UPDATE、删除：DELETE</p></li><li><p>DDL：数据定义语言：<br>数据定义语言DDL用来创建数据库的各种对象—–表、视图、索引、同义词、聚簇等如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> (表) / <span class="keyword">VIEW</span> (视图) / <span class="keyword">INDEX</span> （索引）/ SYN（同义词）/ CLUSTER（簇）</span><br><span class="line"><span class="keyword">DDL</span>操作为隐形提交！不能<span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></li><li><p>DCL：数据控制语言</p><h2 id="数据库字符类型"><a href="#数据库字符类型" class="headerlink" title="数据库字符类型"></a>数据库字符类型</h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>INT</td><td>整型</td><td>4字节整数类型，范围约+/-21亿</td></tr><tr><td>BIGINT</td><td>长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td>FLOAT</td><td>浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td>DOUBLE</td><td>浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td>DECIMAL(M,N)</td><td>高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td>CHAR(N)</td><td>定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td>VARCHAR(N)</td><td>变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td>BOOLEAN</td><td>布尔类型</td><td>存储True或者False</td></tr><tr><td>DATE</td><td>日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td>TIME</td><td>时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td>DATETIME</td><td>日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table></li></ul><h2 id="数据库常用操作"><a href="#数据库常用操作" class="headerlink" title="数据库常用操作"></a>数据库常用操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看数据库： <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span></span><br><span class="line">删除数据库： <span class="keyword">DROP</span> <span class="keyword">DATABASE</span>（数据库名）</span><br><span class="line">创建数据库： <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> （数据库名）</span><br><span class="line">创建表： <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> （表名）（)</span><br><span class="line">查看所有表： <span class="keyword">SHOW</span> <span class="keyword">TABLES</span></span><br><span class="line">修改表名： <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> （旧表名）<span class="keyword">RENAME</span>（新表名）</span><br><span class="line">添加列：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>（表名）<span class="keyword">ADD</span> <span class="keyword">COLUMN</span> （列名；列属性）</span><br><span class="line">修改列：<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>（表名）CHANG （旧列名；新列名；新列名属性）</span><br><span class="line">删除列：<span class="keyword">ALTER</span> （表名）<span class="keyword">DROP</span>（列名）</span><br></pre></td></tr></table></figure><h3 id="CHANG-和-MODIFY-的区别"><a href="#CHANG-和-MODIFY-的区别" class="headerlink" title="CHANG 和 MODIFY 的区别"></a>CHANG 和 MODIFY 的区别</h3><ul><li>change用来字段重命名，不能修改字段类型和约束；</li><li>modify不用来字段重命名，只能修改字段类型和约束；</li></ul><h2 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h2><p>数据有效性 + 数据类型准确性 = 数据完整性                                                                       </p><ul><li>数据完整性包含<ul><li>实体、域（列）、引用、自定义</li></ul></li></ul><h2 id="六大约束"><a href="#六大约束" class="headerlink" title="六大约束"></a>六大约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><ul><li>保证实体的完整性</li><li>为表中一列或几列的组合</li><li>作用：设置主键约束，如果是单列则该列不能出现重复性数据，如果是联合主键那么不允许几列中出现完全一样的数据</li><li>使用：定义表的时候设置主键 PRIMARY KEY<ul><li>如果表已经定义，那么可以额外的添加约束：ALTER TABLE（表名）ADD PRIMARY KEY （某列）</li></ul></li><li>注意：一张表只能有一个主键约束</li></ul><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ul><li>体现了引用完整性</li><li>定义：为某表的其中一列</li><li>作用：添加了外键约束的列中的数据只能来自于另一张表中某列（一般是某表的主键）</li><li>使用：<ul><li>定义表的时候：FOREIGN KEY（列名）REFERENCES（表名、列名）<ul><li>已定义的时候：ALTER TABLE（表名）ADD FOREIGN KEY（列名）REFERENCES（表名、列名）</li></ul></li></ul></li><li>注意：<ul><li>一张表中可以有多个外键</li><li>保证数据库和表的引擎innodb</li><li>被引用的列数据类型要和外键一致</li></ul></li></ul><h3 id="自增长约束"><a href="#自增长约束" class="headerlink" title="自增长约束"></a>自增长约束</h3><ul><li>体现实体、列完整性</li><li>定义：给表中主键列设置自增长</li><li>作用：自动填充数据、填充的数据是上一条数据的基础上自增1 </li><li>使用：auto_increment</li><li>注意：结合主键一起使用；该列是整数类型</li></ul><h3 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h3><ul><li>体现了实体完整性</li><li>定义：给表中任意字段条件唯一约束</li><li>作用：添加了唯一约束的列不能出现重复值</li><li>使用：UNIQUE</li><li>注意：表中任何一列都可以使用，也可以同时对表中多列添加唯一约束 </li></ul><h3 id="非空"><a href="#非空" class="headerlink" title="非空"></a>非空</h3><ul><li>体现了列完整性</li><li>定义：给表中一列添加非空约束</li><li>作用：设置了非空约束列的数据不能为空</li><li>使用：NOT NULL</li><li>注意：表中任何一列都可以使用，也可以同时对表中多列添加非空约束                                                                                                                           </li></ul><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><ul><li>体现了列完整性</li><li>定义：给某列设置默认约束</li><li>作用：设置了默认约束的列有默认值    </li><li>使用：DEFAULT默认值</li><li>注意：表中任何一列都可以用，也可以同时对表中多列添加非空约束</li></ul><h2 id="数据库设计三大范式"><a href="#数据库设计三大范式" class="headerlink" title="数据库设计三大范式"></a>数据库设计三大范式</h2><ul><li>确保每列的原子性：确保表中的每一列都不可再拆分为更细小的列</li><li>每个实列或行必须可以被唯一的拆分：确保每个表都有主键列</li><li>确保每个列都有主键列直接相关，而不是间接相关：确保表中不能有其他表的非主键列</li></ul><h2 id="SQL执行各子句的顺序"><a href="#SQL执行各子句的顺序" class="headerlink" title="SQL执行各子句的顺序"></a>SQL执行各子句的顺序</h2><p><strong>from  where  group by  having  order by  limit</strong> </p><ol><li>首先执行FROM子句，将FROM子句中的表做为中间表；</li><li>如果有WHERE子句，则根据其中的过滤条件，从中间表中去掉不满足过滤条件的行。</li><li>如果有GROUP BY子句，根据GROUP BY子句中指定的分组列，对中间表中的数据进行分组。</li><li>为每个组计算SELECT子句聚合函数的值，并为每组生成查询结果中的一行。</li><li>如果有HAVING子句，则根据HAVING子句的过滤条件，分组计算聚合计算的结果再次过滤。</li><li>如果有ORDER BY子句中，则根据ORDER BY子句中的列，对结果集进行排序 ，最后是limit 。</li></ol><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><p>索引是对<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。</p><p>索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以’@‘开始，形式为“@变量名”</span></span><br><span class="line"><span class="keyword">SET</span> @username=<span class="number">123</span></span><br><span class="line"><span class="comment">-- 用户变量和mysql客户端是绑定的，设置的变量，只对当前用户使用的客户端生效</span></span><br></pre></td></tr></table></figure></li><li><p>系统变量</p><p>在MySQL启动的时候由服务器自动将他们初始化为默认值，这些默认值可以通过更改my.ini这个文件来更改</p><p>通过：<strong>show global variablea</strong> 来查看所有的全局变量</p></li></ul><h2 id="SQL语句执行慢的原因"><a href="#SQL语句执行慢的原因" class="headerlink" title="SQL语句执行慢的原因"></a>SQL语句执行慢的原因</h2><h3 id="针对偶尔慢"><a href="#针对偶尔慢" class="headerlink" title="针对偶尔慢"></a>针对偶尔慢</h3><p>如果sql语句大多数情况下执行正常，偶尔出现很慢的情况，一般情况下SQL语句本身是没有问题的。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>接口测试基础</title>
      <link href="/2018/08/02/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/02/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="借口测试基础"><a href="#借口测试基础" class="headerlink" title="借口测试基础"></a>借口测试基础</h1><h2 id="接口测试概念"><a href="#接口测试概念" class="headerlink" title="接口测试概念"></a>接口测试概念</h2><ul><li>代码级接口测试的基本原理：调用源代码，比较预期结果与实际结果</li><li>协议级接口测试的基本原理：模拟协议的通讯过程，建立通讯的连接，发请求，获取响应，对相应结果进行断言（实际结果和预期结果对比）</li><li>接口测试的方法：利用黑盒测试方法，脚本实现测试</li><li>接口测试的优势：较UI比较稳定，后期代码维护的成本比较低，门槛低（简单易学），自动化实施落实落地比较靠谱</li><li>接口测试的劣处：需要模拟的参数比较多，比较繁杂；加密复杂的接口难以实现接口测试，借助开发已经写好的加密方法来实施</li><li>常见自动化测试的类型：UI自动化、接口自动化、性能自动化、安全自动化等</li><li>TDD（test-Driven Development），测试先行，质量为天</li></ul><h2 id="协议参考模型"><a href="#协议参考模型" class="headerlink" title="协议参考模型"></a>协议参考模型</h2><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>7层模型：</p><ul><li>应用层 – 协议：HTTP、Telnet、FTP、SOAP、SMTP（simple Mail Transfer Protocol - 简单邮件传输协议）等</li><li>表示层 – 协议：JPEG、GIF等</li><li>会话层 – 协议：RPC（Remote Procedure Call）—远程过程调用</li><li>传输层 – 协议：TCP（Transmission Control Protocol –传输控制协议）、UDP（User Datagram Protocol-用户数据报协议）等</li><li>网络层 – 协议：IP（Internet Protocol）、ICMP协议、IGMP协议、ARP协议等</li><li>数据链路层 – 协议：PPP：点对点协议(Point to Point Protocol)等</li><li>物理层 – 协议：RS232等<h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h3>4层模型：</li><li>应用层 – 协议：HTTP、Telnet、FTP、SMTP（Simple Mail Transfer Protocol-简单邮件传输协议）等</li><li>传输层 – 协议：TCP（Transmission Control Protocol –传输控制协议）、UDP（User Datagram Protocol-用户数据报协议）等</li><li>网络层 – 协议：IP协议、ICMP协议、IGMP协议、ARP协议</li><li>网络访问层</li></ul><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>面向连接、可靠的、基于字节流、三次握手 - 建立连接 ；四次挥手 - 关闭连接；安全，但费事费资源</p><p>之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h3 id="三次握手：SYN"><a href="#三次握手：SYN" class="headerlink" title="三次握手：SYN"></a>三次握手：SYN</h3><ul><li>第一次握手：主机A发送位码为SYN＝1,随机产生seq number=200的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</li><li>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1),SYN=1,ACK=1,随机产生seq number=500的包；</li><li>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ACK是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。<h3 id="四次挥手：FIN"><a href="#四次挥手：FIN" class="headerlink" title="四次挥手：FIN"></a>四次挥手：FIN</h3></li><li>第一次挥手：客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 </li><li>第二次挥手：服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。</li><li>第三次挥手：服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 </li><li>第四次挥手：客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。<h3 id="Python模拟TCP通信"><a href="#Python模拟TCP通信" class="headerlink" title="Python模拟TCP通信"></a>Python模拟TCP通信</h3>建立连接(connect)—传送数据(send)—关闭连接(close)                          <h3 id="小结TCP与UDP的区别"><a href="#小结TCP与UDP的区别" class="headerlink" title="小结TCP与UDP的区别"></a>小结TCP与UDP的区别</h3></li></ul><ol><li>基于连接与无连接；</li><li>对系统资源的要求（TCP较多，UDP少）；</li><li>UDP程序结构较简单；</li><li>流模式与数据报模式 ；</li><li>TCP保证数据正确性，UDP可能丢包；</li><li>TCP保证数据顺序，UDP不保证。    </li></ol><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p>User Datagram Protocol （用户数据报协议）无连接、不可靠，优点：快，性能好<br>Python模拟UDP协议—飞秋：IPMSG的报文格式：版本号: 包编号: 发送者姓名: 发送者主机名: 命令字: 附加信息</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>Internet Protocol<br>网络层代表协议 - 待补充</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>Hypertext Transfer Protocol 超文本传输协议</p><ul><li>URL-组成：协议+主机名+端口号+资源位置+请求的参数+hash tag(锚地址)，<a href="http://baidu:80/path/?q=a#hash" target="_blank" rel="noopener">http://baidu:80/path/?q=a#hash</a></li><li>工作过程：地址解析–封装HTTP请求数据包—封装成TCP包，建立TCP连接—客户机发送请求命令–服务器响应–服务器关闭TCP连接–浏览器渲染展示页面</li></ul><h3 id="http的会话过程"><a href="#http的会话过程" class="headerlink" title="http的会话过程"></a>http的会话过程</h3><p>1.建立tcp连接<br>2.发出请求文档<br>3.发出响应文档<br>4.释放tcp连接</p><h3 id="HTTP方法的性质"><a href="#HTTP方法的性质" class="headerlink" title="HTTP方法的性质"></a>HTTP方法的性质</h3><ul><li>Safe - 安全<br>这里的「安全」和通常理解的「安全」意义不同，如果一个方法的语义在本质上是「只读」的，那么这个方法就是安全的。客户端向服务端的资源发起的请求如果使用了是安全的方法，就不应该引起服务端任何的状态变化，因此也是无害的。 此RFC定义，GET, HEAD, OPTIONS 和 TRACE 这几个方法是安全的。但是这个定义只是规范，并不能保证方法的实现也是安全的，服务端的实现可能会不符合方法语义，正如上文说过的使用GET修改用户信息的情况。引入安全这个概念的目的是为了方便网络爬虫和缓存，以免调用或者缓存某些不安全方法时引起某些意外的后果。User Agent（浏览器）应该在执行安全和不安全方法时做出区分对待，并给用户以提示。</li><li>Idempotent - 幂等<br>幂等的概念是指同一个请求方法执行多次和仅执行一次的效果完全相同。按照RFC规范，PUT，DELETE和安全方法都是幂等的。同样，这也仅仅是规范，服务端实现是否幂等是无法确保的。引入幂等主要是为了处理同一个请求重复发送的情况，比如在请求响应前失去连接，如果方法是幂等的，就可以放心地重发一次请求。这也是浏览器在后退/刷新时遇到POST会给用户提示的原因：POST语义不是幂等的，重复请求可能会带来意想不到的后果。</li><li>Cacheable - 可缓存性<br>顾名思义就是一个方法是否可以被缓存，此RFC里GET，HEAD和某些情况下的POST都是可缓存的，但是绝大多数的浏览器的实现里仅仅支持GET和HEAD。关于缓存的更多内容可以去看RFC7234。<h3 id="POST和GET的区别"><a href="#POST和GET的区别" class="headerlink" title="POST和GET的区别"></a>POST和GET的区别</h3>参数的位置、参数传递的安全性、参数是否缓存、参数的编码格式、使用习惯的不同<h3 id="HTTP和HTTPS区别"><a href="#HTTP和HTTPS区别" class="headerlink" title="HTTP和HTTPS区别"></a>HTTP和HTTPS区别</h3></li><li>http是HTTP协议运行在TCP之上。所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。</li><li>https是HTTP运行在SSL/TLS之上，SSL/TLS运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。此外客户端可以验证服务器端的身份，如果配置了客户端验证，服务器方也可  以验证客户端的身份。    </li></ul><h2 id="SOAP协议"><a href="#SOAP协议" class="headerlink" title="SOAP协议"></a>SOAP协议</h2><p>Simple Object Access protocol 简单对像访问协议</p><ul><li>待补充</li></ul><h2 id="websocket协议"><a href="#websocket协议" class="headerlink" title="websocket协议"></a>websocket协议</h2><p>服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</p><h3 id="协议特点："><a href="#协议特点：" class="headerlink" title="协议特点："></a>协议特点：</h3><p>1.建立在 TCP 协议之上，服务器端的实现比较容易。<br>2.与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。<br>3.数据格式比较轻量，性能开销小，通信高效。<br>4.可以发送文本，也可以发送二进制数据。<br>5.没有同源限制，客户端可以与任意服务器通信。<br>6.协议标识符是ws（如果加密，则为wss），服务器网址就是 URL.</p><h2 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h2><ul><li>cookie数据存放在客户的浏览器上，session数据放在服务器上</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑*到安全应当使用session</li><li>session会在一定时间内保存在服务器上，当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie</li><li>单个cookie保存的数*据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</li><li>建议将登录信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中</li><li>session保存在服务器，客户端不知道其中的信息；cookie保存在客户端，服务器能够知道其中的信息</li><li>session中保存的是对象，cookie中保存的是字符串</li><li>session不能区分路径，同一个用户在访问一个网站期间，所有的- session在任何一个地方都可以访问到，而cookie中如果设置了路径参数，那么同一个网站中不同路径下的cookie互相是访问不到的</li></ul><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a><a href="https://testerhome.com/topics/11677" target="_blank" rel="noopener">测试用例设计</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unittest框架</title>
      <link href="/2018/08/02/Unittest%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/08/02/Unittest%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Unittest框架"><a href="#Unittest框架" class="headerlink" title="Unittest框架"></a>Unittest框架</h2><ul><li>python自带的单元测试框架，java自带的单元框架Junit</li><li>单元测试的本质：代码测试代码；原理：调用源代码，对比预期结果和实际结果</li><li>特别注意：unittest 框架识别被测代码的方式：测试代码方法名需以test开头</li></ul><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setUP() <span class="comment"># 初始化；特点：每一条测试用例执行前就会执行初始化</span></span><br><span class="line">tearDown() <span class="comment"># 资源回收；特点：每一条测试用例执行后就会执行资源回收  </span></span><br><span class="line">setUpClass() <span class="comment"># 初始化；特点：所有测试用例执行前执行初始化</span></span><br><span class="line">tearDownClass() <span class="comment"># 资源回收；特点：所有用例执行后执行资源回收</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertEqual(a,b,msg)a == b</span><br><span class="line">assertGreater(a,b,msg)     a &gt; b</span><br><span class="line">assertLess(a,b,msg)  a &lt; b</span><br></pre></td></tr></table></figure><h2 id="TestSuite-测试集"><a href="#TestSuite-测试集" class="headerlink" title="TestSuite 测试集"></a>TestSuite 测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">suite = unittest,TestSuite() <span class="comment"># 实例化测试集</span></span><br><span class="line">suite.addTests(unittest.TestLoader().loadTestsFromTestCase( 类名 ))<span class="comment"># 加载整个类中的测试用例进入测试集</span></span><br><span class="line">suite.addTests(unittest.TestLoader().loadTestsFromName(‘模块名.类名.方法名’))<span class="comment"># 记载指定某个模块下的某个类下的方法/用例</span></span><br><span class="line">suite.addTests(unittest.TestLoader().loadTestsFromName(‘模块名.类名’)) <span class="comment"># 加载整个类中的测试用例进入测试集</span></span><br><span class="line">suite.addTests(unittest.TestLoader().loadTestsFromModule(模块名))<span class="comment"># 加载整个模块的测试用例进入测试集，特别注意：需要导入本模</span></span><br><span class="line">runner=unittest.TextTestRunner(verbosity=<span class="number">2</span>)<span class="comment"># 实例化一个runner, verbosity：结果复杂度</span></span><br><span class="line">runner.run(suite)<span class="comment"># 执行测试集</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@unittest.skip# 强制跳过</span></span><br><span class="line"><span class="meta">@unittest.skipIf(1&lt;2,reason='1&lt;2,跳过')# 满足条件就跳过，True-跳过</span></span><br><span class="line"><span class="meta">@unittest.skipUnless(2&lt;1,reason='1&lt;2,跳过')# 不满足条件就跳过，False-跳过</span></span><br></pre></td></tr></table></figure><h2 id="TestResult"><a href="#TestResult" class="headerlink" title="TestResult"></a>TestResult</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">suite=unittest.TestSuite()<span class="comment"># 实例化测试集</span></span><br><span class="line">suite.addTest(calc_Test(<span class="string">'test_add01'</span>))<span class="comment"># 加载单个测试用例到测试集中</span></span><br><span class="line">r=unittest.TestResult()<span class="comment"># 实例化一个测试结果用于存储测试结果</span></span><br><span class="line">suite.run(result=r)<span class="comment"># 以测试集方式执行测试</span></span><br></pre></td></tr></table></figure><h2 id="TestRunner"><a href="#TestRunner" class="headerlink" title="TestRunner"></a>TestRunner</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">suite=unittest.TestSuite()<span class="comment"># 实例化测试集</span></span><br><span class="line">suite.addTest(calc_Test(<span class="string">'test_add01'</span>))<span class="comment"># 加载单个测试用例到测试集中</span></span><br><span class="line">unittest.TextTestRunner().run(suite)<span class="comment"># 执行测试集</span></span><br></pre></td></tr></table></figure><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统自带生成报告</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'report.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    unittest.TextTestRunner(stream=file,verbosity=<span class="number">2</span>).run(suite)</span><br><span class="line"><span class="comment"># 利用第三方库HTMLTestRunner</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'report.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    HTMLTestRunner(stream=file,verbosity=<span class="number">2</span>,title=<span class="string">'测试报告'</span>,description=<span class="string">'计算器的测试报告'</span>).run(suite)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Selenium</title>
      <link href="/2018/07/19/Selenium%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/19/Selenium%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>chromedriver: <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></p><p>firefoxdriver: <a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a></p><h2 id="WebDriver方法"><a href="#WebDriver方法" class="headerlink" title="WebDriver方法"></a>WebDriver方法</h2><p>WebDriver对象有好几种方法，用于在页面中寻找元素。它们被分成find_element_<em>和find_elements_</em>方法。find_element_<em>方法返回一个 WebElement 对象，代表页面中<br>匹配查询的第一个元素。find_elements_</em>方法返回 WebElement_*对象的列表，包含页面中所有匹配的元素。<br>selenium 的 WebDriver 方法，用于寻找元素：</p><table><thead><tr><th>方法名</th><th>返回的 WebElement 对象/列表</th></tr></thead><tbody><tr><td>browser.find_element_by_class_name(name)</td><td>使用 CSS 类 name 的元素</td></tr><tr><td>browser.find_elements_by_class_name(name)</td><td>-</td></tr><tr><td>browser.find_element_by_css_selector(selector)</td><td>匹配 CSS selector 的元素</td></tr><tr><td>browser.find_elements_by_css_selector(selector)</td><td>-</td></tr><tr><td>browser.find_elements_by_link_text(text)</td><td>完全匹配提供的 text 的<a>元素</a></td></tr><tr><td>browser.find_element_by_link_text(text)</td><td>-</td></tr><tr><td>browser.find_elements_by_partial_link_text(text)</td><td>包含提供的 text 的<a>元素</a></td></tr><tr><td>browser.find_element_by_partial_link_text(text)</td><td>-</td></tr><tr><td>browser.find_element_by_name(name)</td><td>匹配 name 属性值的元素</td></tr><tr><td>browser.find_elements_by_name(name)</td><td>-</td></tr><tr><td>browser.find_element_by_tag_name(name)</td><td>匹配标签 name 的元素</td></tr><tr><td>browser.find_elements_by_tag_name(name)</td><td>(大小写无关，<a>元素匹配’a’和’A’)</a></td></tr></tbody></table><h2 id="WebElement"><a href="#WebElement" class="headerlink" title="WebElement"></a>WebElement</h2><p>WebElement 的属性和方法</p><table><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>tag_name</td><td>标签名，例如 ‘a’表示<a>元素</a></td></tr><tr><td>get_attribute(name)</td><td>该元素 name 属性的值</td></tr><tr><td>Text</td><td>该元素内的文本，例如<span>hello</span>中的’hello’</td></tr><tr><td>clear()</td><td>对于文本字段或文本区域元素，清除其中输入的文本</td></tr><tr><td>is_displayed()</td><td>如果该元素可见，返回 True，否则返回 False</td></tr><tr><td>is_enabled()</td><td>对于输入元素，如果该元素启用，返回 True，否则返回 False</td></tr><tr><td>is_selected()</td><td>对于复选框或单选框元素，如果该元素被选中，选择 True，否则返回 False</td></tr><tr><td>Location</td><td>一个字典，包含键’x’和’y’，表示该元素在页面上的位置</td></tr></tbody></table><h2 id="模拟键盘侠"><a href="#模拟键盘侠" class="headerlink" title="模拟键盘侠"></a>模拟键盘侠</h2><p>selenium 有一个模块，针对不能用字符串值输入的键盘击键。它的功能非常类似于转义字符。这些值保存在 selenium.webdriver.common.keys 模块的属性中。<br>由于这个模块名非常长，所以在程序顶部运行 from selenium.webdriver. common.keys importKeys 就比较容易。<br>如果这么做，原来需要写 from selenium. webdriver.common.keys 的地方，就只要写 Keys。<br>selenium.webdriver.common.keys 模块中常用的变量：</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>Keys.DOWN, Keys.UP, Keys.LEFT,Keys.RIGHT</td><td>键盘箭头键</td></tr><tr><td>Keys.ENTER, Keys.RETURN</td><td>回车和换行键</td></tr><tr><td>Keys.HOME, Keys.END,Keys.PAGE_DOWN,Keys.PAGE_UP</td><td>Home 键、End 键、PageUp 键和 Page Down 键</td></tr><tr><td>Keys.ESCAPE, Keys.BACK_SPACE,Keys.DELETE</td><td>Esc、Backspace 和字母键</td></tr><tr><td>Keys.F1, Keys.F2, . . . , Keys.F12</td><td>键盘顶部的 F 1 到 F 12 键</td></tr><tr><td>Keys.TAB</td><td>Tab 键</td></tr></tbody></table><h2 id="模拟浏览器按钮"><a href="#模拟浏览器按钮" class="headerlink" title="模拟浏览器按钮"></a>模拟浏览器按钮</h2><p>selenium 也可以模拟点击各种浏览器按钮</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>browser.back()</td><td>点击“返回”按钮</td></tr><tr><td>browser.forward()</td><td>点击“前进”按钮</td></tr><tr><td>browser.refresh()</td><td>点击“刷新”按钮</td></tr><tr><td>browser.quit()</td><td>点击“关闭窗口”按钮</td></tr></tbody></table><h2 id="selenium的等待方式"><a href="#selenium的等待方式" class="headerlink" title="selenium的等待方式"></a>selenium的等待方式</h2><ul><li>隐式等待：implicitly_wait(xx)  #xx填写隐式等待的时间</li><li>显示等待：Webdriver参数和方法：selenium.webdriver.support.wait.WebDriverWait（类）</li></ul><table><thead><tr><th><strong>init</strong></th><th></th></tr></thead><tbody><tr><td>driver</td><td>传入WebDriver实例，即我们上例中的driver</td></tr><tr><td>timeout</td><td>超时时间，等待的最长时间（同时要考虑隐性等待时间</td></tr><tr><td>poll_frequency</td><td>调用until或until_not中的方法的间隔时间，默认是0.5秒</td></tr><tr><td>ignored_exceptions</td><td>忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常，则不中断代码，继续等待，如果抛出的是这个元组外的异常，则中断代码，抛出异常默认只有NoSuchElementException。</td></tr><tr><td>until</td><td></td></tr><tr><td>method</td><td>在等待期间，每隔一段时间调用这个传入的方法，直到返回值不是False</td></tr><tr><td>message</td><td>如果超时，抛出TimeoutException，将message传入异常</td></tr><tr><td>until_not</td><td>与until相反，until是当某元素出现或什么条件成立则继续执行</td></tr></tbody></table><p><strong>WebDriverWait(driver, 超时时长, 调用频率, 忽略异常).until(可执行方法, 超时时返回的信息)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><h2 id="下拉框处理"><a href="#下拉框处理" class="headerlink" title="下拉框处理"></a>下拉框处理</h2><p>利用Select模块处理下拉框</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line">Select提供了三种选择某一项的方法</span><br><span class="line">select_by_index通过索引定位；index索引是从“<span class="number">0</span>”开始；</span><br><span class="line">select_by_value通过value值定位；value是option标签的一个属性值，并不是显示在下拉框中的值；</span><br><span class="line">select_by_visible_text通过文本值定位；visible_text是在option标签中间的值，是显示在下拉框的值；</span><br><span class="line">Select(下拉框定位).select_by_(三种方法之一)</span><br></pre></td></tr></table></figure><h2 id="Selenium-Grid"><a href="#Selenium-Grid" class="headerlink" title="Selenium Grid"></a><strong>Selenium Grid</strong></h2><p>Selenium Grid主要用于分布式执行测试，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Appium参数</title>
      <link href="/2018/06/10/Appium%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/06/10/Appium%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Appium安装"><a href="#Appium安装" class="headerlink" title="Appium安装"></a>Appium安装</h2><p>下载地址：<a href="https://github.com/appium/appium-desktop/releases/" target="_blank" rel="noopener">https://github.com/appium/appium-desktop/releases/</a></p><h2 id="Appium参数"><a href="#Appium参数" class="headerlink" title="Appium参数"></a>Appium参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">desired_caps = &#123;&#125;  <span class="comment"># 定义webdriver的兼容性设置字典对象</span></span><br><span class="line">desired_caps[<span class="string">'platformName'</span>] = <span class="string">'Android'</span>  <span class="comment"># 指定测试Android平台</span></span><br><span class="line">desired_caps[<span class="string">'platformVersion'</span>] = version  <span class="comment"># 指定移动端的版本号</span></span><br><span class="line">desired_caps[<span class="string">'deviceName'</span>] = <span class="string">'Appium'</span> <span class="comment"># 指定设备名称</span></span><br><span class="line"><span class="comment"># desired_caps['automationName'] = 'uiautomator2'</span></span><br><span class="line">desired_caps[<span class="string">'appPackage'</span>] = <span class="string">'com.mobivans.onestrokecharge'</span>  <span class="comment"># 指定要启动的包</span></span><br><span class="line">desired_caps[<span class="string">'appActivity'</span>] = <span class="string">'com.stub.stub01.Stub01'</span>  <span class="comment"># 指定启动的主类程序</span></span><br><span class="line">desired_caps[<span class="string">'unicodeKeyboard'</span>] = <span class="string">'True'</span>  <span class="comment"># 使用中文输入法</span></span><br><span class="line">desired_caps[<span class="string">'udid'</span>] = udid <span class="comment"># 指定模拟器设备编号(adb devices输出结果)</span></span><br><span class="line">desired_caps[<span class="string">'noReset'</span>] = <span class="string">'True'</span>  <span class="comment"># 不重置应用程序的状态，默认为false</span></span><br></pre></td></tr></table></figure><p>Appium内置的配置参数非常多，主要分为两大类。一类是命令行启动参数，主要用于在命令行启动Appium服务器的时候指定的参数。一类是脚本开发时的兼容性设置参数，如前一节内容中的desired_caps字典对象指定的参数值。两种类别的参数有些是可以互相代替的，比如在启动命令中未指定，而通过字典对象在脚本中指定，结果一样。先来看看两种类型的参数中比较重要的参数。<br>命令行启动参数</p><ul><li>-a 绑定的IP地址：如appium –a 192.168.1.5，默认不指定的情况下为localhost，也即是127.0.0.1，适用于为本机脚本提供连接。当然，我们也可以让测试脚本连接远程Appium服务器。</li><li>-p 服务器端口号：Appium服务器启动时绑定的端口号，用于脚本的通信，默认值为4723。此处需要注意的是，一个端口号只能服务于一台移动设备，如果我们需要同时对多台针对设备进行测试，那么则需要启动多个Appium服务器，每一个服务器实例需要绑定不同的端口号。</li><li>-bp 连接移动端设备的端口号，即Bootstrap端口，默认值为4724。如果需要连接多台移动设备，则需要启动不同端口的Appium服务器并且指定不同的设备端口号。即需要单独为不同的设备，启动不同端口的Appium服务器，并且指定不同的Bootstrap端口号，否则会导致冲突。</li><li>–app 应用程序路径：指定调试模式下的iOS应用或标准的Android系统的APK应用程序的路径，通常情况下不建议在启动时指定，而是在测试脚本中通过字典对象来指定应用程序路径。如果是针对非调试模式下的iOS设备，则对应参数为–ipa。如果已经在手机上安装了相应的应用，则勿需指定，只需要通知移动端代理启动应用即可。</li><li>–app-pkg：指定要测试的应用程序的主包名，与测试脚本中指定的功能一致。该参数仅Android端适用。</li><li>–app-activity：指定要测试的应用程序的主类名，与测试脚本中指定的功能一致。该参数仅Android端适用。</li><li>-U 设备编号：在启动时直接指定当前服务器连接到哪个设备终端。其编号可以从命令“adb devices”的输出列表中获取。一台设备，当连接上电脑后一定有一台唯一的编号。也可以通过参数“–udid”指定，二者效果一致。</li><li>–session-override：当连接过程出现Session冲突的时候，允许被覆盖。目前使用情况较少。</li><li>–full-reset：完全重置被测试应用程序的状态，包括将测试应用程序全部删除。</li><li>–no-reset：不重置状态，不删除应用。</li><li>-g 日志文件：将Appium运行过程的日志输出到指定的日志文件中，便于后续查看。通常情况下，在正式进行测试的过程，我们最好将日志输出到文件，便于永久保存和后续分析。该参数也可以使用“–log”代替。</li><li>–log-timestamp：在终端输出里显示时间戳，便于更好地知道日志输出的时间。</li><li>–log-level：在终端里输出的日志级别，可以设置为debug，info，warn，error等级别。</li><li>–device-name：指定待测试的移动设备的名称，也可在测试脚本中指定。</li><li>–platform-name：指定移动设备对应的平台的名称，如Android或iOS，也可在测试脚本中指定。</li><li>–platform-version：指定移动设备系统对应的版本号，如4.4.2，也可在测试脚本中指定。<br>比如可以通过以下命令启动Appium，来指定IP地址，端口号，Bootstrap端口号，设备编号，不重置状态，输出时间戳在日志中，覆盖Session连接状态，并将日志信息输出到指定的日志文件中进行永久保存：appium -a 127.0.0.1 -p 4723 –bp 4724 –U 127.0.0.1:62001 –no-reset –session-override –log-timestamp –log D:\appium.log</li></ul><h2 id="测试脚本字典参数"><a href="#测试脚本字典参数" class="headerlink" title="测试脚本字典参数"></a>测试脚本字典参数</h2><p>(platformName、platformVersion、deviceName、app、browserName、udid、noReset、appActivity、appPackage、unicodeKeyboard)<br>在测试脚本中的字典参数有很多与命令行参数功能类似，只是参数名称不一样，现列举如下：</p><ul><li>automationName：指定自动化测试引擎，可以是Appium (默认) 或 Selendroid。如果是较新的Android版本，如6.0以上，则必须明确指定automationName=’ uiautomator2’。</li><li>platformName：指定要测试的手机操作系统，如：iOS，Android或FirefoxOS。</li><li>platformVersion：移动操作系统版本，如4.4.2。</li><li>deviceName：使用的手机类型或模拟器类型。在iOS中，必须使用“instruments -s devices”命令得到的设备编号。</li><li>app：指定待测试应用程序。</li><li>browserName：如果是针对手机上的浏览器应用进行测试，需要指定其浏览器名称。在iOS上可用“Safari”，在Android上可指定“Chrome”，“Chromium”或“Browser”。</li><li>newCommandTimeout：设置命令超时时间，单位：秒。达到超时时间仍未接收到新的命令时Appium 会假设客户端退出然后自动结束会话。</li><li>autoLaunch：Appium是否需要自动安装和启动应用，默认值为true。</li><li>udid：连接的移动设备的唯一设备标识</li><li>autoWebview：直接转换到 WebView 上下文。 默认值为false。</li><li>noReset：不要在会话前重置应用状态，默认为false。</li><li>fullReset：在会话结束后自动清除被测应用，默认为false。</li><li>appActivity：应用包中启动的 Android Activity 主类名称。它通常需要在前面添加“.”。</li><li>appPackage：想运行的Android应用程序的主包名。</li><li>deviceReadyTimeout：设置等待一个模拟器或真机准备就绪的超时时间。</li><li>unicodeKeyboard：设置使用Unicode输入法，这样才能支持中文输入。</li><li>resetKeyboard：在使用了unicodeKeyboard参数后，对其进行重置，还原为默认设置。<br>完整的参数列表，访问Appium官方网站查阅：<a href="http://appium.io/docs/en/writing-running-appium/caps/" target="_blank" rel="noopener">http://appium.io/docs/en/writing-running-appium/caps/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ADB常用命令</title>
      <link href="/2018/06/03/ADB%20shell/"/>
      <url>/2018/06/03/ADB%20shell/</url>
      
        <content type="html"><![CDATA[<h1 id="adb-shell-命令"><a href="#adb-shell-命令" class="headerlink" title="adb shell 命令"></a>adb shell 命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">adb devices# 列出以连接的设备</span><br><span class="line">adb shell # 连接终端</span><br><span class="line">adb root # 进入root</span><br><span class="line">adb remount# 挂载手机</span><br><span class="line">adb install /test.apk# 安装test应用</span><br><span class="line">adb uninstall [packageName]  eg:adb uninstall com.miui.calculator </span><br><span class="line"><span class="meta">#</span> 卸载应用程序</span><br><span class="line">adb reboot bootloader# 进入fastboot模式</span><br><span class="line">adb reboot recovery# 进入recovery模式</span><br><span class="line">adb shell getprop# 获取Android的系统属性</span><br><span class="line">adb push c:/test.apk /mnt/sdcard# 将电脑C盘的test.apk push到手机端</span><br><span class="line">adb pull /mnt/sdcard/test.apk c:/# 将手机端的test.apk pull到电脑端</span><br><span class="line">adb shell pm list package -f # 获取手机内所有APK对应的路径和包名</span><br><span class="line">adb logcat &gt; D:/log.txt# 将获取的log日志放入D:/log.txt</span><br><span class="line">adb shell ps# 查看进程</span><br><span class="line">adb shell top -m 5# CPU占用前5名</span><br><span class="line">adb shell /system/app# 查看所有的APP文件</span><br><span class="line">adb shell dumpsys activity # 查询AMS服务相关信息</span><br><span class="line">adb shell dumpsys window # 查询WMS服务相关信息</span><br><span class="line">adb shell dumpsys cpuinfo # 查询CPU情况</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span> adb手机操作</span><br><span class="line">adb shell input keyevent 3# 模拟点击home键</span><br><span class="line">adb shell input keyevent 4# 模拟点击back键</span><br><span class="line">adb shell input text “001”# 输入001</span><br><span class="line">adb shell input tap 250 250# 点击坐标为（250，250）的位置</span><br><span class="line">adb shell input swipe 250 250 300 300# 滑动屏幕由（250，250）到（300，300）</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">adb shell dumpsys meminfo [packageName]# 查询内存情况</span><br><span class="line">adb logcat -b erents |findstr am_activity_launch_time# 查看APP启动时间</span><br><span class="line">adb shell cat /sys/class/leds/lcd-backlight/brighthess# 查看当前手机屏幕亮度</span><br><span class="line">adb shell screencap -p /sdcard/screen.png# 截图保存</span><br><span class="line">adb shell screenrecord --time-limit 10 /sdcard/demo.mp4 # 录制10秒的视频</span><br><span class="line">adb shell dumpsys activity | grep mFocusedActivity</span><br><span class="line"><span class="meta">#</span> 获取app的 appPackage和appActivity</span><br><span class="line">adb shell am start -n [packageName]/[packageName].[activityName]# 启动APP</span><br><span class="line">adb shell am start -n com.miui.calculator/.cal.CalculatorActivity </span><br><span class="line"><span class="meta">#</span> 命令行启动APP应用程序计算器</span><br><span class="line">aapt dump badging # 绝对路径/XX.apk 查询apk的包名和类名</span><br><span class="line">adb shell am start -n com.miui.calculator/</span><br><span class="line">com.miui.calculator.cal.CalculatorActivity</span><br><span class="line"><span class="meta">#</span> 打开一笔记账应用程序：</span><br><span class="line">adb shell am start -n com.mobivans.onestrokecharge/com.stub.stub01.Stub01 </span><br><span class="line">adb kill-server   # 停止adb服务器</span><br><span class="line">adb start-server  # 启动adb服务器</span><br><span class="line">adb shell pm list packages # 查询系统的应用程序包名；</span><br><span class="line">adb shell pm list packages -s # 指定查询系统自带的包名；</span><br><span class="line">adb shell pm list packages -3 # 查询第三方程序的包名  </span><br><span class="line">adb shell ps | findstr adbd # 查询运行在 Android 设备上的 adb 后台进程</span><br><span class="line">adb bugreport &gt; d:\bugreport.log # 打印缺陷日志报告至指定文件</span><br><span class="line">adb shell screencap -p /data/local/tmp/test001.png # 屏幕截图至指定路径</span><br><span class="line">adb shell getprop ro.serialno # 获取设备序列号</span><br><span class="line">adb get-serialno # 获取设备ID号</span><br><span class="line">adb shell monkey -p com.miui.calculator -s 999 --throttle 500 -v-v-v 300 </span><br><span class="line"><span class="meta">#</span> 每隔500毫秒执行一个事件，按随机种子ID为999，执行300次,显示详细信息</span><br><span class="line">adb shell monkey --pkg-whitelist-file /data/local/tmp/file.txt 1000</span><br><span class="line"><span class="meta">#</span> (需要提前将文件准备好)；准备白名单/黑名单的清单文件--上传至手机指定路径下--执行命令</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手机测试基础</title>
      <link href="/2018/06/03/%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/06/03/%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="APP测试基本流程"><a href="#APP测试基本流程" class="headerlink" title="APP测试基本流程"></a>APP测试基本流程</h1><h2 id="测试周期"><a href="#测试周期" class="headerlink" title="测试周期"></a>测试周期</h2><p>测试周期可按项目的开发周期来确定测试时间，一般测试时间为两三周，根据项目的情况以及版本的质量可以适当缩短和延测试时间</p><h2 id="测试资源"><a href="#测试资源" class="headerlink" title="测试资源"></a>测试资源</h2><p>测试任务开始前，检查各项测试资源</p><ul><li>产品功能需求文档</li><li>产品原型图</li><li>产品效果图</li><li>测试设备</li><li>其他</li></ul><h1 id="APP测试点"><a href="#APP测试点" class="headerlink" title="APP测试点"></a>APP测试点</h1><h2 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h2><h3 id="软件权限"><a href="#软件权限" class="headerlink" title="软件权限"></a>软件权限</h3><ol><li>扣费风险：发送短信、拨打电话、连接网络等</li><li>隐私泄露风险：包括访问手机信息、联系人信息等</li><li>对APP的输入有效性校验、认证、授权、敏感数据存储、数据加密等方面进行检测</li><li>限制/允许使用手机功能接入互联网</li><li>限制/允许使用手机发送接收短信功能</li><li>限制/允许应用程序来注册自动启动应用程序</li><li>限制或使用本地连接</li><li>限制/允许使用手机拍照或录音</li><li>限制/允许使用手机读写用户数据</li><li>检测APP的用户授权级别、数据泄露、非法访问授权</li></ol><h3 id="安装与卸载安全性"><a href="#安装与卸载安全性" class="headerlink" title="安装与卸载安全性"></a>安装与卸载安全性</h3><ol><li>应用程序能正确安装到设备驱动程序上</li><li>能够在安装设备驱动程序上找到应用程序的相应图标</li><li>是否包含数字签名信息</li><li>没有用户的允许，应用程序不能预先设定自动启动</li><li>卸载是否安全，其安装进去的文件是否全部卸载</li><li>卸载用户使用过程中产生的文件是否有提示</li><li>其修改的配置信息是否复原</li><li>卸载是否影响其他软件的功能</li></ol><h3 id="数据安全性"><a href="#数据安全性" class="headerlink" title="数据安全性"></a>数据安全性</h3><ol><li>当将密码或其他敏感数据输入到应用程序时，其不会被储存在设备中，同时密码也不会被解码</li><li>被输入面膜不能以明文形式进行显示</li><li>密码，信用卡明细，或其他的铭感数据将不被存储在他们与输入的位置</li><li>不同的应用程序的个人身证或密码长度必须至少在4-8个数字长度之间</li><li>当应用程序处理信用卡明细，或其他的敏感数据时，不以明文形式将数据写入其他单独的文件或者临时文件</li><li>防止应用程序异常终止而有没有侧除他的临时文件，文件可能遭受入侵者袭击，然后读取这些数据信息</li><li>当将敏感数据输入到应用程序时，其不会被储存在设备中</li><li>备份应该加密，恢复数据应考虑回复过程的异常 通讯中断等，数据回复后在使用前应该经过校验</li><li>应用程序应考虑系统或者虚拟机器产生的用户提示信息或安全警告</li><li>应用程序不能忽略系统或者虚拟机产生的用户提示信息或警告，更不能在安全警告显示前，利用错误信息欺骗用户，应用程序不应该模拟进行安全警告误导用户</li><li>在数据删除之前，应用程序应当通知用户或者应用程序提供一个’取消’命令的操作</li><li>‘取消’命令操作能够按照设计要求实现其功能</li><li>应用程序应当能处理当不允许应用程序连接到个人信息管理的情况</li><li>当进行读或写应用信息操作时，应用程序将会向用户发送一个操作错误的提示信息</li><li>在没有用户明确许可的前提下不损坏侧除个人信息管理应用程序中的任何内容</li><li>应用程序读和写正常</li><li>应用程序应当有异常保护</li><li>如果数据库重要的数据正要被重写，应及时告知用户</li><li>能合理的处理出现的错误</li><li>意外情况应提醒用户</li></ol><h3 id="通讯安全性"><a href="#通讯安全性" class="headerlink" title="通讯安全性"></a>通讯安全性</h3><ol><li>软件运行过程中，如果有来电、SMS、EMS、MMS、蓝牙、红外等通讯或充电时，是否能暂停程序、优先处理通讯，并在处理完毕后能正常回复软件，继续其原来的功能</li><li>当创立连接时，应用程序能够处理因为网络连接中断，进而告知连接中断的情况</li><li>应用处理通讯延时或中断</li><li>应用程序将保护工作到程序超时，进而发送给用户一个连接超时的错误信息提示</li><li>处理网络异常并及时将异常情况通报用户</li></ol><h3 id="人机接口安全性"><a href="#人机接口安全性" class="headerlink" title="人机接口安全性"></a>人机接口安全性</h3><ol><li>返回菜单保持可用</li><li>命令有优先权</li><li>声音设置不影响程序功能</li><li>应用程序适应屏幕大小</li><li>能够处理应对用户同时操作多个按键的情况</li></ol><h2 id="安装、卸载测试"><a href="#安装、卸载测试" class="headerlink" title="安装、卸载测试"></a>安装、卸载测试</h2><p>验证APP是否能正确安装、运行、卸载以及操作过程和操作前后对系统资源的使用情况</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>软件在不同操作系统下安装是否成功</li><li>软件安装后是否能够正常运行，安装后的文件夹是否写到指定目录下</li><li>软件安装各个选项的组合是否符合概要设计说明书</li><li>软件安装向导UI测试</li><li>软件安装过程是否可以取消，点击取消后，写入的文件是否如概要设计说明书</li><li>软件安装过程中的一场情况（关机、死机、断电、内存占用满）</li><li>安装空间不足</li><li>安装后没有生成多余的目录结构和文件</li><li>对于需要通过网络验证的安装，需要在断网、弱网的场景下测试</li></ol><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ol><li>直接删除安装文件夹卸载是否有提示信息</li><li>卸载后文件夹是否被全部删除或保留缓存</li><li>卸载过程的异常情况（死机、断电、重启、内存占用过满）</li></ol><h2 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h2><p>测试用户界面布局、风格是否一致，文字是否正确，页面是否美观，操作是否友好</p><h3 id="导航测试"><a href="#导航测试" class="headerlink" title="导航测试"></a>导航测试</h3><ol><li>按钮、对话框、列表和窗口等；或在不同的连接页面之间需要导航</li><li>是否易于导航、导航是否直观</li><li>是否需要搜索引擎</li><li>导航帮助是否准确直观</li><li>导航与页面结构、菜单、连接风格的风格是否一致</li></ol><h3 id="图形测试"><a href="#图形测试" class="headerlink" title="图形测试"></a>图形测试</h3><ol><li>横向对比，个控件操控方式是否统一</li><li>自适应页面操作，内容根据页面大小自适应</li><li>页面标签是否统一</li><li>页面是否美观</li><li>页面的图片应有其实际意义而要求整体有序美观</li><li>图片质量要高且图片尺寸在设计符合要求的情况下应该尽量小</li><li>页面整体使用颜色不宜过多</li></ol><h3 id="内容测试"><a href="#内容测试" class="headerlink" title="内容测试"></a>内容测试</h3><ol><li>输入框说明文字的内容与系统功能是否一致</li><li>文字长度是否加以限制</li><li>文字内容是否表意不明</li><li>是否有错别字</li><li>信息是否为中文显示</li><li>是否有敏感性词汇、关键词</li><li>是否有敏感性图片</li></ol><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ol><li>APP安装完成后的试运行，可正常打开软件</li><li>APP打开测试，是否有加载状态进度提示</li><li>APP打开速度</li><li>APP页面切换流畅、逻辑是否正确</li><li>注册<ol><li>同表单编辑页面</li><li>用户密码和长度</li><li>注册后的提示页面</li><li>前台注册页面和后台管理页面数据是否一致</li><li>注册后在后天管理中的页面提示</li></ol></li><li>登陆<ol><li>使用合法的用户登陆</li><li>系统是否允许多次非法登陆，是否有次数限制</li><li>使用已登陆的账户登陆系统是否正常处理</li><li>使用禁止的账号登陆系统是否正常处理</li><li>用户名、密码、验证码漏填时候是否能登陆</li><li>删除或修改后的用户，原账户登陆</li><li>不输入用户名或密码；重复点击（登陆）按键是否允许登陆</li><li>登陆后页面的登陆信息</li><li>页面注销</li><li>登陆超时处理</li></ol></li><li>注销<ol><li>注销原模块，新的模块系统能否正确处理</li><li>终止注销能否返回原模块，原用户</li><li>注销原用户新系统能否正确处理</li><li>使用错误的账号、密码、无权限的被禁用的账号进行注销</li></ol></li></ol><h3 id="应用的前后台切换"><a href="#应用的前后台切换" class="headerlink" title="应用的前后台切换"></a>应用的前后台切换</h3><ol><li>APP切换到后台，再回到APP，检查是否停留在上一次操作界面</li><li>APP切换到后台，再回到APP，检查功能及应用状态是否正常 </li><li>APP切换到后台在回到前台时，注意程序是否崩溃，功能状态是否正常，尤其对于从后台切换回前台的数据有自动更新的时候</li><li>手机锁屏解屏后进入APP注意是否会崩溃，功能状态是否正常，尤其对于从后台切换回前数据有自动更新的时候</li><li>当APP使用过程中有电话打进来，中断后再切回APP，功能是否正常</li><li>当杀掉APP进程后，再开启APP，APP是否能正常启动</li><li>出现必须处理的提示框后，切换到后台，再切换回来，检查提示框是否还存在，有时候会对出现应用自动跳过提示框的缺陷</li><li>对于有数据交换的页面，每一个页面都必须要进行前后台切换、锁屏的测试，这种页面最容易出现崩溃</li></ol><h3 id="免登陆"><a href="#免登陆" class="headerlink" title="免登陆"></a>免登陆</h3><ol><li>APP有免登陆功能的时候，需要考虑ios或安卓的版本差异</li><li>考虑无网路的情况下能否进入到免登陆状态</li><li>切换用户登陆后，需验证用户登陆信息及数据内容是否相应更新，确保原用户退出</li><li>根据MTOP的现有规则，一个账户只允许登陆一个机器，所以，需要检查一个账户登陆多个手机的情况，元手机里的账户被踢出需要友好提示</li><li>APP切换到后台，再切回前台的校验</li><li>密码更换后，检查有数据交换时是否进行了有效身份的验证</li><li>支持自动登陆的应用在进行数据交换时，检查系统是否能自动登陆成功并且数据操作无误</li><li>检查用户主动退出登陆后，下次再启动APP，应停留在登陆界面</li></ol><h3 id="离线浏览"><a href="#离线浏览" class="headerlink" title="离线浏览"></a>离线浏览</h3><p>很多应用支持离线浏览，即在本地客户端会缓存一部分数据供用户查看</p><ol><li>在无网络情况可以浏览本地数据</li><li>退出APP再开启APP时能正常浏览</li><li>切换后台，再切换前台可以正常浏览</li><li>屏锁后再解锁回应用前台可以正常浏览</li><li>在对服务端的数据有更新时会给予离线的相应提示</li></ol><h3 id="APP更新"><a href="#APP更新" class="headerlink" title="APP更新"></a>APP更新</h3><ol><li>客户端新版本更新通知</li><li>当版本为强制更新/非强制更新 </li></ol><h3 id="定位、照相机服务"><a href="#定位、照相机服务" class="headerlink" title="定位、照相机服务"></a>定位、照相机服务</h3><ol><li>APP有使用到相机、定位服务时，需要注意系统版本差异</li><li>APP有使用到相机、定位服务时，需要进行前后台切换测试，检查应用是否正常</li><li>当定位服务没有开启时，使用定位服务，会弹出是否允许定位的提示框，当确定允许设置，自动跳转到设置中开启定位服务</li><li>测试定位、照相机服务时，需要采用真机进行测试</li></ol><h3 id="时间测试"><a href="#时间测试" class="headerlink" title="时间测试"></a>时间测试</h3><h3 id="PUSH测试"><a href="#PUSH测试" class="headerlink" title="PUSH测试"></a>PUSH测试</h3><ol><li>检查push消息是否按照指定的业务规则推送</li><li>检查不接受推送消息时，用户不再接受到push</li><li>检查用户在免打扰时间段，是否能接受到push</li><li>当push消息时针对不同登陆用户的，检查push与用户身份是否一致</li><li>测试push,需要使用真机</li></ol><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>评估APP的时间和空间特性：</p><ol><li><p>极限测试：在各种边界压力下，如电池、存储、网速等，验证APP是否正确响应</p><ol><li>内存占满时安装APP</li><li>运行APP时手机断电</li><li>运行APP时断掉网络</li></ol></li><li><p>响应能力测试：测试APP中各类操作是否满足用户响应时间要求 - 一般使用云测</p></li><li><p>压力测试：反复/长期操作下，系统资源是否占用异常</p><ol><li>APP反复安装/卸载，产看系统 资源是正常</li><li>其他功能反复进行操作，查看系统资源是否正常</li></ol></li><li><p>性能测试：评估典型用户使用场景，系统资源的使用情况</p></li></ol><h2 id="交叉事件测试"><a href="#交叉事件测试" class="headerlink" title="交叉事件测试"></a>交叉事件测试</h2><ol><li>多个APP同时运行是否影响正功能</li><li>APP运行时前/后台切换是否影响正常功能</li><li>APP运行时拨打/接听电话</li><li>APP运行时发送/接受短信</li><li>APP运行时发送接受邮件</li><li>APP运行时切换2G/3G/4G/5G网络</li><li>APP运行时使用蓝牙</li><li>APP运行时使用相机，计算机及手机的快捷键操作</li></ol><h2 id="兼任测试"><a href="#兼任测试" class="headerlink" title="兼任测试"></a>兼任测试</h2><p>主要测试内部和外部的安全性</p><h2 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h2><ol><li>BUG修复后且在新版本发布后需要进行回归测试</li><li>BUG修复后的回归测试在交付前、需要进行全部用例的回归测试</li></ol><h2 id="升级、更新测试"><a href="#升级、更新测试" class="headerlink" title="升级、更新测试"></a>升级、更新测试</h2><p>新版本发布后，配合不同网络环境的自动更新提示及下载、安装、更新、启动、运行的验证测试</p><ol><li>测试升级后的功能是否与需求说明一样</li><li>测试与升级模块相关的模块功能是否与需求一致</li><li>升级安装意外情况的测试（死机、断电、重启）</li><li>升级界面的UI测试</li><li>不同操作系统的升级</li></ol><h2 id="用户体验测试"><a href="#用户体验测试" class="headerlink" title="用户体验测试"></a>用户体验测试</h2><ol><li>是否有空数据界面设计，引导用户执行操作</li><li>是否滥用用户引导</li><li>不可点击的按钮是否有直观提示</li><li>菜单层次是否太深</li><li>交互流程分支是否太多</li><li>相关的选项是否离的太远</li><li>一次是否载入太多数据</li><li>界面标签的可点击范围</li><li>标签页是否跟内容没有从属关系，当切换标签的时候，内容跟着切换</li><li>操作应该有主次从属关系</li><li>是否定义back的逻辑，涉及软硬件交互时，back键应具体定义</li><li>是否有横屏的设计</li></ol><h2 id="硬件环境测试"><a href="#硬件环境测试" class="headerlink" title="硬件环境测试"></a>硬件环境测试</h2><h3 id="手势操作系统"><a href="#手势操作系统" class="headerlink" title="手势操作系统"></a>手势操作系统</h3><ol><li>手机开锁屏</li><li>手机切换网络</li><li>切换前后台</li><li>应用间切换</li><li>APP运行期间关机</li><li>APP运行期间重启系统</li><li>APP运行期间充电</li><li>APP运行期间KILL进程，再打开</li></ol><h3 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h3><ol><li>无网络时，执行需要网络的操作，给与友好提示，确保程序不出现crash</li><li>内网测试时，需要注意到外网操作的异常情况处理</li><li>弱网情况下，执行需要网络的操作，给与友好提示，确保程序不出现crash</li><li>弱网情况下，检查提交的数据是否一致处于提交状态，提交失败后应有提示</li><li>弱网情况下，执行操作，在回调没有完成的情况下，退出本页或执行其他操作的情况，确保不会出现crash</li></ol><h3 id="服务器宕机"><a href="#服务器宕机" class="headerlink" title="服务器宕机"></a>服务器宕机</h3><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><h2 id="数据库测试"><a href="#数据库测试" class="headerlink" title="数据库测试"></a>数据库测试</h2><ol><li>一般的增、删、查、改测试</li><li>表不存在时能否自动创建</li><li>数据能否完整从客户端保存到数据库</li><li>业务进行修改后，客户端，服务器是否有相应的更新</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础</title>
      <link href="/2018/05/26/%E5%9F%BA%E7%A1%80%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/05/26/%E5%9F%BA%E7%A1%80%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><ul><li><strong>单元测试</strong>-UT-Unit Testing  （unittest单元测试框架、Junit-Java自带的单元测试框架 参照的需求文档文档：<strong>详细设计说明书</strong>）</li><li><strong>集成测试</strong>-IT-Intergration Testing （参照的需求文档：概要设计说明书（HLD））</li><li><strong>系统测试</strong>-ST-System Testing（参照的需求文档：需求规格说明书（SRS）/产品需求文档（PRD））</li><li><strong>验收测试</strong>-UAT-User Accept Test（参照的需求文档：需求规格说明书（SRS）；验收计划-项目型软件-用户参与）</li><li><strong>α测试</strong>-内测–开发在现场-可以掌控-部分用户参与-产品型软件</li><li><strong>β测试</strong>-公测–开发不在场–不可以掌控–生产环境、所有用户–产品型软件</li></ul><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><ul><li><p><strong>分析</strong> -  制定测试计划 – 资源（人力、软硬件）测试对象、测试范围、测试里程碑、组织架构、出口准则、测试挂起恢复准则等</p></li><li><p><strong>设计</strong> - 制定测试方案 – 测试对象、测试环境、测试策略、风险评估与应急措施、制定功能的重要级别、缺陷的重要级别等</p></li><li><p><strong>实现</strong> - 提取测试要点、编写测试用例、编写测试脚本 – 测试需求分析、测试用例、测试代码</p></li><li><p><strong>执行</strong>- 执行测试用例、运行测试脚本、提交缺陷、跟踪缺陷、提交测试报告</p></li></ul><h2 id="软件开发模型"><a href="#软件开发模型" class="headerlink" title="软件开发模型"></a>软件开发模型</h2><ul><li><p><strong>大爆炸模型</strong> - 无需求文档、无测试      </p></li><li><p><strong>瀑布模型</strong> - 串行执行、一句软件生命周期 </p></li><li><p><strong>迭代模型</strong> - 产品已在线上运行维护、周期短、项目小</p></li><li><p><strong>边写边改模型</strong> - 有非正规的需求文档   </p></li><li><p><strong>螺旋模型</strong> - 依据软件生命周期、加入制定目标、备份方案、风险分析及相应的解决方案</p></li><li><p><strong>敏捷开发模型</strong> -  敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态</p></li></ul><h2 id="测试过程模型"><a href="#测试过程模型" class="headerlink" title="测试过程模型"></a>测试过程模型</h2><ul><li><p><strong>V模型</strong> - 依据软件生命周期串行执行</p></li><li><p><strong>W模型/双V模型</strong> - 验证+确认，需求阶段介入测试</p></li><li><p><strong>H模型</strong> - 测试准备（测试需求分析、测试计划、测试方案、测试用例、测试脚本）+测试执行（运行脚本、执行用例、提交缺陷、跟踪缺陷、提交报告）</p></li><li><p><strong>X模型</strong> - 开发频繁交接代码模块，测试迭代测试，探索性测试</p></li></ul><h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><ul><li><p><strong>黑盒测试(系统测试阶段)</strong> - 不管程序的内部结构，只关注功能的测试方法</p></li><li><p><strong>黑盒测试方法</strong> -  等价类划分法、边界值法、判定表法、流程分析法/场景法、 正交实验、状态迁移法、因果图法、错误推测法</p></li><li><p><strong>灰盒测试(接口测试)</strong> - 既关注功能有关注程序内部结构 （集成测试阶段 - 灰盒测试 - 接口测试）</p></li><li><p><strong>接口测试类型</strong> </p><ul><li><p>基于代码的接口测试</p></li><li><p>基于协议的接口测试</p></li></ul></li><li><p><strong>白盒测试(单元测试阶段)</strong> - 只关注程序内部结构，不管功能是否满足需求，只关注代码设计</p></li><li><p><strong>白盒测试方法</strong> </p><ul><li><p>语句覆盖：覆盖每条语句，覆盖最弱</p></li><li><p>逻辑覆盖：与或非，覆盖逻辑</p></li><li><p>路径覆盖：覆盖每条路径，覆盖能力最强</p></li></ul></li></ul><h2 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h2><p>ISO9000：实体企业进行质量管理体系、CMMI：能力成熟度密性继承（软件的质量管理体系）、六西格玛</p><h3 id="软件质量模型"><a href="#软件质量模型" class="headerlink" title="软件质量模型"></a>软件质量模型</h3><ul><li><p><strong>功能性</strong> - 适合性、准确性、互操作性、保密安全性、功能性的依从性</p></li><li><p><strong>可靠性</strong> - 成熟性、容错性、易恢复性、可靠性的依从性</p></li><li><p><strong>易用性</strong> - 易理解性、吸引性、易学性、易操控性、易用性的依从性</p></li><li><p><strong>效率</strong> -  响应时间、事务处理能力、吞吐量、资源利用率</p></li><li><p><strong>可维护性</strong> - 易分析性、易改变性、已测试性、稳定性、可维护性的依从性</p></li><li><p><strong>可移植性</strong> - 适应性、已安装性、共存性、易替换性、可移植性的依从性</p></li></ul><h2 id="六大测试类型"><a href="#六大测试类型" class="headerlink" title="六大测试类型"></a>六大测试类型</h2><ul><li><p><strong>功能性测试</strong> - 功能是否实现</p></li><li><p><strong>兼容性测试</strong> - 检查软件在不同的硬件平台、软件平台上是否可以正常的运行，即是通常说的软件的可移植性。</p></li><li><p><strong>可用性测试</strong> - 美观、满足用户的使用习惯、吸引性、易学性、易操作性</p></li><li><p><strong>可靠性测试</strong> - 容错能力、恢复性</p></li><li><p><strong>安全性测试</strong> - 钱+生命、密码机制、权限测试</p></li><li><p><strong>性能测试</strong> - 响应时间、吞吐量、事务处理能力、资源利用率、每秒点击数、RPS（每秒处理的请求数）</p></li></ul><h2 id="WEB漏洞扫描工具"><a href="#WEB漏洞扫描工具" class="headerlink" title="WEB漏洞扫描工具"></a>WEB漏洞扫描工具</h2><p>X-scan</p><h2 id="WEB安全测试"><a href="#WEB安全测试" class="headerlink" title="WEB安全测试"></a>WEB安全测试</h2><p>攻击主要类型</p><ul><li>认证与授权</li><li>Session与Cookie</li><li>暴力破解</li><li>跨站请求伪造（CSFR）</li><li>文件上传漏洞</li><li>SQL、XML注入</li><li>跨站脚本攻击（XSS）</li><li>分布式拒绝服务攻击（DOS）</li><li>信息泄露</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2018/04/09/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/04/09/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="string">'hello'</span>, <span class="string">'hi'</span>, <span class="string">'howdy'</span>, <span class="string">'heyas'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.index(<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="列表中添加值"><a href="#列表中添加值" class="headerlink" title="列表中添加值"></a>列表中添加值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># append()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bat'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.append(<span class="string">'moose'</span>)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bat'</span>, <span class="string">'moose'</span>]</span><br><span class="line"><span class="comment"># insert()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bat'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.insert(<span class="number">1</span>,<span class="string">'chicken'</span>)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'chicken'</span>, <span class="string">'dog'</span>, <span class="string">'bat'</span>]</span><br></pre></td></tr></table></figure><h3 id="列表中删除值"><a href="#列表中删除值" class="headerlink" title="列表中删除值"></a>列表中删除值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'bat'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.remove(<span class="string">'bat'</span>)</span><br><span class="line">[<span class="string">'cat'</span>, <span class="string">'dog'</span>]</span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort()可以按数字顺序，字母顺序排序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.sort()</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>]</span><br><span class="line"><span class="comment"># 制定reverse关键字参数为True，让sort()排倒序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="number">9</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>浅拷贝<ul><li>浅拷贝只做最顶层的数据类型判断</li><li>如果顶层是<strong>可变</strong>类型则创建新的内存空间</li><li>如果顶层是<strong>不可变</strong>数据类型就是引用拷贝</li></ul></li><li>深拷贝<ul><li>深拷贝做递归拷贝，可以递归拷贝所有的内部嵌套数据（可以理解为循环遍历做浅拷贝判断）</li><li>深拷贝递归拷贝遇到<strong>可变</strong>类型则创建新的内存空间</li><li>深拷贝递归拷贝遇到<strong>不可变</strong>数据类型就是拷贝的引用</li></ul></li></ul><h3 id="列表复制"><a href="#列表复制" class="headerlink" title="列表复制"></a>列表复制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy()浅度复制，deepcopy()深度复制</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese = copy.copy(spam)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese</span><br><span class="line">[<span class="string">'a'</span>, <span class="number">1</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>, <span class="string">'Bob'</span>, <span class="string">'Jack'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">3</span>] OR L[:<span class="number">3</span>] <span class="comment"># 取L列表的前三个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 从索引1开始取出两个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-1</span>] <span class="comment"># 取倒数第一个元素</span></span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = list(rang(<span class="number">100</span>))<span class="comment"># 创建一个0-99的数列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[:<span class="number">10</span>] <span class="comment"># 取出前十个数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">-10</span>:] <span class="comment"># 取出后十个数</span></span><br></pre></td></tr></table></figure><h3 id="字符列表互换"><a href="#字符列表互换" class="headerlink" title="字符列表互换"></a>字符列表互换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lstr = list(map(str, ls))<span class="comment"># 整数列表转化为字符串列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">','</span>.join(ls)<span class="comment"># 列表转换字符串</span></span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">'1,2,3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = str.strip().split(<span class="string">','</span>)<span class="comment"># 以逗号为分隔转为列表</span></span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表去重</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=list(set(a))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 嵌套列表去重</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [list(t) <span class="keyword">for</span> t <span class="keyword">in</span> set(tuple(i) <span class="keyword">for</span> i <span class="keyword">in</span> b)]</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h2 id="获取列表值的次数"><a href="#获取列表值的次数" class="headerlink" title="获取列表值的次数"></a>获取列表值的次数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;                     <span class="comment">#定义空字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> set(list):        <span class="comment">#去重复的值，set</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    a[i] = list.count(i)   <span class="comment">#去重后做计数，把数量和值写到字典a  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">1</span>, <span class="number">15</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [[<span class="number">1</span>],[<span class="number">2</span>]][<span class="literal">True</span>]</span><br><span class="line">[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [[<span class="number">1</span>],[<span class="number">2</span>]][<span class="literal">False</span>]</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]][<span class="literal">True</span>]</span><br><span class="line">[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = &#123;<span class="string">'color'</span>:<span class="string">'red'</span>, <span class="string">'age'</span>:<span class="string">'12'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.keys()</span><br><span class="line">dict_keys([<span class="string">'color'</span>, <span class="string">'age'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(spam.keys())</span><br><span class="line">[<span class="string">'color'</span>, <span class="string">'age'</span>]</span><br></pre></td></tr></table></figure><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = &#123;<span class="string">'color'</span>:<span class="string">'red'</span>, <span class="string">'age'</span>:<span class="string">'12'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> spam.values():</span><br><span class="line">    print(i)</span><br><span class="line">red</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = &#123;<span class="string">'color'</span>:<span class="string">'red'</span>, <span class="string">'age'</span>:<span class="string">'12'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, j <span class="keyword">in</span> spam.items():</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    print(<span class="string">'Key: '</span> + i + <span class="string">'Value: '</span> + str(j))</span><br><span class="line">Key: age Value: <span class="number">12</span></span><br><span class="line">Key: color Value: red</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>在访问一个键的值之前，检查该键是否存在字典中，这很麻烦。好在字典有一个get()方法，它有两个参数：要取得其值的键，以及如果该键不存在时，返回的备用值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>picnicItems = &#123;<span class="string">'apples'</span>: <span class="number">5</span>, <span class="string">'cups'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picnicItems.get(<span class="string">'cups'</span>, <span class="number">0</span> )</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picnicItems.get(<span class="string">'eggs'</span>, <span class="number">0</span> )</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault()"></a>setdefault()</h3><p>方法提供了一种方式，在一行中完成这件事。传递给该方法的第一个参数，是要检查的键。第二个参数，如果改建不存在时要设置的值。如果该键确实存在，方法就会返回键的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = &#123;<span class="string">'name'</span>: <span class="string">'pooka'</span>, <span class="string">'age'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.setdefault(<span class="string">'color'</span>, <span class="string">'black'</span>)</span><br><span class="line"><span class="string">'black'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.setdefault(<span class="string">'color'</span>, <span class="string">'while'</span>)</span><br><span class="line"><span class="string">'black'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'black'</span>, <span class="string">'name'</span>: <span class="string">'pooka'</span>, <span class="string">'age'</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="upper-lower"><a href="#upper-lower" class="headerlink" title="upper()/lower()"></a>upper()/lower()</h3><p>upper()和lower()字符串方法返回一个新字符，其中原字符串的所有字母都被相应地转换为大写或小写。字符串中非非字母字符保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = <span class="string">'Hello world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = spam.upper()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line"><span class="string">'HELLO WORLD!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = spam.lower()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam</span><br><span class="line"><span class="string">'hello world!'</span></span><br></pre></td></tr></table></figure><h3 id="isupper-islower"><a href="#isupper-islower" class="headerlink" title="isupper()/islower()"></a>isupper()/islower()</h3><p>如果字符串至少有一个字母，并且所有字母都是大写或小写，isupper()和islower()方法就会相应地返回布尔值True.否则返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = <span class="string">'Hello world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.isupper()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.islower()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>反参</th><th>解释</th></tr></thead><tbody><tr><td>isalpha()</td><td>True</td><td>如果字符串只包含字母，并且非空</td></tr><tr><td>isalnum()</td><td>True</td><td>如果字符串只包含字母和数字，并且非空</td></tr><tr><td>isdecimal()</td><td>True</td><td>如果字符串只包含数字字符，并且非空</td></tr><tr><td>isspace()</td><td>True</td><td>如果字符串只包含空格、制表符和换行符，并且非空</td></tr><tr><td>istitle()</td><td>True</td><td>如果字符串仅包含以大写字母开头、后面都是小写字母的单词</td></tr></tbody></table><h3 id="startswith-endswith"><a href="#startswith-endswith" class="headerlink" title="startswith()/endswith()"></a>startswith()/endswith()</h3><p>startswith()和endswith()方法返回True,如果它们所调用的字符串以该方式传入的字符串开始或结束。否则，方法返回False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.startswith(<span class="string">'Hello'</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello world!'</span>.endswith(<span class="string">'world!'</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="join-split"><a href="#join-split" class="headerlink" title="join()/split()"></a>join()/split()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">','</span>.join([<span class="string">'cats'</span>, <span class="string">'rats'</span>, <span class="string">'bats'</span>])</span><br><span class="line"><span class="string">'cats, rats, bats'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">' '</span>.join([<span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'a'</span>, <span class="string">'cat'</span>])</span><br><span class="line"><span class="string">'I am a cat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.join([<span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'a'</span>, <span class="string">'cat'</span>])</span><br><span class="line"><span class="string">'IABCamABCaABCcat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'I am a cat'</span>.split()</span><br><span class="line">[<span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'a'</span>, <span class="string">'cat'</span>]</span><br></pre></td></tr></table></figure><h3 id="rjust-ljust-center"><a href="#rjust-ljust-center" class="headerlink" title="rjust()/ljust()/center()"></a>rjust()/ljust()/center()</h3><p>对齐文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.rjust(<span class="number">10</span>)</span><br><span class="line"><span class="string">'          Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="string">'                    Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.ljust(<span class="number">10</span>)</span><br><span class="line"><span class="string">'Hello          '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.rjust(<span class="number">10</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">'**********Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.ljust(<span class="number">10</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">'Hello**********'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.center(<span class="number">10</span>)</span><br><span class="line"><span class="string">'          Hello          '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello'</span>.center(<span class="number">10</span>, <span class="string">'='</span>)</span><br><span class="line"><span class="string">'==========Hello=========='</span></span><br></pre></td></tr></table></figure><h3 id="strip-rstrip-lstrip"><a href="#strip-rstrip-lstrip" class="headerlink" title="strip()/rstrip()/lstrip()"></a>strip()/rstrip()/lstrip()</h3><p>strip()字符串方法将返回一个首位没有空白符的字符，lstrip()和rstrip()方法将删除左边或右边的空白字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam = <span class="string">' Hello world! '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.strip()</span><br><span class="line"><span class="string">'Hello world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.lstrip()</span><br><span class="line"><span class="string">'Hello world! '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam.rstrip()</span><br><span class="line"><span class="string">' Hello world!'</span></span><br></pre></td></tr></table></figure><h3 id="pyperclip"><a href="#pyperclip" class="headerlink" title="pyperclip"></a>pyperclip</h3><p>用pyperclip模块拷贝粘贴字符串</p><h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h2><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()</p><p>isinstance() 与 type() 区别：</p><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,int)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,str)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance (a,(str,int,list))    <span class="comment"># 是元组中的一个返回 True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>python使用base64进行编码的时候，会使用byte格式，想要没有b’’包裹的结果需要转换成字符串格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64_image = str(base64.b64encode(image.read()), <span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
